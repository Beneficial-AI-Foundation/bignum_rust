-- THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS
-- [bn_rust]
import Aeneas
open Aeneas.Std Result Error
set_option linter.dupNamespace false
set_option linter.hashCommand false
set_option linter.unusedVariables false

namespace bn_rust

/- [core::fmt::Arguments]
   Source: '/rustc/library/core/src/fmt/mod.rs', lines 613:0-613:24
   Name pattern: [core::fmt::Arguments] -/
axiom core.fmt.Arguments : Type

/- [core::fmt::rt::{core::fmt::Arguments<'a>}::new_const]:
   Source: '/rustc/library/core/src/fmt/rt.rs', lines 226:4-226:81
   Name pattern: [core::fmt::rt::{core::fmt::Arguments<''a>}::new_const] -/
axiom core.fmt.rt.Arguments.new_const
  {N : Usize} : Array Str N → Result core.fmt.Arguments

/- Trait declaration: [core::ops::bit::Not]
   Source: '/rustc/library/core/src/ops/bit.rs', lines 34:0-34:13
   Name pattern: [core::ops::bit::Not] -/
structure core.ops.bit.Not (Self : Type) (Self_Output : Type) where
  not : Self → Result Self_Output

/- [core::ops::bit::{core::ops::bit::Not<bool> for &0 (bool)}::not]:
   Source: '/rustc/library/core/src/internal_macros.rs', lines 14:12-14:52
   Name pattern: [core::ops::bit::{core::ops::bit::Not<&'0 bool, bool>}::not] -/
axiom core.ops.bit.Not&0 BoolBool.not : Bool → Result Bool

/- Trait implementation: [core::ops::bit::{core::ops::bit::Not<bool> for &0 (bool)}]
   Source: '/rustc/library/core/src/internal_macros.rs', lines 10:8-10:25
   Name pattern: [core::ops::bit::Not<&'0 bool, bool>] -/
@[reducible]
def core.ops.bit.Not&0 BoolBool : core.ops.bit.Not Bool Bool := {
  not := core.ops.bit.Not&0 BoolBool.not
}

/- [core::iter::adapters::enumerate::Enumerate]
   Source: '/rustc/library/core/src/iter/adapters/enumerate.rs', lines 18:0-18:23
   Name pattern: [core::iter::adapters::enumerate::Enumerate] -/
axiom core.iter.adapters.enumerate.Enumerate (I : Type) : Type

/- Trait declaration: [core::iter::traits::iterator::Iterator]
   Source: '/rustc/library/core/src/iter/traits/iterator.rs', lines 39:0-39:18
   Name pattern: [core::iter::traits::iterator::Iterator] -/
structure core.iter.traits.iterator.Iterator (Self : Type) (Self_Item : Type)
  where
  next : Self → Result ((Option Self_Item) × Self)
  enumerate : Self → Result (core.iter.adapters.enumerate.Enumerate Self)

/- [core::iter::adapters::enumerate::{core::iter::traits::iterator::Iterator<(usize, Clause1_Item)> for core::iter::adapters::enumerate::Enumerate<I>}::next]:
   Source: '/rustc/library/core/src/iter/adapters/enumerate.rs', lines 79:4-79:64
   Name pattern: [core::iter::adapters::enumerate::{core::iter::traits::iterator::Iterator<core::iter::adapters::enumerate::Enumerate<@I>, (usize, @Clause1_Item)>}::next] -/
axiom
  core.iter.adapters.enumerate.IteratorcoreiteradaptersenumerateEnumeratePairUsizeClause1_Item.next
  {I : Type} {Clause1_Item : Type} (traitsiteratorIteratorInst :
  core.iter.traits.iterator.Iterator I Clause1_Item) :
  core.iter.adapters.enumerate.Enumerate I → Result ((Option (Usize ×
    Clause1_Item)) × (core.iter.adapters.enumerate.Enumerate I))

/- [core::iter::adapters::enumerate::{core::iter::traits::iterator::Iterator<(usize, Clause1_Item)> for core::iter::adapters::enumerate::Enumerate<I>}::enumerate]:
   Source: '/rustc/library/core/src/iter/adapters/enumerate.rs', lines 62:0-64:16
   Name pattern: [core::iter::adapters::enumerate::{core::iter::traits::iterator::Iterator<core::iter::adapters::enumerate::Enumerate<@I>, (usize, @Clause1_Item)>}::enumerate] -/
axiom
  core.iter.adapters.enumerate.IteratorcoreiteradaptersenumerateEnumeratePairUsizeClause1_Item.enumerate
  {I : Type} {Clause1_Item : Type} (traitsiteratorIteratorInst :
  core.iter.traits.iterator.Iterator I Clause1_Item) :
  core.iter.adapters.enumerate.Enumerate I → Result
    (core.iter.adapters.enumerate.Enumerate
    (core.iter.adapters.enumerate.Enumerate I))

/- Trait implementation: [core::iter::adapters::enumerate::{core::iter::traits::iterator::Iterator<(usize, Clause1_Item)> for core::iter::adapters::enumerate::Enumerate<I>}]
   Source: '/rustc/library/core/src/iter/adapters/enumerate.rs', lines 62:0-64:16
   Name pattern: [core::iter::traits::iterator::Iterator<core::iter::adapters::enumerate::Enumerate<@I>, (usize, @Clause1_Item)>] -/
@[reducible]
def
  core.iter.traits.iterator.IteratorcoreiteradaptersenumerateEnumeratePairUsizeClause1_Item
  {I : Type} {Clause1_Item : Type} (traitsiteratorIteratorInst :
  core.iter.traits.iterator.Iterator I Clause1_Item) :
  core.iter.traits.iterator.Iterator (core.iter.adapters.enumerate.Enumerate I)
  (Usize × Clause1_Item) := {
  next :=
    core.iter.adapters.enumerate.IteratorcoreiteradaptersenumerateEnumeratePairUsizeClause1_Item.next
    traitsiteratorIteratorInst
  enumerate :=
    core.iter.adapters.enumerate.IteratorcoreiteradaptersenumerateEnumeratePairUsizeClause1_Item.enumerate
    traitsiteratorIteratorInst
}

/- Trait declaration: [core::iter::adapters::zip::TrustedRandomAccessNoCoerce]
   Source: '/rustc/library/core/src/iter/adapters/zip.rs', lines 593:0-593:51
   Name pattern: [core::iter::adapters::zip::TrustedRandomAccessNoCoerce] -/
structure core.iter.adapters.zip.TrustedRandomAccessNoCoerce (Self : Type)
  where
  MAY_HAVE_SIDE_EFFECT : Bool

/- Trait declaration: [core::iter::range::Step]
   Source: '/rustc/library/core/src/iter/range.rs', lines 24:0-24:42
   Name pattern: [core::iter::range::Step] -/
structure core.iter.range.Step (Self : Type) where
  cloneCloneInst : core.clone.Clone Self
  cmpPartialOrdInst : core.cmp.PartialOrd Self Self
  steps_between : Self → Self → Result (Usize × (Option Usize))
  forward_checked : Self → Usize → Result (Option Self)
  backward_checked : Self → Usize → Result (Option Self)

/- [core::iter::range::{core::iter::range::Step for usize}::steps_between]:
   Source: '/rustc/library/core/src/iter/range.rs', lines 262:16-262:84
   Name pattern: [core::iter::range::{core::iter::range::Step<usize>}::steps_between] -/
axiom core.iter.range.StepUsize.steps_between
  : Usize → Usize → Result (Usize × (Option Usize))

/- [core::iter::range::{core::iter::range::Step for usize}::forward_checked]:
   Source: '/rustc/library/core/src/iter/range.rs', lines 273:16-273:73
   Name pattern: [core::iter::range::{core::iter::range::Step<usize>}::forward_checked] -/
axiom core.iter.range.StepUsize.forward_checked
  : Usize → Usize → Result (Option Usize)

/- [core::iter::range::{core::iter::range::Step for usize}::backward_checked]:
   Source: '/rustc/library/core/src/iter/range.rs', lines 281:16-281:74
   Name pattern: [core::iter::range::{core::iter::range::Step<usize>}::backward_checked] -/
axiom core.iter.range.StepUsize.backward_checked
  : Usize → Usize → Result (Option Usize)

/- Trait implementation: [core::iter::range::{core::iter::range::Step for usize}]
   Source: '/rustc/library/core/src/iter/range.rs', lines 257:12-257:37
   Name pattern: [core::iter::range::Step<usize>] -/
@[reducible]
def core.iter.range.StepUsize : core.iter.range.Step Usize := {
  cloneCloneInst := core.clone.CloneUsize
  cmpPartialOrdInst := core.cmp.PartialOrdUsize
  steps_between := core.iter.range.StepUsize.steps_between
  forward_checked := core.iter.range.StepUsize.forward_checked
  backward_checked := core.iter.range.StepUsize.backward_checked
}

/- [core::iter::range::{core::iter::traits::iterator::Iterator<A> for core::ops::range::Range<A>}::next]:
   Source: '/rustc/library/core/src/iter/range.rs', lines 848:4-848:35
   Name pattern: [core::iter::range::{core::iter::traits::iterator::Iterator<core::ops::range::Range<@A>, @A>}::next] -/
axiom core.iter.range.IteratorcoreopsrangeRangeA.next
  {A : Type} (StepInst : core.iter.range.Step A) :
  core.ops.range.Range A → Result ((Option A) × (core.ops.range.Range A))

/- [core::iter::range::{core::iter::traits::iterator::Iterator<A> for core::ops::range::Range<A>}::enumerate]:
   Source: '/rustc/library/core/src/iter/range.rs', lines 844:0-844:40
   Name pattern: [core::iter::range::{core::iter::traits::iterator::Iterator<core::ops::range::Range<@A>, @A>}::enumerate] -/
axiom core.iter.range.IteratorcoreopsrangeRangeA.enumerate
  {A : Type} (StepInst : core.iter.range.Step A) :
  core.ops.range.Range A → Result (core.iter.adapters.enumerate.Enumerate
    (core.ops.range.Range A))

/- Trait implementation: [core::iter::range::{core::iter::traits::iterator::Iterator<A> for core::ops::range::Range<A>}]
   Source: '/rustc/library/core/src/iter/range.rs', lines 844:0-844:40
   Name pattern: [core::iter::traits::iterator::Iterator<core::ops::range::Range<@A>, @A>] -/
@[reducible]
def core.iter.traits.iterator.IteratorcoreopsrangeRangeA {A : Type} (StepInst :
  core.iter.range.Step A) : core.iter.traits.iterator.Iterator
  (core.ops.range.Range A) A := {
  next := core.iter.range.IteratorcoreopsrangeRangeA.next StepInst
  enumerate := core.iter.range.IteratorcoreopsrangeRangeA.enumerate StepInst
}

/- Trait declaration: [core::iter::traits::accum::Sum]
   Source: '/rustc/library/core/src/iter/traits/accum.rs', lines 17:0-17:30
   Name pattern: [core::iter::traits::accum::Sum] -/
structure core.iter.traits.accum.Sum (Self : Type) (A : Type) where
  sum : forall {I : Type} (iteratorIteratorInst :
    core.iter.traits.iterator.Iterator I A), I → Result Self

/- Trait declaration: [core::iter::traits::accum::Product]
   Source: '/rustc/library/core/src/iter/traits/accum.rs', lines 38:0-38:34
   Name pattern: [core::iter::traits::accum::Product] -/
structure core.iter.traits.accum.Product (Self : Type) (A : Type) where
  product : forall {I : Type} (iteratorIteratorInst :
    core.iter.traits.iterator.Iterator I A), I → Result Self

/- Trait declaration: [core::iter::traits::collect::IntoIterator]
   Source: '/rustc/library/core/src/iter/traits/collect.rs', lines 282:0-282:22
   Name pattern: [core::iter::traits::collect::IntoIterator] -/
structure core.iter.traits.collect.IntoIterator (Self : Type) (Self_Item :
  Type) (Self_IntoIter : Type) where
  iteratorIteratorInst : core.iter.traits.iterator.Iterator Self_IntoIter
    Self_Item
  into_iter : Self → Result Self_IntoIter

/- Trait declaration: [core::iter::traits::collect::FromIterator]
   Source: '/rustc/library/core/src/iter/traits/collect.rs', lines 134:0-134:32
   Name pattern: [core::iter::traits::collect::FromIterator] -/
structure core.iter.traits.collect.FromIterator (Self : Type) (A : Type) where
  from_iter : forall {T : Type} {Clause1_IntoIter : Type} (IntoIteratorInst :
    core.iter.traits.collect.IntoIterator T A Clause1_IntoIter), T → Result
    Self

/- [core::iter::traits::collect::{core::iter::traits::collect::IntoIterator<Clause1_Item, I> for I}::into_iter]:
   Source: '/rustc/library/core/src/iter/traits/collect.rs', lines 319:4-319:27
   Name pattern: [core::iter::traits::collect::{core::iter::traits::collect::IntoIterator<@I, @Clause1_Item, @I>}::into_iter] -/
axiom core.iter.traits.collect.IntoIterator.Blanket.into_iter
  {I : Type} {Clause1_Item : Type} (iteratorIteratorInst :
  core.iter.traits.iterator.Iterator I Clause1_Item) :
  I → Result I

/- Trait implementation: [core::iter::traits::collect::{core::iter::traits::collect::IntoIterator<Clause1_Item, I> for I}]
   Source: '/rustc/library/core/src/iter/traits/collect.rs', lines 314:0-314:36
   Name pattern: [core::iter::traits::collect::IntoIterator<@I, @Clause1_Item, @I>] -/
@[reducible]
def core.iter.traits.collect.IntoIterator.Blanket {I : Type} {Clause1_Item :
  Type} (iteratorIteratorInst : core.iter.traits.iterator.Iterator I
  Clause1_Item) : core.iter.traits.collect.IntoIterator I Clause1_Item I := {
  iteratorIteratorInst := iteratorIteratorInst
  into_iter := core.iter.traits.collect.IntoIterator.Blanket.into_iter
    iteratorIteratorInst
}

/- Trait declaration: [core::iter::traits::collect::Extend]
   Source: '/rustc/library/core/src/iter/traits/collect.rs', lines 394:0-394:19
   Name pattern: [core::iter::traits::collect::Extend] -/
structure core.iter.traits.collect.Extend (Self : Type) (A : Type) where
  extend : forall {T : Type} {Clause1_IntoIter : Type} (IntoIteratorInst :
    core.iter.traits.collect.IntoIterator T A Clause1_IntoIter), Self → T →
    Result Self

/- Trait declaration: [core::iter::traits::double_ended::DoubleEndedIterator]
   Source: '/rustc/library/core/src/iter/traits/double_ended.rs', lines 41:0-41:39
   Name pattern: [core::iter::traits::double_ended::DoubleEndedIterator] -/
structure core.iter.traits.double_ended.DoubleEndedIterator (Self : Type)
  (Self_Clause0_Item : Type) where
  iteratorIteratorInst : core.iter.traits.iterator.Iterator Self
    Self_Clause0_Item
  next_back : Self → Result ((Option Self_Clause0_Item) × Self)

/- Trait declaration: [core::iter::traits::exact_size::ExactSizeIterator]
   Source: '/rustc/library/core/src/iter/traits/exact_size.rs', lines 86:0-86:37
   Name pattern: [core::iter::traits::exact_size::ExactSizeIterator] -/
structure core.iter.traits.exact_size.ExactSizeIterator (Self : Type)
  (Self_Clause0_Item : Type) where
  iteratorIteratorInst : core.iter.traits.iterator.Iterator Self
    Self_Clause0_Item

/- [core::iter::traits::iterator::Iterator::enumerate]:
   Source: '/rustc/library/core/src/iter/traits/iterator.rs', lines 984:4-986:20
   Name pattern: [core::iter::traits::iterator::Iterator::enumerate] -/
axiom core.iter.traits.iterator.Iterator.enumerate.default
  {Self : Type} {Clause0_Item : Type} (IteratorInst :
  core.iter.traits.iterator.Iterator Self Clause0_Item) :
  Self → Result (core.iter.adapters.enumerate.Enumerate Self)

/- Trait implementation: [core::marker::{core::marker::Copy for bool}]
   Source: '/rustc/library/core/src/marker.rs', lines 56:25-56:62
   Name pattern: [core::marker::Copy<bool>] -/
@[reducible]
def core.marker.CopyBool : core.marker.Copy Bool := {
  cloneInst := core.clone.CloneBool
}

/- [core::ops::bit::{core::ops::bit::Not<bool> for bool}::not]:
   Source: '/rustc/library/core/src/ops/bit.rs', lines 61:12-61:30
   Name pattern: [core::ops::bit::{core::ops::bit::Not<bool, bool>}::not] -/
axiom core.ops.bit.NotBoolBool.not : Bool → Result Bool

/- Trait implementation: [core::ops::bit::{core::ops::bit::Not<bool> for bool}]
   Source: '/rustc/library/core/src/ops/bit.rs', lines 57:8-57:23
   Name pattern: [core::ops::bit::Not<bool, bool>] -/
@[reducible]
def core.ops.bit.NotBoolBool : core.ops.bit.Not Bool Bool := {
  not := core.ops.bit.NotBoolBool.not
}

/- [core::ops::control_flow::ControlFlow]
   Source: '/rustc/library/core/src/ops/control_flow.rs', lines 87:0-87:31
   Name pattern: [core::ops::control_flow::ControlFlow] -/
inductive core.ops.control_flow.ControlFlow (B : Type) (C : Type) where
| Continue : C → core.ops.control_flow.ControlFlow B C
| Break : B → core.ops.control_flow.ControlFlow B C

/- Trait declaration: [core::ops::function::FnOnce]
   Source: '/rustc/library/core/src/ops/function.rs', lines 242:0-242:29
   Name pattern: [core::ops::function::FnOnce] -/
structure core.ops.function.FnOnce (Self : Type) (Args : Type) (Self_Output :
  Type) where
  call_once : Self → Args → Result Self_Output

/- Trait declaration: [core::ops::function::FnMut]
   Source: '/rustc/library/core/src/ops/function.rs', lines 163:0-163:42
   Name pattern: [core::ops::function::FnMut] -/
structure core.ops.function.FnMut (Self : Type) (Args : Type)
  (Self_Clause0_Output : Type) where
  FnOnceInst : core.ops.function.FnOnce Self Args Self_Clause0_Output
  call_mut : Self → Args → Result (Self_Clause0_Output × Self)

/- Trait declaration: [core::ops::try_trait::FromResidual]
   Source: '/rustc/library/core/src/ops/try_trait.rs', lines 307:0-307:51
   Name pattern: [core::ops::try_trait::FromResidual] -/
structure core.ops.try_trait.FromResidual (Self : Type) (R : Type) where
  from_residual : R → Result Self

/- Trait declaration: [core::ops::try_trait::Try]
   Source: '/rustc/library/core/src/ops/try_trait.rs', lines 131:0-131:27
   Name pattern: [core::ops::try_trait::Try] -/
structure core.ops.try_trait.Try (Self : Type) (Self_Output : Type)
  (Self_Residual : Type) where
  FromResidualInst : core.ops.try_trait.FromResidual Self Self_Residual
  from_output : Self_Output → Result Self
  branch : Self → Result (core.ops.control_flow.ControlFlow Self_Residual
    Self_Output)

/- Trait declaration: [core::ops::try_trait::Residual]
   Source: '/rustc/library/core/src/ops/try_trait.rs', lines 360:0-360:21
   Name pattern: [core::ops::try_trait::Residual] -/
structure core.ops.try_trait.Residual (Self : Type) (O : Type) (Self_TryType :
  Type) where
  TryInst : core.ops.try_trait.Try Self_TryType O Self

/- [core::option::{core::option::Option<&0 (T)>}::copied]:
   Source: '/rustc/library/core/src/option.rs', lines 1919:4-1921:16
   Name pattern: [core::option::{core::option::Option<&'0 @T>}::copied] -/
axiom core.option.Option&0 T.copied
  {T : Type} (markerCopyInst : core.marker.Copy T) :
  Option T → Result (Option T)

/- [core::slice::iter::Iter]
   Source: '/rustc/library/core/src/slice/iter.rs', lines 69:0-69:26
   Name pattern: [core::slice::iter::Iter] -/
axiom core.slice.iter.Iter (T : Type) : Type

/- [core::slice::iter::{core::iter::traits::iterator::Iterator<&'a (T)> for core::slice::iter::Iter<'a, T>}::enumerate]:
   Source: '/rustc/library/core/src/slice/iter/macros.rs', lines 152:8-152:45
   Name pattern: [core::slice::iter::{core::iter::traits::iterator::Iterator<core::slice::iter::Iter<''a, @T>, &''a @T>}::enumerate] -/
axiom core.slice.iter.IteratorcoresliceiterIter&'a T.enumerate
  {T : Type} :
  core.slice.iter.Iter T → Result (core.iter.adapters.enumerate.Enumerate
    (core.slice.iter.Iter T))

/- Trait implementation: [core::slice::iter::{core::iter::traits::iterator::Iterator<&'a (T)> for core::slice::iter::Iter<'a, T>}]
   Source: '/rustc/library/core/src/slice/iter/macros.rs', lines 152:8-152:45
   Name pattern: [core::iter::traits::iterator::Iterator<core::slice::iter::Iter<''a, @T>, &''a @T>] -/
@[reducible]
def core.iter.traits.iterator.IteratorcoresliceiterIter&'a T (T : Type) :
  core.iter.traits.iterator.Iterator (core.slice.iter.Iter T) T := {
  sorry
  enumerate := core.slice.iter.IteratorcoresliceiterIter&'a T.enumerate
}

/- [core::slice::{@Slice<T>}::last]:
   Source: '/rustc/library/core/src/slice/mod.rs', lines 280:4-280:42
   Name pattern: [core::slice::{[@T]}::last] -/
axiom core.slice.Slice.last {T : Type} : Slice T → Result (Option T)

/- [core::slice::{@Slice<T>}::iter]:
   Source: '/rustc/library/core/src/slice/mod.rs', lines 1029:4-1029:43
   Name pattern: [core::slice::{[@T]}::iter] -/
axiom core.slice.Slice.iter
  {T : Type} : Slice T → Result (core.slice.iter.Iter T)

/- [std::io::stdio::_print]:
   Source: '/rustc/library/std/src/io/stdio.rs', lines 1274:0-1274:39
   Name pattern: [std::io::stdio::_print] -/
axiom std.io.stdio._print : core.fmt.Arguments → Result Unit

/- [alloc::vec::{alloc::vec::Vec<T, A>}::pop]:
   Source: '/rustc/library/alloc/src/vec/mod.rs', lines 2528:4-2528:38
   Name pattern: [alloc::vec::{alloc::vec::Vec<@T, @A>}::pop] -/
axiom alloc.vec.Vec.pop
  {T : Type} {A : Type} :
  alloc.vec.Vec T → Result ((Option T) × (alloc.vec.Vec T))

/- [bn_rust::addition::BigNum]
   Source: 'src/addition.rs', lines 1:0-3:1 -/
structure addition.BigNum where
  bits : alloc.vec.Vec Bool

/- [bn_rust::addition::{bn_rust::addition::BigNum}::from_u64]: loop 0:
   Source: 'src/addition.rs', lines 12:12-15:13 -/
def addition.BigNum.from_u64_loop
  (value : U64) (bits : alloc.vec.Vec Bool) : Result addition.BigNum :=
  if value > 0#u64
  then
    do
    let i ← (↑(value &&& 1#u64) : Result U64)
    let bits1 ← alloc.vec.Vec.push bits (i = 1#u64)
    let value1 ← value >>> 1#i32
    addition.BigNum.from_u64_loop value1 bits1
  else ok { bits }
partial_fixpoint

/- [bn_rust::addition::{bn_rust::addition::BigNum}::from_u64]:
   Source: 'src/addition.rs', lines 6:4-19:5 -/
def addition.BigNum.from_u64 (value : U64) : Result addition.BigNum :=
  if value = 0#u64
  then
    do
    let bits ← alloc.vec.Vec.push (alloc.vec.Vec.new Bool) false
    ok { bits }
  else addition.BigNum.from_u64_loop value (alloc.vec.Vec.new Bool)

/- [bn_rust::addition::{bn_rust::addition::BigNum}::to_u64]:
   Source: 'src/addition.rs', lines 21:4-29:5 -/
def addition.BigNum.to_u64 (self : addition.BigNum) : Result U64 :=
  sorry

/- [bn_rust::addition::{bn_rust::addition::BigNum}::normalize]:
   Source: 'src/addition.rs', lines 31:4-36:5 -/
def addition.BigNum.normalize
  (self : addition.BigNum) : Result addition.BigNum :=
  sorry

/- [bn_rust::addition::{bn_rust::addition::BigNum}::add]:
   Source: 'src/addition.rs', lines 39:4-64:5 -/
def addition.BigNum.add
  (self : addition.BigNum) (other : addition.BigNum) :
  Result addition.BigNum
  :=
  sorry

/- [bn_rust::main]:
   Source: 'src/main.rs', lines 4:0-8:1 -/
def main : Result Unit :=
  sorry

end bn_rust
