{"charon_version":"0.1.107","translated":{"crate_name":"bn_rust","options":{"ullbc":false,"lib":false,"bin":null,"mir_promoted":false,"mir_optimized":false,"mir":null,"input_file":null,"read_llbc":null,"dest_dir":null,"dest_file":null,"use_polonius":false,"skip_borrowck":false,"monomorphize":false,"extract_opaque_bodies":false,"translate_all_methods":false,"include":[],"opaque":[],"exclude":[],"remove_associated_types":["*"],"hide_marker_traits":true,"remove_unused_self_clauses":true,"start_from":[],"no_cargo":false,"rustc_args":[],"cargo_args":[],"abort_on_error":false,"error_on_warnings":false,"no_serialize":false,"print_original_ullbc":false,"print_ullbc":false,"print_built_llbc":false,"print_llbc":false,"no_merge_goto_chains":false,"no_ops_to_function_calls":false,"raw_boxes":false,"preset":"Aeneas"},"item_names":[{"key":{"Fun":213},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}},{"Ident":["is_sorted_by",0]}]},{"key":{"TraitDecl":12},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["PartialEq",0]}]},{"key":{"Fun":32},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["PartialOrd",0]},{"Ident":["le",0]}]},{"key":{"Fun":117},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["position",0]}]},{"key":{"Fun":142},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["gt",0]}]},{"key":{"Fun":60},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Ident":["Step",0]},{"Ident":["backward",0]}]},{"key":{"TraitImpl":3},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["collect",0]},{"Impl":{"Trait":3}}]},{"key":{"Fun":2},"value":[{"Ident":["bn_rust",0]},{"Ident":["addition",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["normalize",0]}]},{"key":{"Fun":77},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["advance_by",0]}]},{"key":{"Fun":8},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}}],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["iter",0]}]},{"key":{"Fun":45},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["adapters",0]},{"Ident":["enumerate",0]},{"Impl":{"Trait":4}},{"Ident":["nth",0]}]},{"key":{"Fun":120},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["min",0]}]},{"key":{"Fun":30},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["PartialOrd",0]},{"Ident":["partial_cmp",0]}]},{"key":{"TraitDecl":19},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["FromResidual",0]}]},{"key":{"Fun":135},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["partial_cmp",0]}]},{"key":{"Fun":153},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["collect",0]},{"Ident":["Extend",0]},{"Ident":["extend_one_unchecked",0]}]},{"key":{"Fun":160},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["exact_size",0]},{"Ident":["ExactSizeIterator",0]},{"Ident":["len",0]}]},{"key":{"Fun":61},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Ident":["Step",0]},{"Ident":["backward_unchecked",0]}]},{"key":{"Fun":36},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["PartialOrd",0]},{"Ident":["__chaining_le",0]}]},{"key":{"Fun":59},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Ident":["Step",0]},{"Ident":["backward_checked",0]}]},{"key":{"TraitDecl":21},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["Residual",0]}]},{"key":{"Fun":131},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["sum",0]}]},{"key":{"Fun":170},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":9}},{"Ident":["get_unchecked",0]}]},{"key":{"Fun":181},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":13}},{"Ident":["ge",0]}]},{"key":{"Fun":177},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":13}},{"Ident":["partial_cmp",0]}]},{"key":{"Fun":92},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["skip",0]}]},{"key":{"Fun":118},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["rposition",0]}]},{"key":{"Fun":173},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":9}},{"Ident":["index_mut",0]}]},{"key":{"TraitImpl":10},"value":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Impl":{"Trait":10}}]},{"key":{"Fun":187},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["bit",0]},{"Impl":{"Trait":5}},{"Ident":["not",0]}]},{"key":{"Fun":31},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["PartialOrd",0]},{"Ident":["lt",0]}]},{"key":{"Fun":122},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["max_by",0]}]},{"key":{"Fun":157},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["double_ended",0]},{"Ident":["DoubleEndedIterator",0]},{"Ident":["try_rfold",0]}]},{"key":{"Fun":3},"value":[{"Ident":["bn_rust",0]},{"Ident":["addition",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["add",0]}]},{"key":{"Fun":24},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["Ord",0]},{"Ident":["cmp",0]}]},{"key":{"TraitDecl":5},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["bit",0]},{"Ident":["Not",0]}]},{"key":{"Fun":4},"value":[{"Ident":["bn_rust",0]},{"Ident":["main",0]}]},{"key":{"Fun":18},"value":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"kind":"InherentImplBlock"}}},{"Ident":["with_capacity",0]}]},{"key":{"Fun":128},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["cloned",0]}]},{"key":{"TraitImpl":17},"value":[{"Ident":["core",0]},{"Ident":["clone",0]},{"Ident":["impls",0]},{"Impl":{"Trait":17}}]},{"key":{"Fun":203},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}},{"Ident":["advance_by",0]}]},{"key":{"Fun":199},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}},{"Ident":["next",0]}]},{"key":{"Fun":222},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}},{"Ident":["enumerate",0]}]},{"key":{"Fun":185},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":13}},{"Ident":["__chaining_ge",0]}]},{"key":{"Fun":171},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":9}},{"Ident":["get_unchecked_mut",0]}]},{"key":{"Fun":33},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["PartialOrd",0]},{"Ident":["gt",0]}]},{"key":{"TraitDecl":14},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["FnMut",0]}]},{"key":{"Fun":48},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["adapters",0]},{"Ident":["enumerate",0]},{"Impl":{"Trait":4}},{"Ident":["__iterator_get_unchecked",0]}]},{"key":{"Fun":41},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["adapters",0]},{"Ident":["enumerate",0]},{"Impl":{"Trait":4}},{"Ident":["next",0]}]},{"key":{"Fun":0},"value":[{"Ident":["bn_rust",0]},{"Ident":["addition",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["from_u64",0]}]},{"key":{"Fun":17},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["Ord",0]},{"Ident":["max",0]}]},{"key":{"Fun":126},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["unzip",0]}]},{"key":{"Fun":80},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["chain",0]}]},{"key":{"Fun":210},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}},{"Ident":["find_map",0]}]},{"key":{"Fun":205},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}},{"Ident":["for_each",0]}]},{"key":{"Fun":69},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":7}},{"Ident":["min",0]}]},{"key":{"Fun":71},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":7}},{"Ident":["__iterator_get_unchecked",0]}]},{"key":{"Fun":7},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["deref",0]},{"Ident":["Deref",0]},{"Ident":["deref",0]}]},{"key":{"Fun":186},"value":[{"Ident":["core",0]},{"Ident":["clone",0]},{"Ident":["impls",0]},{"Impl":{"Trait":15}},{"Ident":["clone",0]}]},{"key":{"Fun":202},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}},{"Ident":["last",0]}]},{"key":{"Fun":178},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":13}},{"Ident":["lt",0]}]},{"key":{"Fun":75},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["count",0]}]},{"key":{"Fun":214},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}},{"Ident":["__iterator_get_unchecked",0]}]},{"key":{"Fun":19},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}}],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["get",0]}]},{"key":{"Fun":158},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["double_ended",0]},{"Ident":["DoubleEndedIterator",0]},{"Ident":["rfold",0]}]},{"key":{"Type":2},"value":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Ident":["Global",0]}]},{"key":{"TraitDecl":17},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["adapters",0]},{"Ident":["zip",0]},{"Ident":["TrustedRandomAccessNoCoerce",0]}]},{"key":{"TraitDecl":28},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["private_slice_index",0]},{"Ident":["Sealed",0]}]},{"key":{"Fun":42},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["adapters",0]},{"Ident":["enumerate",0]},{"Impl":{"Trait":4}},{"Ident":["size_hint",0]}]},{"key":{"Fun":148},"value":[{"Ident":["core",0]},{"Ident":["default",0]},{"Ident":["Default",0]},{"Ident":["default",0]}]},{"key":{"Fun":6},"value":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"},{"index":1,"name":"A"}],"const_generics":[],"trait_clauses":[null,null,null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}},{"TypeVar":{"Bound":[0,1]}}],"const_generics":[],"trait_refs":[null,null,null]}}},"kind":"InherentImplBlock"}}},{"Ident":["push",0]}]},{"key":{"TraitImpl":7},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":7}}]},{"key":{"Fun":195},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":8}},{"Ident":["backward_unchecked",0]}]},{"key":{"Fun":211},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}},{"Ident":["position",0]}]},{"key":{"TraitDecl":23},"value":[{"Ident":["core",0]},{"Ident":["default",0]},{"Ident":["Default",0]}]},{"key":{"Fun":156},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["double_ended",0]},{"Ident":["DoubleEndedIterator",0]},{"Ident":["nth_back",0]}]},{"key":{"Fun":217},"value":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Impl":{"Trait":0}},{"Ident":["deallocate",0]}]},{"key":{"TraitImpl":8},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":8}}]},{"key":{"TraitImpl":11},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["private_slice_index",0]},{"Impl":{"Trait":11}}]},{"key":{"Fun":39},"value":[{"Ident":["core",0]},{"Ident":["clone",0]},{"Ident":["Clone",0]},{"Ident":["clone",0]}]},{"key":{"Fun":176},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":14}},{"Ident":["ne",0]}]},{"key":{"Fun":183},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":13}},{"Ident":["__chaining_le",0]}]},{"key":{"Fun":110},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["reduce",0]}]},{"key":{"Fun":74},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["size_hint",0]}]},{"key":{"TraitImpl":13},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":13}}]},{"key":{"Fun":223},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["adapters",0]},{"Ident":["enumerate",0]},{"Impl":{"Trait":4}},{"Ident":["enumerate",0]}]},{"key":{"Fun":200},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}},{"Ident":["size_hint",0]}]},{"key":{"Fun":52},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["Try",0]},{"Ident":["branch",0]}]},{"key":{"TraitImpl":4},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["adapters",0]},{"Ident":["enumerate",0]},{"Impl":{"Trait":4}}]},{"key":{"Fun":175},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":14}},{"Ident":["eq",0]}]},{"key":{"TraitImpl":9},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":9}}]},{"key":{"Fun":11},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["next",0]}]},{"key":{"Fun":209},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}},{"Ident":["find",0]}]},{"key":{"Fun":49},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["FnMut",0]},{"Ident":["call_mut",0]}]},{"key":{"Fun":123},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["min_by_key",0]}]},{"key":{"TraitDecl":16},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["FnOnce",0]}]},{"key":{"Fun":51},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["Try",0]},{"Ident":["from_output",0]}]},{"key":{"Fun":105},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["partition_in_place",0]}]},{"key":{"TraitDecl":25},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["exact_size",0]},{"Ident":["ExactSizeIterator",0]}]},{"key":{"TraitDecl":22},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["collect",0]},{"Ident":["Extend",0]}]},{"key":{"Fun":121},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["max_by_key",0]}]},{"key":{"Fun":144},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["is_sorted",0]}]},{"key":{"Fun":65},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":7}},{"Ident":["last",0]}]},{"key":{"Fun":206},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}},{"Ident":["fold",0]}]},{"key":{"Fun":167},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["index_mut",0]}]},{"key":{"Fun":79},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["step_by",0]}]},{"key":{"Fun":180},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":13}},{"Ident":["gt",0]}]},{"key":{"Fun":216},"value":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Impl":{"Trait":0}},{"Ident":["allocate_zeroed",0]}]},{"key":{"Fun":225},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":7}},{"Ident":["enumerate",0]}]},{"key":{"TraitImpl":6},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":6}}]},{"key":{"Fun":66},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":7}},{"Ident":["advance_by",0]}]},{"key":{"TraitImpl":12},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":12}}]},{"key":{"Fun":221},"value":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Trait":1}},{"Ident":["deref",0]}]},{"key":{"Fun":95},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["flat_map",0]}]},{"key":{"Fun":155},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["double_ended",0]},{"Ident":["DoubleEndedIterator",0]},{"Ident":["advance_back_by",0]}]},{"key":{"Fun":151},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["collect",0]},{"Ident":["Extend",0]},{"Ident":["extend_one",0]}]},{"key":{"Fun":208},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}},{"Ident":["any",0]}]},{"key":{"Fun":196},"value":[{"Ident":["core",0]},{"Ident":["clone",0]},{"Ident":["impls",0]},{"Impl":{"Trait":17}},{"Ident":["clone",0]}]},{"key":{"TraitDecl":24},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["double_ended",0]},{"Ident":["DoubleEndedIterator",0]}]},{"key":{"TraitDecl":20},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["collect",0]},{"Ident":["FromIterator",0]}]},{"key":{"Fun":130},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["array_chunks",0]}]},{"key":{"Type":3},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["adapters",0]},{"Ident":["enumerate",0]},{"Ident":["Enumerate",0]}]},{"key":{"Fun":46},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["adapters",0]},{"Ident":["enumerate",0]},{"Impl":{"Trait":4}},{"Ident":["try_fold",0]}]},{"key":{"Type":9},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["control_flow",0]},{"Ident":["ControlFlow",0]}]},{"key":{"Fun":38},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["PartialOrd",0]},{"Ident":["__chaining_ge",0]}]},{"key":{"Fun":98},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["fuse",0]}]},{"key":{"Fun":40},"value":[{"Ident":["core",0]},{"Ident":["clone",0]},{"Ident":["Clone",0]},{"Ident":["clone_from",0]}]},{"key":{"Fun":70},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":7}},{"Ident":["is_sorted",0]}]},{"key":{"Fun":116},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["try_find",0]}]},{"key":{"Fun":107},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["try_fold",0]}]},{"key":{"Fun":119},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["max",0]}]},{"key":{"Fun":163},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["get_mut",0]}]},{"key":{"Fun":169},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":9}},{"Ident":["get_mut",0]}]},{"key":{"Fun":198},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["accum",0]},{"Ident":["Product",0]},{"Ident":["product",0]}]},{"key":{"Fun":100},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["by_ref",0]}]},{"key":{"Fun":204},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}},{"Ident":["nth",0]}]},{"key":{"TraitImpl":5},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["bit",0]},{"Impl":{"Trait":5}}]},{"key":{"Fun":94},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["scan",0]}]},{"key":{"Fun":179},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":13}},{"Ident":["le",0]}]},{"key":{"Fun":190},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":8}},{"Ident":["forward_checked",0]}]},{"key":{"TraitImpl":0},"value":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Impl":{"Trait":0}}]},{"key":{"Fun":96},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["flatten",0]}]},{"key":{"Type":0},"value":[{"Ident":["bn_rust",0]},{"Ident":["addition",0]},{"Ident":["BigNum",0]}]},{"key":{"Fun":16},"value":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"},{"index":1,"name":"A"}],"const_generics":[],"trait_clauses":[null,null,null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}},{"TypeVar":{"Bound":[0,1]}}],"const_generics":[],"trait_refs":[null,null,null]}}},"kind":"InherentImplBlock"}}},{"Ident":["pop",0]}]},{"key":{"TraitDecl":8},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]}]},{"key":{"Fun":47},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["adapters",0]},{"Ident":["enumerate",0]},{"Impl":{"Trait":4}},{"Ident":["fold",0]}]},{"key":{"Fun":109},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["fold",0]}]},{"key":{"Type":7},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Arguments",0]}]},{"key":{"TraitDecl":26},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["accum",0]},{"Ident":["Sum",0]}]},{"key":{"Fun":149},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["collect",0]},{"Ident":["FromIterator",0]},{"Ident":["from_iter",0]}]},{"key":{"Fun":138},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["eq_by",0]}]},{"key":{"TraitImpl":1},"value":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Trait":1}}]},{"key":{"TraitImpl":15},"value":[{"Ident":["core",0]},{"Ident":["clone",0]},{"Ident":["impls",0]},{"Impl":{"Trait":15}}]},{"key":{"Fun":215},"value":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Impl":{"Trait":0}},{"Ident":["allocate",0]}]},{"key":{"Fun":102},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["try_collect",0]}]},{"key":{"Fun":20},"value":[{"Ident":["core",0]},{"Ident":["option",0]},{"Impl":{"Ty":{"params":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Ref":[{"Var":{"Bound":[0,0]}},{"TypeVar":{"Bound":[0,0]}},"Shared"]}],"const_generics":[],"trait_refs":[null]}}},"kind":"InherentImplBlock"}}},{"Ident":["copied",0]}]},{"key":{"Fun":124},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["min_by",0]}]},{"key":{"Fun":99},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["inspect",0]}]},{"key":{"Fun":22},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["rt",0]},{"Impl":{"Ty":{"params":{"regions":[{"index":0,"name":"'a"}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":7},"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["new_const",0]}]},{"key":{"Type":6},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["range",0]},{"Ident":["Range",0]}]},{"key":{"Type":4},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Ident":["Iter",0]}]},{"key":{"Fun":93},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["take",0]}]},{"key":{"Fun":113},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["any",0]}]},{"key":{"Fun":191},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":8}},{"Ident":["forward",0]}]},{"key":{"Fun":13},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}}],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["last",0]}]},{"key":{"Fun":108},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["try_for_each",0]}]},{"key":{"Fun":55},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Ident":["Step",0]},{"Ident":["steps_between",0]}]},{"key":{"Fun":97},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["map_windows",0]}]},{"key":{"Fun":91},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["map_while",0]}]},{"key":{"Fun":174},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":6}},{"Ident":["cmp",0]}]},{"key":{"Fun":50},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["FnOnce",0]},{"Ident":["call_once",0]}]},{"key":{"Fun":193},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":8}},{"Ident":["backward_checked",0]}]},{"key":{"Fun":87},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["filter_map",0]}]},{"key":{"Fun":21},"value":[{"Ident":["core",0]},{"Ident":["option",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}}],"const_generics":[],"trait_refs":[null]}}},"kind":"InherentImplBlock"}}},{"Ident":["unwrap_or",0]}]},{"key":{"Fun":82},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["intersperse",0]}]},{"key":{"Fun":136},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["partial_cmp_by",0]}]},{"key":{"Fun":212},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}},{"Ident":["rposition",0]}]},{"key":{"Fun":219},"value":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Impl":{"Trait":0}},{"Ident":["grow_zeroed",0]}]},{"key":{"Fun":44},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["adapters",0]},{"Ident":["enumerate",0]},{"Impl":{"Trait":4}},{"Ident":["advance_by",0]}]},{"key":{"Fun":125},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["rev",0]}]},{"key":{"Fun":23},"value":[{"Ident":["std",0]},{"Ident":["io",0]},{"Ident":["stdio",0]},{"Ident":["_print",0]}]},{"key":{"Fun":182},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":13}},{"Ident":["__chaining_lt",0]}]},{"key":{"Fun":197},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["accum",0]},{"Ident":["Sum",0]},{"Ident":["sum",0]}]},{"key":{"Fun":201},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}},{"Ident":["count",0]}]},{"key":{"Fun":112},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["all",0]}]},{"key":{"TraitImpl":2},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}}]},{"key":{"Fun":15},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["bit",0]},{"Ident":["Not",0]},{"Ident":["not",0]}]},{"key":{"Fun":89},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["skip_while",0]}]},{"key":{"Fun":90},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["take_while",0]}]},{"key":{"Fun":43},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["adapters",0]},{"Ident":["enumerate",0]},{"Impl":{"Trait":4}},{"Ident":["count",0]}]},{"key":{"Fun":154},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["double_ended",0]},{"Ident":["DoubleEndedIterator",0]},{"Ident":["next_back",0]}]},{"key":{"Fun":81},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["zip",0]}]},{"key":{"Fun":103},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["collect_into",0]}]},{"key":{"TraitDecl":4},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["collect",0]},{"Ident":["IntoIterator",0]}]},{"key":{"Fun":9},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["enumerate",0]}]},{"key":{"TraitDecl":13},"value":[{"Ident":["core",0]},{"Ident":["clone",0]},{"Ident":["Clone",0]}]},{"key":{"Fun":184},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":13}},{"Ident":["__chaining_gt",0]}]},{"key":{"Fun":192},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":8}},{"Ident":["forward_unchecked",0]}]},{"key":{"TraitDecl":6},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["Ord",0]}]},{"key":{"Fun":166},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["index",0]}]},{"key":{"Fun":27},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["Eq",0]},{"Ident":["assert_receiver_is_total_eq",0]}]},{"key":{"Fun":224},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":6}},{"Ident":["max",0]}]},{"key":{"TraitDecl":18},"value":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["Tuple",0]}]},{"key":{"Fun":84},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["map",0]}]},{"key":{"TraitDecl":15},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["Try",0]}]},{"key":{"Fun":111},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["try_reduce",0]}]},{"key":{"TraitDecl":7},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Ident":["Step",0]}]},{"key":{"Type":5},"value":[{"Ident":["core",0]},{"Ident":["option",0]},{"Ident":["Option",0]}]},{"key":{"Fun":139},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["ne",0]}]},{"key":{"Fun":25},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["Ord",0]},{"Ident":["min",0]}]},{"key":{"Fun":218},"value":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Impl":{"Trait":0}},{"Ident":["grow",0]}]},{"key":{"Fun":207},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}},{"Ident":["all",0]}]},{"key":{"Fun":88},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["peekable",0]}]},{"key":{"Fun":104},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["partition",0]}]},{"key":{"Fun":141},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["le",0]}]},{"key":{"Fun":129},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["cycle",0]}]},{"key":{"Fun":64},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":7}},{"Ident":["count",0]}]},{"key":{"Fun":140},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["lt",0]}]},{"key":{"Fun":72},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["collect",0]},{"Impl":{"Trait":3}},{"Ident":["into_iter",0]}]},{"key":{"Fun":161},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["exact_size",0]},{"Ident":["ExactSizeIterator",0]},{"Ident":["is_empty",0]}]},{"key":{"Fun":165},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["get_unchecked_mut",0]}]},{"key":{"Fun":132},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["product",0]}]},{"key":{"Fun":12},"value":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"},{"index":1,"name":"A"}],"const_generics":[],"trait_clauses":[null,null,null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}},{"TypeVar":{"Bound":[0,1]}}],"const_generics":[],"trait_refs":[null,null,null]}}},"kind":"InherentImplBlock"}}},{"Ident":["len",0]}]},{"key":{"Fun":162},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["get",0]}]},{"key":{"TraitDecl":10},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["Eq",0]}]},{"key":{"Fun":1},"value":[{"Ident":["bn_rust",0]},{"Ident":["addition",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["to_u64",0]}]},{"key":{"Fun":58},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Ident":["Step",0]},{"Ident":["forward_unchecked",0]}]},{"key":{"Fun":133},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["cmp",0]}]},{"key":{"Fun":34},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["PartialOrd",0]},{"Ident":["ge",0]}]},{"key":{"Fun":188},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["bit",0]},{"Impl":{"Trait":16}},{"Ident":["not",0]}]},{"key":{"Fun":67},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":7}},{"Ident":["nth",0]}]},{"key":{"Fun":146},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["is_sorted_by_key",0]}]},{"key":{"Fun":152},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["collect",0]},{"Ident":["Extend",0]},{"Ident":["extend_reserve",0]}]},{"key":{"Fun":168},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":9}},{"Ident":["get",0]}]},{"key":{"Fun":26},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["Ord",0]},{"Ident":["clamp",0]}]},{"key":{"Fun":54},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["adapters",0]},{"Ident":["zip",0]},{"Ident":["TrustedRandomAccessNoCoerce",0]},{"Ident":["size",0]}]},{"key":{"TraitDecl":0},"value":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["Sized",0]}]},{"key":{"TraitImpl":14},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":14}}]},{"key":{"Fun":10},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["collect",0]},{"Ident":["IntoIterator",0]},{"Ident":["into_iter",0]}]},{"key":{"Type":1},"value":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Ident":["Vec",0]}]},{"key":{"Fun":63},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":7}},{"Ident":["size_hint",0]}]},{"key":{"Fun":37},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["PartialOrd",0]},{"Ident":["__chaining_gt",0]}]},{"key":{"Fun":159},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["double_ended",0]},{"Ident":["DoubleEndedIterator",0]},{"Ident":["rfind",0]}]},{"key":{"Fun":127},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["copied",0]}]},{"key":{"Fun":164},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["get_unchecked",0]}]},{"key":{"Fun":83},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["intersperse_with",0]}]},{"key":{"Fun":172},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":9}},{"Ident":["index",0]}]},{"key":{"Fun":35},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["PartialOrd",0]},{"Ident":["__chaining_lt",0]}]},{"key":{"TraitDecl":27},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["accum",0]},{"Ident":["Product",0]}]},{"key":{"Fun":53},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["FromResidual",0]},{"Ident":["from_residual",0]}]},{"key":{"TraitDecl":1},"value":[{"Ident":["core",0]},{"Ident":["alloc",0]},{"Ident":["Allocator",0]}]},{"key":{"Fun":29},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["PartialEq",0]},{"Ident":["ne",0]}]},{"key":{"Fun":137},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["eq",0]}]},{"key":{"Fun":101},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["collect",0]}]},{"key":{"Fun":86},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["filter",0]}]},{"key":{"Fun":78},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["nth",0]}]},{"key":{"Fun":73},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["next_chunk",0]}]},{"key":{"TraitDecl":9},"value":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["Copy",0]}]},{"key":{"Fun":68},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":7}},{"Ident":["max",0]}]},{"key":{"Fun":134},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["cmp_by",0]}]},{"key":{"Fun":147},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["__iterator_get_unchecked",0]}]},{"key":{"Fun":57},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Ident":["Step",0]},{"Ident":["forward",0]}]},{"key":{"Fun":220},"value":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Impl":{"Trait":0}},{"Ident":["shrink",0]}]},{"key":{"Fun":62},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":7}},{"Ident":["next",0]}]},{"key":{"Fun":56},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Ident":["Step",0]},{"Ident":["forward_checked",0]}]},{"key":{"TraitDecl":2},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["deref",0]},{"Ident":["Deref",0]}]},{"key":{"Fun":28},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["PartialEq",0]},{"Ident":["eq",0]}]},{"key":{"Fun":85},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["for_each",0]}]},{"key":{"Fun":106},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["is_partitioned",0]}]},{"key":{"Fun":76},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["last",0]}]},{"key":{"Fun":5},"value":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"kind":"InherentImplBlock"}}},{"Ident":["new",0]}]},{"key":{"Fun":115},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["find_map",0]}]},{"key":{"Fun":189},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":8}},{"Ident":["steps_between",0]}]},{"key":{"Type":8},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["Ordering",0]}]},{"key":{"TraitDecl":3},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]}]},{"key":{"Fun":145},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["is_sorted_by",0]}]},{"key":{"Fun":150},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["collect",0]},{"Ident":["Extend",0]},{"Ident":["extend",0]}]},{"key":{"TraitImpl":16},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["bit",0]},{"Impl":{"Trait":16}}]},{"key":{"Fun":114},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["find",0]}]},{"key":{"Fun":194},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":8}},{"Ident":["backward",0]}]},{"key":{"Fun":143},"value":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["ge",0]}]},{"key":{"Fun":14},"value":[{"Ident":["core",0]},{"Ident":["option",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}}],"const_generics":[],"trait_refs":[null]}}},"kind":"InherentImplBlock"}}},{"Ident":["unwrap",0]}]},{"key":{"TraitDecl":11},"value":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["PartialOrd",0]}]}],"short_names":[{"key":{"TraitImpl":10},"value":[{"Impl":{"Trait":10}}]},{"key":{"Fun":42},"value":[{"Impl":{"Trait":4}},{"Ident":["size_hint",0]}]},{"key":{"TraitDecl":27},"value":[{"Ident":["Product",0]}]},{"key":{"Fun":189},"value":[{"Impl":{"Trait":8}},{"Ident":["steps_between",0]}]},{"key":{"Fun":194},"value":[{"Impl":{"Trait":8}},{"Ident":["backward",0]}]},{"key":{"Type":0},"value":[{"Ident":["BigNum",0]}]},{"key":{"Fun":157},"value":[{"Ident":["try_rfold",0]}]},{"key":{"Fun":111},"value":[{"Ident":["try_reduce",0]}]},{"key":{"Fun":96},"value":[{"Ident":["flatten",0]}]},{"key":{"Fun":9},"value":[{"Ident":["enumerate",0]}]},{"key":{"TraitDecl":10},"value":[{"Ident":["Eq",0]}]},{"key":{"TraitDecl":28},"value":[{"Ident":["Sealed",0]}]},{"key":{"Fun":108},"value":[{"Ident":["try_for_each",0]}]},{"key":{"TraitDecl":12},"value":[{"Ident":["PartialEq",0]}]},{"key":{"Fun":23},"value":[{"Ident":["_print",0]}]},{"key":{"Type":1},"value":[{"Ident":["Vec",0]}]},{"key":{"Fun":0},"value":[{"Ident":["from_u64",0]}]},{"key":{"TraitImpl":9},"value":[{"Impl":{"Trait":9}}]},{"key":{"Fun":195},"value":[{"Impl":{"Trait":8}},{"Ident":["backward_unchecked",0]}]},{"key":{"Fun":87},"value":[{"Ident":["filter_map",0]}]},{"key":{"Fun":177},"value":[{"Impl":{"Trait":13}},{"Ident":["partial_cmp",0]}]},{"key":{"Fun":2},"value":[{"Ident":["normalize",0]}]},{"key":{"TraitImpl":0},"value":[{"Impl":{"Trait":0}}]},{"key":{"Fun":124},"value":[{"Ident":["min_by",0]}]},{"key":{"Fun":65},"value":[{"Impl":{"Trait":7}},{"Ident":["last",0]}]},{"key":{"Fun":81},"value":[{"Ident":["zip",0]}]},{"key":{"TraitDecl":7},"value":[{"Ident":["Step",0]}]},{"key":{"TraitDecl":2},"value":[{"Ident":["Deref",0]}]},{"key":{"Fun":106},"value":[{"Ident":["is_partitioned",0]}]},{"key":{"Fun":128},"value":[{"Ident":["cloned",0]}]},{"key":{"Fun":69},"value":[{"Impl":{"Trait":7}},{"Ident":["min",0]}]},{"key":{"Fun":161},"value":[{"Ident":["is_empty",0]}]},{"key":{"Fun":181},"value":[{"Impl":{"Trait":13}},{"Ident":["ge",0]}]},{"key":{"Fun":221},"value":[{"Impl":{"Trait":1}},{"Ident":["deref",0]}]},{"key":{"TraitDecl":20},"value":[{"Ident":["FromIterator",0]}]},{"key":{"Fun":6},"value":[{"Ident":["push",0]}]},{"key":{"Fun":66},"value":[{"Impl":{"Trait":7}},{"Ident":["advance_by",0]}]},{"key":{"Fun":5},"value":[{"Ident":["new",0]}]},{"key":{"TraitDecl":14},"value":[{"Ident":["FnMut",0]}]},{"key":{"Fun":199},"value":[{"Impl":{"Trait":2}},{"Ident":["next",0]}]},{"key":{"TraitImpl":13},"value":[{"Impl":{"Trait":13}}]},{"key":{"Fun":220},"value":[{"Ident":["shrink",0]}]},{"key":{"Fun":188},"value":[{"Impl":{"Trait":16}},{"Ident":["not",0]}]},{"key":{"Fun":184},"value":[{"Impl":{"Trait":13}},{"Ident":["__chaining_gt",0]}]},{"key":{"Type":4},"value":[{"Ident":["Iter",0]}]},{"key":{"TraitImpl":14},"value":[{"Impl":{"Trait":14}}]},{"key":{"Fun":175},"value":[{"Impl":{"Trait":14}},{"Ident":["eq",0]}]},{"key":{"Fun":102},"value":[{"Ident":["try_collect",0]}]},{"key":{"Fun":92},"value":[{"Ident":["skip",0]}]},{"key":{"Fun":101},"value":[{"Ident":["collect",0]}]},{"key":{"TraitImpl":15},"value":[{"Impl":{"Trait":15}}]},{"key":{"Fun":146},"value":[{"Ident":["is_sorted_by_key",0]}]},{"key":{"Fun":203},"value":[{"Impl":{"Trait":2}},{"Ident":["advance_by",0]}]},{"key":{"Fun":52},"value":[{"Ident":["branch",0]}]},{"key":{"Fun":46},"value":[{"Impl":{"Trait":4}},{"Ident":["try_fold",0]}]},{"key":{"Fun":105},"value":[{"Ident":["partition_in_place",0]}]},{"key":{"TraitDecl":8},"value":[{"Ident":["SliceIndex",0]}]},{"key":{"TraitImpl":5},"value":[{"Impl":{"Trait":5}}]},{"key":{"Fun":208},"value":[{"Impl":{"Trait":2}},{"Ident":["any",0]}]},{"key":{"Type":9},"value":[{"Ident":["ControlFlow",0]}]},{"key":{"Type":5},"value":[{"Ident":["Option",0]}]},{"key":{"TraitDecl":22},"value":[{"Ident":["Extend",0]}]},{"key":{"Fun":211},"value":[{"Impl":{"Trait":2}},{"Ident":["position",0]}]},{"key":{"TraitImpl":4},"value":[{"Impl":{"Trait":4}}]},{"key":{"TraitDecl":19},"value":[{"Ident":["FromResidual",0]}]},{"key":{"Fun":40},"value":[{"Ident":["clone_from",0]}]},{"key":{"TraitDecl":3},"value":[{"Ident":["Iterator",0]}]},{"key":{"Type":7},"value":[{"Ident":["Arguments",0]}]},{"key":{"Fun":150},"value":[{"Ident":["extend",0]}]},{"key":{"Fun":159},"value":[{"Ident":["rfind",0]}]},{"key":{"Fun":8},"value":[{"Ident":["iter",0]}]},{"key":{"Fun":89},"value":[{"Ident":["skip_while",0]}]},{"key":{"Fun":213},"value":[{"Impl":{"Trait":2}},{"Ident":["is_sorted_by",0]}]},{"key":{"Type":3},"value":[{"Ident":["Enumerate",0]}]},{"key":{"Fun":196},"value":[{"Impl":{"Trait":17}},{"Ident":["clone",0]}]},{"key":{"TraitImpl":12},"value":[{"Impl":{"Trait":12}}]},{"key":{"Fun":204},"value":[{"Impl":{"Trait":2}},{"Ident":["nth",0]}]},{"key":{"Fun":186},"value":[{"Impl":{"Trait":15}},{"Ident":["clone",0]}]},{"key":{"Fun":219},"value":[{"Ident":["grow_zeroed",0]}]},{"key":{"TraitImpl":1},"value":[{"Impl":{"Trait":1}}]},{"key":{"Fun":206},"value":[{"Impl":{"Trait":2}},{"Ident":["fold",0]}]},{"key":{"Fun":100},"value":[{"Ident":["by_ref",0]}]},{"key":{"Fun":82},"value":[{"Ident":["intersperse",0]}]},{"key":{"Fun":98},"value":[{"Ident":["fuse",0]}]},{"key":{"Fun":121},"value":[{"Ident":["max_by_key",0]}]},{"key":{"Fun":173},"value":[{"Impl":{"Trait":9}},{"Ident":["index_mut",0]}]},{"key":{"Fun":123},"value":[{"Ident":["min_by_key",0]}]},{"key":{"Fun":136},"value":[{"Ident":["partial_cmp_by",0]}]},{"key":{"TraitDecl":0},"value":[{"Ident":["Sized",0]}]},{"key":{"Fun":202},"value":[{"Impl":{"Trait":2}},{"Ident":["last",0]}]},{"key":{"Fun":80},"value":[{"Ident":["chain",0]}]},{"key":{"Fun":125},"value":[{"Ident":["rev",0]}]},{"key":{"Fun":152},"value":[{"Ident":["extend_reserve",0]}]},{"key":{"Fun":64},"value":[{"Impl":{"Trait":7}},{"Ident":["count",0]}]},{"key":{"TraitDecl":6},"value":[{"Ident":["Ord",0]}]},{"key":{"Fun":149},"value":[{"Ident":["from_iter",0]}]},{"key":{"Fun":172},"value":[{"Impl":{"Trait":9}},{"Ident":["index",0]}]},{"key":{"Fun":153},"value":[{"Ident":["extend_one_unchecked",0]}]},{"key":{"Fun":155},"value":[{"Ident":["advance_back_by",0]}]},{"key":{"Fun":171},"value":[{"Impl":{"Trait":9}},{"Ident":["get_unchecked_mut",0]}]},{"key":{"Fun":215},"value":[{"Ident":["allocate",0]}]},{"key":{"TraitDecl":26},"value":[{"Ident":["Sum",0]}]},{"key":{"Fun":91},"value":[{"Ident":["map_while",0]}]},{"key":{"Fun":122},"value":[{"Ident":["max_by",0]}]},{"key":{"Fun":44},"value":[{"Impl":{"Trait":4}},{"Ident":["advance_by",0]}]},{"key":{"Fun":210},"value":[{"Impl":{"Trait":2}},{"Ident":["find_map",0]}]},{"key":{"Fun":190},"value":[{"Impl":{"Trait":8}},{"Ident":["forward_checked",0]}]},{"key":{"TraitDecl":4},"value":[{"Ident":["IntoIterator",0]}]},{"key":{"Fun":88},"value":[{"Ident":["peekable",0]}]},{"key":{"TraitDecl":17},"value":[{"Ident":["TrustedRandomAccessNoCoerce",0]}]},{"key":{"Fun":95},"value":[{"Ident":["flat_map",0]}]},{"key":{"Fun":178},"value":[{"Impl":{"Trait":13}},{"Ident":["lt",0]}]},{"key":{"Fun":26},"value":[{"Ident":["clamp",0]}]},{"key":{"Fun":3},"value":[{"Ident":["add",0]}]},{"key":{"Fun":154},"value":[{"Ident":["next_back",0]}]},{"key":{"Fun":67},"value":[{"Impl":{"Trait":7}},{"Ident":["nth",0]}]},{"key":{"TraitDecl":13},"value":[{"Ident":["Clone",0]}]},{"key":{"Fun":126},"value":[{"Ident":["unzip",0]}]},{"key":{"Fun":16},"value":[{"Ident":["pop",0]}]},{"key":{"Fun":90},"value":[{"Ident":["take_while",0]}]},{"key":{"Fun":110},"value":[{"Ident":["reduce",0]}]},{"key":{"Fun":63},"value":[{"Impl":{"Trait":7}},{"Ident":["size_hint",0]}]},{"key":{"Fun":48},"value":[{"Impl":{"Trait":4}},{"Ident":["__iterator_get_unchecked",0]}]},{"key":{"Fun":27},"value":[{"Ident":["assert_receiver_is_total_eq",0]}]},{"key":{"TraitDecl":15},"value":[{"Ident":["Try",0]}]},{"key":{"TraitImpl":7},"value":[{"Impl":{"Trait":7}}]},{"key":{"TraitImpl":6},"value":[{"Impl":{"Trait":6}}]},{"key":{"Fun":174},"value":[{"Impl":{"Trait":6}},{"Ident":["cmp",0]}]},{"key":{"Type":2},"value":[{"Ident":["Global",0]}]},{"key":{"TraitDecl":1},"value":[{"Ident":["Allocator",0]}]},{"key":{"Fun":218},"value":[{"Ident":["grow",0]}]},{"key":{"Fun":170},"value":[{"Impl":{"Trait":9}},{"Ident":["get_unchecked",0]}]},{"key":{"TraitDecl":9},"value":[{"Ident":["Copy",0]}]},{"key":{"Fun":179},"value":[{"Impl":{"Trait":13}},{"Ident":["le",0]}]},{"key":{"Fun":207},"value":[{"Impl":{"Trait":2}},{"Ident":["all",0]}]},{"key":{"Fun":73},"value":[{"Ident":["next_chunk",0]}]},{"key":{"Fun":93},"value":[{"Ident":["take",0]}]},{"key":{"TraitDecl":23},"value":[{"Ident":["Default",0]}]},{"key":{"Fun":83},"value":[{"Ident":["intersperse_with",0]}]},{"key":{"Fun":53},"value":[{"Ident":["from_residual",0]}]},{"key":{"Fun":21},"value":[{"Ident":["unwrap_or",0]}]},{"key":{"TraitImpl":2},"value":[{"Impl":{"Trait":2}}]},{"key":{"Fun":94},"value":[{"Ident":["scan",0]}]},{"key":{"Fun":130},"value":[{"Ident":["array_chunks",0]}]},{"key":{"Fun":176},"value":[{"Impl":{"Trait":14}},{"Ident":["ne",0]}]},{"key":{"Fun":158},"value":[{"Ident":["rfold",0]}]},{"key":{"Fun":205},"value":[{"Impl":{"Trait":2}},{"Ident":["for_each",0]}]},{"key":{"Fun":72},"value":[{"Impl":{"Trait":3}},{"Ident":["into_iter",0]}]},{"key":{"Fun":129},"value":[{"Ident":["cycle",0]}]},{"key":{"Fun":134},"value":[{"Ident":["cmp_by",0]}]},{"key":{"Type":8},"value":[{"Ident":["Ordering",0]}]},{"key":{"TraitImpl":11},"value":[{"Impl":{"Trait":11}}]},{"key":{"TraitImpl":16},"value":[{"Impl":{"Trait":16}}]},{"key":{"TraitDecl":21},"value":[{"Ident":["Residual",0]}]},{"key":{"TraitImpl":3},"value":[{"Impl":{"Trait":3}}]},{"key":{"Fun":51},"value":[{"Ident":["from_output",0]}]},{"key":{"Fun":71},"value":[{"Impl":{"Trait":7}},{"Ident":["__iterator_get_unchecked",0]}]},{"key":{"Fun":148},"value":[{"Ident":["default",0]}]},{"key":{"Fun":185},"value":[{"Impl":{"Trait":13}},{"Ident":["__chaining_ge",0]}]},{"key":{"Fun":1},"value":[{"Ident":["to_u64",0]}]},{"key":{"Fun":68},"value":[{"Impl":{"Trait":7}},{"Ident":["max",0]}]},{"key":{"TraitDecl":5},"value":[{"Ident":["Not",0]}]},{"key":{"Fun":97},"value":[{"Ident":["map_windows",0]}]},{"key":{"Fun":151},"value":[{"Ident":["extend_one",0]}]},{"key":{"Fun":156},"value":[{"Ident":["nth_back",0]}]},{"key":{"Fun":200},"value":[{"Impl":{"Trait":2}},{"Ident":["size_hint",0]}]},{"key":{"Fun":187},"value":[{"Impl":{"Trait":5}},{"Ident":["not",0]}]},{"key":{"Fun":84},"value":[{"Ident":["map",0]}]},{"key":{"Fun":191},"value":[{"Impl":{"Trait":8}},{"Ident":["forward",0]}]},{"key":{"Fun":209},"value":[{"Impl":{"Trait":2}},{"Ident":["find",0]}]},{"key":{"Fun":99},"value":[{"Ident":["inspect",0]}]},{"key":{"Fun":169},"value":[{"Impl":{"Trait":9}},{"Ident":["get_mut",0]}]},{"key":{"Fun":116},"value":[{"Ident":["try_find",0]}]},{"key":{"TraitImpl":8},"value":[{"Impl":{"Trait":8}}]},{"key":{"Fun":70},"value":[{"Impl":{"Trait":7}},{"Ident":["is_sorted",0]}]},{"key":{"Fun":50},"value":[{"Ident":["call_once",0]}]},{"key":{"TraitImpl":17},"value":[{"Impl":{"Trait":17}}]},{"key":{"Fun":103},"value":[{"Ident":["collect_into",0]}]},{"key":{"Fun":183},"value":[{"Impl":{"Trait":13}},{"Ident":["__chaining_le",0]}]},{"key":{"Fun":212},"value":[{"Impl":{"Trait":2}},{"Ident":["rposition",0]}]},{"key":{"Fun":180},"value":[{"Impl":{"Trait":13}},{"Ident":["gt",0]}]},{"key":{"Fun":216},"value":[{"Ident":["allocate_zeroed",0]}]},{"key":{"Fun":62},"value":[{"Impl":{"Trait":7}},{"Ident":["next",0]}]},{"key":{"Fun":193},"value":[{"Impl":{"Trait":8}},{"Ident":["backward_checked",0]}]},{"key":{"Fun":18},"value":[{"Ident":["with_capacity",0]}]},{"key":{"Fun":4},"value":[{"Ident":["main",0]}]},{"key":{"Fun":182},"value":[{"Impl":{"Trait":13}},{"Ident":["__chaining_lt",0]}]},{"key":{"Fun":201},"value":[{"Impl":{"Trait":2}},{"Ident":["count",0]}]},{"key":{"Fun":43},"value":[{"Impl":{"Trait":4}},{"Ident":["count",0]}]},{"key":{"Fun":168},"value":[{"Impl":{"Trait":9}},{"Ident":["get",0]}]},{"key":{"Fun":54},"value":[{"Ident":["size",0]}]},{"key":{"TraitDecl":16},"value":[{"Ident":["FnOnce",0]}]},{"key":{"Fun":86},"value":[{"Ident":["filter",0]}]},{"key":{"TraitDecl":24},"value":[{"Ident":["DoubleEndedIterator",0]}]},{"key":{"Fun":138},"value":[{"Ident":["eq_by",0]}]},{"key":{"Fun":45},"value":[{"Impl":{"Trait":4}},{"Ident":["nth",0]}]},{"key":{"Fun":47},"value":[{"Impl":{"Trait":4}},{"Ident":["fold",0]}]},{"key":{"Fun":192},"value":[{"Impl":{"Trait":8}},{"Ident":["forward_unchecked",0]}]},{"key":{"TraitDecl":11},"value":[{"Ident":["PartialOrd",0]}]},{"key":{"TraitDecl":18},"value":[{"Ident":["Tuple",0]}]},{"key":{"Fun":104},"value":[{"Ident":["partition",0]}]},{"key":{"Fun":214},"value":[{"Impl":{"Trait":2}},{"Ident":["__iterator_get_unchecked",0]}]},{"key":{"Fun":217},"value":[{"Ident":["deallocate",0]}]},{"key":{"Fun":79},"value":[{"Ident":["step_by",0]}]},{"key":{"Fun":41},"value":[{"Impl":{"Trait":4}},{"Ident":["next",0]}]},{"key":{"Fun":14},"value":[{"Ident":["unwrap",0]}]},{"key":{"Type":6},"value":[{"Ident":["Range",0]}]},{"key":{"Fun":22},"value":[{"Ident":["new_const",0]}]},{"key":{"TraitDecl":25},"value":[{"Ident":["ExactSizeIterator",0]}]},{"key":{"Fun":49},"value":[{"Ident":["call_mut",0]}]}],"files":[{"name":{"Local":"src/main.rs"},"crate_name":"bn_rust","contents":"mod addition;\nuse crate::addition::BigNum;\n\nfn main() {\n    println!(\"BigNum Operations Demo\");\n    \n    println!(\"Demo completed successfully!\");\n}"},{"name":{"Local":"src/addition.rs"},"crate_name":"bn_rust","contents":"pub struct BigNum {\n    bits: Vec<bool>, // Store bits in little-endian format (least significant first)\n}\n\nimpl BigNum {\n    pub fn from_u64(mut value: u64) -> Self {\n        let mut bits = Vec::new();\n        \n        if value == 0 {\n            bits.push(false);\n        } else {\n            while value > 0 {\n                bits.push(value & 1 == 1);\n                value >>= 1;\n            }\n        }\n        \n        BigNum { bits }\n    }\n\n    pub fn to_u64(&self) -> u64 {\n        let mut result = 0u64;\n        for (i, &bit) in self.bits.iter().enumerate() {\n            if bit && i < 64 {\n                result |= 1u64 << i;\n            }\n        }\n        result\n    }\n\n    fn normalize(&mut self) {\n        // Remove trailing false bits, but keep at least one bit\n        while self.bits.len() > 1 && !self.bits.last().unwrap() {\n            self.bits.pop();\n        }\n    }\n\n    /// Add two BigNums and return the result\n    pub fn add(&self, other: &BigNum) -> BigNum {\n        let max_len = self.bits.len().max(other.bits.len());\n        let mut result = Vec::with_capacity(max_len + 1);\n        let mut carry = false;\n        \n        for i in 0..max_len {\n            let a = self.bits.get(i).copied().unwrap_or(false);\n            let b = other.bits.get(i).copied().unwrap_or(false);\n            \n            // Full adder logic\n            let sum = a ^ b ^ carry;\n            let new_carry = (a & b) | (carry & (a ^ b));\n            \n            result.push(sum);\n            carry = new_carry;\n        }\n        \n        // Add final carry if needed\n        if carry {\n            result.push(true);\n        }\n        \n        let mut bn = BigNum { bits: result };\n        bn.normalize();\n        bn\n    }\n}\n\n"},{"name":{"Local":"/rustc/library/alloc/src/vec/mod.rs"},"crate_name":"alloc","contents":null},{"name":{"Local":"/rustc/library/alloc/src/lib.rs"},"crate_name":"alloc","contents":null},{"name":{"Local":"/rustc/library/alloc/src/alloc.rs"},"crate_name":"alloc","contents":null},{"name":{"Local":"/rustc/library/core/src/lib.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/marker.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/alloc/mod.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/iter/adapters/enumerate.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/iter/mod.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/iter/adapters/mod.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/slice/iter.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/slice/mod.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/option.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/ops/deref.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/ops/mod.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/iter/traits/iterator.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/iter/traits/mod.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/slice/iter/macros.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/iter/traits/collect.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/ops/bit.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/internal_macros.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/ops/range.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/cmp.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/iter/range.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/slice/index.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/std/src/macros.rs"},"crate_name":"std","contents":null},{"name":{"Local":"/rustc/library/core/src/fmt/mod.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/fmt/rt.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/std/src/io/stdio.rs"},"crate_name":"std","contents":null},{"name":{"Local":"/rustc/library/std/src/lib.rs"},"crate_name":"std","contents":null},{"name":{"Local":"/rustc/library/std/src/io/mod.rs"},"crate_name":"std","contents":null},{"name":{"Local":"/rustc/library/core/src/clone.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/ops/function.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/ops/try_trait.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/iter/adapters/zip.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/ops/control_flow.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/default.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/iter/traits/double_ended.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/iter/traits/exact_size.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/iter/traits/accum.rs"},"crate_name":"core","contents":null}],"type_decls":[{"def_id":0,"item_meta":{"name":[{"Ident":["bn_rust",0]},{"Ident":["addition",0]},{"Ident":["BigNum",0]}],"span":{"span":{"file_id":1,"beg":{"line":1,"col":0},"end":{"line":3,"col":1}},"generated_from_span":null},"source_text":"pub struct BigNum {\n    bits: Vec<bool>, // Store bits in little-endian format (least significant first)\n}","attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"is_local":true,"opacity":"Transparent","lang_item":null},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"kind":{"Struct":[{"span":{"span":{"file_id":1,"beg":{"line":2,"col":4},"end":{"line":2,"col":19}},"generated_from_span":null},"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"name":"bits","ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}}]},"layout":{"size":24,"align":8,"discriminant_layout":null,"uninhabited":false,"variant_layouts":[{"field_offsets":[0],"uninhabited":false,"tag":null}]},"ptr_metadata":"None"},{"def_id":1,"item_meta":{"name":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Ident":["Vec",0]}],"span":{"span":{"file_id":2,"beg":{"line":409,"col":0},"end":{"line":409,"col":96}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" A contiguous growable array type, written as `Vec<T>`, short for 'vector'."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let mut vec = Vec::new();"},{"DocComment":" vec.push(1);"},{"DocComment":" vec.push(2);"},{"DocComment":""},{"DocComment":" assert_eq!(vec.len(), 2);"},{"DocComment":" assert_eq!(vec[0], 1);"},{"DocComment":""},{"DocComment":" assert_eq!(vec.pop(), Some(2));"},{"DocComment":" assert_eq!(vec.len(), 1);"},{"DocComment":""},{"DocComment":" vec[0] = 7;"},{"DocComment":" assert_eq!(vec[0], 7);"},{"DocComment":""},{"DocComment":" vec.extend([1, 2, 3]);"},{"DocComment":""},{"DocComment":" for x in &vec {"},{"DocComment":"     println!(\"{x}\");"},{"DocComment":" }"},{"DocComment":" assert_eq!(vec, [7, 1, 2, 3]);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" The [`vec!`] macro is provided for convenient initialization:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let mut vec1 = vec![1, 2, 3];"},{"DocComment":" vec1.push(4);"},{"DocComment":" let vec2 = Vec::from([1, 2, 3, 4]);"},{"DocComment":" assert_eq!(vec1, vec2);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" It can also initialize each element of a `Vec<T>` with a given value."},{"DocComment":" This may be more efficient than performing allocation and initialization"},{"DocComment":" in separate steps, especially when initializing a vector of zeros:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let vec = vec![0; 5];"},{"DocComment":" assert_eq!(vec, [0, 0, 0, 0, 0]);"},{"DocComment":""},{"DocComment":" // The following is equivalent, but potentially slower:"},{"DocComment":" let mut vec = Vec::with_capacity(5);"},{"DocComment":" vec.resize(5, 0);"},{"DocComment":" assert_eq!(vec, [0, 0, 0, 0, 0]);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" For more information, see"},{"DocComment":" [Capacity and Reallocation](#capacity-and-reallocation)."},{"DocComment":""},{"DocComment":" Use a `Vec<T>` as an efficient stack:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let mut stack = Vec::new();"},{"DocComment":""},{"DocComment":" stack.push(1);"},{"DocComment":" stack.push(2);"},{"DocComment":" stack.push(3);"},{"DocComment":""},{"DocComment":" while let Some(top) = stack.pop() {"},{"DocComment":"     // Prints 3, 2, 1"},{"DocComment":"     println!(\"{top}\");"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" # Indexing"},{"DocComment":""},{"DocComment":" The `Vec` type allows access to values by index, because it implements the"},{"DocComment":" [`Index`] trait. An example will be more explicit:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let v = vec![0, 2, 4, 6];"},{"DocComment":" println!(\"{}\", v[1]); // it will display '2'"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" However be careful: if you try to access an index which isn't in the `Vec`,"},{"DocComment":" your software will panic! You cannot do this:"},{"DocComment":""},{"DocComment":" ```should_panic"},{"DocComment":" let v = vec![0, 2, 4, 6];"},{"DocComment":" println!(\"{}\", v[6]); // it will panic!"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" Use [`get`] and [`get_mut`] if you want to check whether the index is in"},{"DocComment":" the `Vec`."},{"DocComment":""},{"DocComment":" # Slicing"},{"DocComment":""},{"DocComment":" A `Vec` can be mutable. On the other hand, slices are read-only objects."},{"DocComment":" To get a [slice][prim@slice], use [`&`]. Example:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" fn read_slice(slice: &[usize]) {"},{"DocComment":"     // ..."},{"DocComment":" }"},{"DocComment":""},{"DocComment":" let v = vec![0, 1];"},{"DocComment":" read_slice(&v);"},{"DocComment":""},{"DocComment":" // ... and that's all!"},{"DocComment":" // you can also do it like this:"},{"DocComment":" let u: &[usize] = &v;"},{"DocComment":" // or like this:"},{"DocComment":" let u: &[_] = &v;"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" In Rust, it's more common to pass slices as arguments rather than vectors"},{"DocComment":" when you just want to provide read access. The same goes for [`String`] and"},{"DocComment":" [`&str`]."},{"DocComment":""},{"DocComment":" # Capacity and reallocation"},{"DocComment":""},{"DocComment":" The capacity of a vector is the amount of space allocated for any future"},{"DocComment":" elements that will be added onto the vector. This is not to be confused with"},{"DocComment":" the *length* of a vector, which specifies the number of actual elements"},{"DocComment":" within the vector. If a vector's length exceeds its capacity, its capacity"},{"DocComment":" will automatically be increased, but its elements will have to be"},{"DocComment":" reallocated."},{"DocComment":""},{"DocComment":" For example, a vector with capacity 10 and length 0 would be an empty vector"},{"DocComment":" with space for 10 more elements. Pushing 10 or fewer elements onto the"},{"DocComment":" vector will not change its capacity or cause reallocation to occur. However,"},{"DocComment":" if the vector's length is increased to 11, it will have to reallocate, which"},{"DocComment":" can be slow. For this reason, it is recommended to use [`Vec::with_capacity`]"},{"DocComment":" whenever possible to specify how big the vector is expected to get."},{"DocComment":""},{"DocComment":" # Guarantees"},{"DocComment":""},{"DocComment":" Due to its incredibly fundamental nature, `Vec` makes a lot of guarantees"},{"DocComment":" about its design. This ensures that it's as low-overhead as possible in"},{"DocComment":" the general case, and can be correctly manipulated in primitive ways"},{"DocComment":" by unsafe code. Note that these guarantees refer to an unqualified `Vec<T>`."},{"DocComment":" If additional type parameters are added (e.g., to support custom allocators),"},{"DocComment":" overriding their defaults may change the behavior."},{"DocComment":""},{"DocComment":" Most fundamentally, `Vec` is and always will be a (pointer, capacity, length)"},{"DocComment":" triplet. No more, no less. The order of these fields is completely"},{"DocComment":" unspecified, and you should use the appropriate methods to modify these."},{"DocComment":" The pointer will never be null, so this type is null-pointer-optimized."},{"DocComment":""},{"DocComment":" However, the pointer might not actually point to allocated memory. In particular,"},{"DocComment":" if you construct a `Vec` with capacity 0 via [`Vec::new`], [`vec![]`][`vec!`],"},{"DocComment":" [`Vec::with_capacity(0)`][`Vec::with_capacity`], or by calling [`shrink_to_fit`]"},{"DocComment":" on an empty Vec, it will not allocate memory. Similarly, if you store zero-sized"},{"DocComment":" types inside a `Vec`, it will not allocate space for them. *Note that in this case"},{"DocComment":" the `Vec` might not report a [`capacity`] of 0*. `Vec` will allocate if and only"},{"DocComment":" if <code>[size_of::\\<T>]\\() * [capacity]\\() > 0</code>. In general, `Vec`'s allocation"},{"DocComment":" details are very subtle --- if you intend to allocate memory using a `Vec`"},{"DocComment":" and use it for something else (either to pass to unsafe code, or to build your"},{"DocComment":" own memory-backed collection), be sure to deallocate this memory by using"},{"DocComment":" `from_raw_parts` to recover the `Vec` and then dropping it."},{"DocComment":""},{"DocComment":" If a `Vec` *has* allocated memory, then the memory it points to is on the heap"},{"DocComment":" (as defined by the allocator Rust is configured to use by default), and its"},{"DocComment":" pointer points to [`len`] initialized, contiguous elements in order (what"},{"DocComment":" you would see if you coerced it to a slice), followed by <code>[capacity] - [len]</code>"},{"DocComment":" logically uninitialized, contiguous elements."},{"DocComment":""},{"DocComment":" A vector containing the elements `'a'` and `'b'` with capacity 4 can be"},{"DocComment":" visualized as below. The top part is the `Vec` struct, it contains a"},{"DocComment":" pointer to the head of the allocation in the heap, length and capacity."},{"DocComment":" The bottom part is the allocation on the heap, a contiguous memory block."},{"DocComment":""},{"DocComment":" ```text"},{"DocComment":"             ptr      len  capacity"},{"DocComment":"        +--------+--------+--------+"},{"DocComment":"        | 0x0123 |      2 |      4 |"},{"DocComment":"        +--------+--------+--------+"},{"DocComment":"             |"},{"DocComment":"             v"},{"DocComment":" Heap   +--------+--------+--------+--------+"},{"DocComment":"        |    'a' |    'b' | uninit | uninit |"},{"DocComment":"        +--------+--------+--------+--------+"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" - **uninit** represents memory that is not initialized, see [`MaybeUninit`]."},{"DocComment":" - Note: the ABI is not stable and `Vec` makes no guarantees about its memory"},{"DocComment":"   layout (including the order of fields)."},{"DocComment":""},{"DocComment":" `Vec` will never perform a \"small optimization\" where elements are actually"},{"DocComment":" stored on the stack for two reasons:"},{"DocComment":""},{"DocComment":" * It would make it more difficult for unsafe code to correctly manipulate"},{"DocComment":"   a `Vec`. The contents of a `Vec` wouldn't have a stable address if it were"},{"DocComment":"   only moved, and it would be more difficult to determine if a `Vec` had"},{"DocComment":"   actually allocated memory."},{"DocComment":""},{"DocComment":" * It would penalize the general case, incurring an additional branch"},{"DocComment":"   on every access."},{"DocComment":""},{"DocComment":" `Vec` will never automatically shrink itself, even if completely empty. This"},{"DocComment":" ensures no unnecessary allocations or deallocations occur. Emptying a `Vec`"},{"DocComment":" and then filling it back up to the same [`len`] should incur no calls to"},{"DocComment":" the allocator. If you wish to free up unused memory, use"},{"DocComment":" [`shrink_to_fit`] or [`shrink_to`]."},{"DocComment":""},{"DocComment":" [`push`] and [`insert`] will never (re)allocate if the reported capacity is"},{"DocComment":" sufficient. [`push`] and [`insert`] *will* (re)allocate if"},{"DocComment":" <code>[len] == [capacity]</code>. That is, the reported capacity is completely"},{"DocComment":" accurate, and can be relied on. It can even be used to manually free the memory"},{"DocComment":" allocated by a `Vec` if desired. Bulk insertion methods *may* reallocate, even"},{"DocComment":" when not necessary."},{"DocComment":""},{"DocComment":" `Vec` does not guarantee any particular growth strategy when reallocating"},{"DocComment":" when full, nor when [`reserve`] is called. The current strategy is basic"},{"DocComment":" and it may prove desirable to use a non-constant growth factor. Whatever"},{"DocComment":" strategy is used will of course guarantee *O*(1) amortized [`push`]."},{"DocComment":""},{"DocComment":" It is guaranteed, in order to respect the intentions of the programmer, that"},{"DocComment":" all of `vec![e_1, e_2, ..., e_n]`, `vec![x; n]`, and [`Vec::with_capacity(n)`] produce a `Vec`"},{"DocComment":" that requests an allocation of the exact size needed for precisely `n` elements from the allocator,"},{"DocComment":" and no other size (such as, for example: a size rounded up to the nearest power of 2)."},{"DocComment":" The allocator will return an allocation that is at least as large as requested, but it may be larger."},{"DocComment":""},{"DocComment":" It is guaranteed that the [`Vec::capacity`] method returns a value that is at least the requested capacity"},{"DocComment":" and not more than the allocated capacity."},{"DocComment":""},{"DocComment":" The method [`Vec::shrink_to_fit`] will attempt to discard excess capacity an allocator has given to a `Vec`."},{"DocComment":" If <code>[len] == [capacity]</code>, then a `Vec<T>` can be converted"},{"DocComment":" to and from a [`Box<[T]>`][owned slice] without reallocating or moving the elements."},{"DocComment":" `Vec` exploits this fact as much as reasonable when implementing common conversions"},{"DocComment":" such as [`into_boxed_slice`]."},{"DocComment":""},{"DocComment":" `Vec` will not specifically overwrite any data that is removed from it,"},{"DocComment":" but also won't specifically preserve it. Its uninitialized memory is"},{"DocComment":" scratch space that it may use however it wants. It will generally just do"},{"DocComment":" whatever is most efficient or otherwise easy to implement. Do not rely on"},{"DocComment":" removed data to be erased for security purposes. Even if you drop a `Vec`, its"},{"DocComment":" buffer may simply be reused by another allocation. Even if you zero a `Vec`'s memory"},{"DocComment":" first, that might not actually happen because the optimizer does not consider"},{"DocComment":" this a side-effect that must be preserved. There is one case which we will"},{"DocComment":" not break, however: using `unsafe` code to write to the excess capacity,"},{"DocComment":" and then increasing the length to match, is always valid."},{"DocComment":""},{"DocComment":" Currently, `Vec` does not guarantee the order in which elements are dropped."},{"DocComment":" The order has changed in the past and may change again."},{"DocComment":""},{"DocComment":" [`get`]: slice::get"},{"DocComment":" [`get_mut`]: slice::get_mut"},{"DocComment":" [`String`]: crate::string::String"},{"DocComment":" [`&str`]: type@str"},{"DocComment":" [`shrink_to_fit`]: Vec::shrink_to_fit"},{"DocComment":" [`shrink_to`]: Vec::shrink_to"},{"DocComment":" [capacity]: Vec::capacity"},{"DocComment":" [`capacity`]: Vec::capacity"},{"DocComment":" [`Vec::capacity`]: Vec::capacity"},{"DocComment":" [size_of::\\<T>]: size_of"},{"DocComment":" [len]: Vec::len"},{"DocComment":" [`len`]: Vec::len"},{"DocComment":" [`push`]: Vec::push"},{"DocComment":" [`insert`]: Vec::insert"},{"DocComment":" [`reserve`]: Vec::reserve"},{"DocComment":" [`Vec::with_capacity(n)`]: Vec::with_capacity"},{"DocComment":" [`MaybeUninit`]: core::mem::MaybeUninit"},{"DocComment":" [owned slice]: Box"},{"DocComment":" [`into_boxed_slice`]: Vec::into_boxed_slice"},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"Vec\""}},{"Unknown":{"path":"rustc_insignificant_dtor","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"Vec"},"generics":{"regions":[],"types":[{"index":0,"name":"T"},{"index":1,"name":"A"}],"const_generics":[],"trait_clauses":[null,null,null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"kind":"Opaque","layout":null,"ptr_metadata":"None"},{"def_id":2,"item_meta":{"name":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Ident":["Global",0]}],"span":{"span":{"file_id":4,"beg":{"line":50,"col":0},"end":{"line":50,"col":17}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" The global memory allocator."},{"DocComment":""},{"DocComment":" This type implements the [`Allocator`] trait by forwarding calls"},{"DocComment":" to the allocator registered with the `#[global_allocator]` attribute"},{"DocComment":" if there is one, or the `std` crate’s default."},{"DocComment":""},{"DocComment":" Note: while this type is unstable, the functionality it provides can be"},{"DocComment":" accessed through the [free functions in `alloc`](self#functions)."}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"global_alloc_ty"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"kind":{"Struct":[]},"layout":{"size":0,"align":1,"discriminant_layout":null,"uninhabited":false,"variant_layouts":[{"field_offsets":[],"uninhabited":false,"tag":null}]},"ptr_metadata":"None"},{"def_id":3,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["adapters",0]},{"Ident":["enumerate",0]},{"Ident":["Enumerate",0]}],"span":{"span":{"file_id":8,"beg":{"line":18,"col":0},"end":{"line":18,"col":23}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" An iterator that yields the current count and the element during iteration."},{"DocComment":""},{"DocComment":" This `struct` is created by the [`enumerate`] method on [`Iterator`]. See its"},{"DocComment":" documentation for more."},{"DocComment":""},{"DocComment":" [`enumerate`]: Iterator::enumerate"},{"DocComment":" [`Iterator`]: trait.Iterator.html"},{"Unknown":{"path":"must_use","args":"\"iterators are lazy and do nothing unless consumed\""}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"Enumerate\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"Enumerate"},"generics":{"regions":[],"types":[{"index":0,"name":"I"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"kind":"Opaque","layout":null,"ptr_metadata":"None"},{"def_id":4,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Ident":["Iter",0]}],"span":{"span":{"file_id":11,"beg":{"line":69,"col":0},"end":{"line":69,"col":26}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Immutable slice iterator"},{"DocComment":""},{"DocComment":" This struct is created by the [`iter`] method on [slices]."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" Basic usage:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" // First, we need a slice to call the `iter` method on:"},{"DocComment":" let slice = &[1, 2, 3];"},{"DocComment":""},{"DocComment":" // Then we call `iter` on the slice to get the `Iter` iterator,"},{"DocComment":" // and iterate over it:"},{"DocComment":" for element in slice.iter() {"},{"DocComment":"     println!(\"{element}\");"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" // This for loop actually already works without calling `iter`:"},{"DocComment":" for element in slice {"},{"DocComment":"     println!(\"{element}\");"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" [`iter`]: slice::iter"},{"DocComment":" [slices]: slice"},{"Unknown":{"path":"must_use","args":"\"iterators are lazy and do nothing unless consumed\""}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"SliceIter\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"SliceIter"},"generics":{"regions":[{"index":0,"name":"'a"}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[{"regions":[],"skip_binder":[{"TypeVar":{"Free":0}},{"Var":{"Free":0}}]},{"regions":[],"skip_binder":[{"TypeVar":{"Free":0}},{"Var":{"Free":0}}]}],"trait_type_constraints":[]},"kind":"Opaque","layout":{"size":16,"align":8,"discriminant_layout":null,"uninhabited":false,"variant_layouts":[{"field_offsets":[0,8,16],"uninhabited":false,"tag":null}]},"ptr_metadata":"None"},{"def_id":5,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["option",0]},{"Ident":["Option",0]}],"span":{"span":{"file_id":13,"beg":{"line":591,"col":0},"end":{"line":591,"col":18}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" The `Option` type. See [the module level documentation](self) for more."},{"Unknown":{"path":"doc","args":"search_unbox"}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"Option\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"Option"},"generics":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"kind":{"Enum":[{"span":{"span":{"file_id":13,"beg":{"line":595,"col":4},"end":{"line":595,"col":8}},"generated_from_span":null},"attr_info":{"attributes":[{"DocComment":" No value."}],"inline":null,"rename":null,"public":true},"name":"None","fields":[],"discriminant":{"Isize":"0"}},{"span":{"span":{"file_id":13,"beg":{"line":599,"col":4},"end":{"line":599,"col":8}},"generated_from_span":null},"attr_info":{"attributes":[{"DocComment":" Some value of type `T`."}],"inline":null,"rename":null,"public":true},"name":"Some","fields":[{"span":{"span":{"file_id":13,"beg":{"line":599,"col":55},"end":{"line":599,"col":56}},"generated_from_span":null},"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"name":null,"ty":{"TypeVar":{"Free":0}}}],"discriminant":{"Isize":"1"}}]},"layout":null,"ptr_metadata":"None"},{"def_id":6,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["range",0]},{"Ident":["Range",0]}],"span":{"span":{"file_id":22,"beg":{"line":80,"col":0},"end":{"line":80,"col":21}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" A (half-open) range bounded inclusively below and exclusively above"},{"DocComment":" (`start..end`)."},{"DocComment":""},{"DocComment":" The range `start..end` contains all values with `start <= x < end`."},{"DocComment":" It is empty if `start >= end`."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" The `start..end` syntax is a `Range`:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" assert_eq!((3..5), std::ops::Range { start: 3, end: 5 });"},{"DocComment":" assert_eq!(3 + 4 + 5, (3..6).sum());"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let arr = [0, 1, 2, 3, 4];"},{"DocComment":" assert_eq!(arr[ ..  ], [0, 1, 2, 3, 4]);"},{"DocComment":" assert_eq!(arr[ .. 3], [0, 1, 2      ]);"},{"DocComment":" assert_eq!(arr[ ..=3], [0, 1, 2, 3   ]);"},{"DocComment":" assert_eq!(arr[1..  ], [   1, 2, 3, 4]);"},{"DocComment":" assert_eq!(arr[1.. 3], [   1, 2      ]); // This is a `Range`"},{"DocComment":" assert_eq!(arr[1..=3], [   1, 2, 3   ]);"},{"DocComment":" ```"},{"Unknown":{"path":"doc","args":"alias = \"..\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"Range"},"generics":{"regions":[],"types":[{"index":0,"name":"Idx"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"kind":{"Struct":[{"span":{"span":{"file_id":22,"beg":{"line":83,"col":4},"end":{"line":83,"col":18}},"generated_from_span":null},"attr_info":{"attributes":[{"DocComment":" The lower bound of the range (inclusive)."}],"inline":null,"rename":null,"public":true},"name":"start","ty":{"TypeVar":{"Free":0}}},{"span":{"span":{"file_id":22,"beg":{"line":86,"col":4},"end":{"line":86,"col":16}},"generated_from_span":null},"attr_info":{"attributes":[{"DocComment":" The upper bound of the range (exclusive)."}],"inline":null,"rename":null,"public":true},"name":"end","ty":{"TypeVar":{"Free":0}}}]},"layout":null,"ptr_metadata":null},{"def_id":7,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Arguments",0]}],"span":{"span":{"file_id":27,"beg":{"line":613,"col":0},"end":{"line":613,"col":24}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" This structure represents a safely precompiled version of a format string"},{"DocComment":" and its arguments. This cannot be generated at runtime because it cannot"},{"DocComment":" safely be done, so no constructors are given and the fields are private"},{"DocComment":" to prevent modification."},{"DocComment":""},{"DocComment":" The [`format_args!`] macro will safely create an instance of this structure."},{"DocComment":" The macro validates the format string at compile-time so usage of the"},{"DocComment":" [`write()`] and [`format()`] functions can be safely performed."},{"DocComment":""},{"DocComment":" You can use the `Arguments<'a>` that [`format_args!`] returns in `Debug`"},{"DocComment":" and `Display` contexts as seen below. The example also shows that `Debug`"},{"DocComment":" and `Display` format to the same thing: the interpolated format string"},{"DocComment":" in `format_args!`."},{"DocComment":""},{"DocComment":" ```rust"},{"DocComment":" let debug = format!(\"{:?}\", format_args!(\"{} foo {:?}\", 1, 2));"},{"DocComment":" let display = format!(\"{}\", format_args!(\"{} foo {:?}\", 1, 2));"},{"DocComment":" assert_eq!(\"1 foo 2\", display);"},{"DocComment":" assert_eq!(display, debug);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" [`format()`]: ../../std/fmt/fn.format.html"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"format_arguments"},"generics":{"regions":[{"index":0,"name":"'a"}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[{"regions":[],"skip_binder":[{"Var":{"Free":0}},{"Var":{"Free":0}}]}],"types_outlive":[],"trait_type_constraints":[]},"kind":"Opaque","layout":{"size":48,"align":8,"discriminant_layout":null,"uninhabited":false,"variant_layouts":[{"field_offsets":[0,32,16],"uninhabited":false,"tag":null}]},"ptr_metadata":"None"},{"def_id":8,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["Ordering",0]}],"span":{"span":{"file_id":23,"beg":{"line":388,"col":0},"end":{"line":388,"col":17}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" An `Ordering` is the result of a comparison between two values."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" use std::cmp::Ordering;"},{"DocComment":""},{"DocComment":" assert_eq!(1.cmp(&2), Ordering::Less);"},{"DocComment":""},{"DocComment":" assert_eq!(1.cmp(&1), Ordering::Equal);"},{"DocComment":""},{"DocComment":" assert_eq!(2.cmp(&1), Ordering::Greater);"},{"DocComment":" ```"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"Ordering"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"kind":{"Enum":[{"span":{"span":{"file_id":23,"beg":{"line":391,"col":4},"end":{"line":391,"col":8}},"generated_from_span":null},"attr_info":{"attributes":[{"DocComment":" An ordering where a compared value is less than another."}],"inline":null,"rename":null,"public":true},"name":"Less","fields":[],"discriminant":{"I8":"-1"}},{"span":{"span":{"file_id":23,"beg":{"line":394,"col":4},"end":{"line":394,"col":9}},"generated_from_span":null},"attr_info":{"attributes":[{"DocComment":" An ordering where a compared value is equal to another."}],"inline":null,"rename":null,"public":true},"name":"Equal","fields":[],"discriminant":{"I8":"0"}},{"span":{"span":{"file_id":23,"beg":{"line":397,"col":4},"end":{"line":397,"col":11}},"generated_from_span":null},"attr_info":{"attributes":[{"DocComment":" An ordering where a compared value is greater than another."}],"inline":null,"rename":null,"public":true},"name":"Greater","fields":[],"discriminant":{"I8":"1"}}]},"layout":{"size":1,"align":1,"discriminant_layout":{"offset":0,"tag_ty":"I8","encoding":"Direct"},"uninhabited":false,"variant_layouts":[{"field_offsets":[],"uninhabited":false,"tag":{"I8":"-1"}},{"field_offsets":[],"uninhabited":false,"tag":{"I8":"0"}},{"field_offsets":[],"uninhabited":false,"tag":{"I8":"1"}}]},"ptr_metadata":"None"},{"def_id":9,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["control_flow",0]},{"Ident":["ControlFlow",0]}],"span":{"span":{"file_id":36,"beg":{"line":87,"col":0},"end":{"line":87,"col":31}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Used to tell an operation whether it should exit early or go on as usual."},{"DocComment":""},{"DocComment":" This is used when exposing things (like graph traversals or visitors) where"},{"DocComment":" you want the user to be able to choose whether to exit early."},{"DocComment":" Having the enum makes it clearer -- no more wondering \"wait, what did `false`"},{"DocComment":" mean again?\" -- and allows including a value."},{"DocComment":""},{"DocComment":" Similar to [`Option`] and [`Result`], this enum can be used with the `?` operator"},{"DocComment":" to return immediately if the [`Break`] variant is present or otherwise continue normally"},{"DocComment":" with the value inside the [`Continue`] variant."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" Early-exiting from [`Iterator::try_for_each`]:"},{"DocComment":" ```"},{"DocComment":" use std::ops::ControlFlow;"},{"DocComment":""},{"DocComment":" let r = (2..100).try_for_each(|x| {"},{"DocComment":"     if 403 % x == 0 {"},{"DocComment":"         return ControlFlow::Break(x)"},{"DocComment":"     }"},{"DocComment":""},{"DocComment":"     ControlFlow::Continue(())"},{"DocComment":" });"},{"DocComment":" assert_eq!(r, ControlFlow::Break(13));"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" A basic tree traversal:"},{"DocComment":" ```"},{"DocComment":" use std::ops::ControlFlow;"},{"DocComment":""},{"DocComment":" pub struct TreeNode<T> {"},{"DocComment":"     value: T,"},{"DocComment":"     left: Option<Box<TreeNode<T>>>,"},{"DocComment":"     right: Option<Box<TreeNode<T>>>,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl<T> TreeNode<T> {"},{"DocComment":"     pub fn traverse_inorder<B>(&self, f: &mut impl FnMut(&T) -> ControlFlow<B>) -> ControlFlow<B> {"},{"DocComment":"         if let Some(left) = &self.left {"},{"DocComment":"             left.traverse_inorder(f)?;"},{"DocComment":"         }"},{"DocComment":"         f(&self.value)?;"},{"DocComment":"         if let Some(right) = &self.right {"},{"DocComment":"             right.traverse_inorder(f)?;"},{"DocComment":"         }"},{"DocComment":"         ControlFlow::Continue(())"},{"DocComment":"     }"},{"DocComment":"     fn leaf(value: T) -> Option<Box<TreeNode<T>>> {"},{"DocComment":"         Some(Box::new(Self { value, left: None, right: None }))"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" let node = TreeNode {"},{"DocComment":"     value: 0,"},{"DocComment":"     left: TreeNode::leaf(1),"},{"DocComment":"     right: Some(Box::new(TreeNode {"},{"DocComment":"         value: -1,"},{"DocComment":"         left: TreeNode::leaf(5),"},{"DocComment":"         right: TreeNode::leaf(2),"},{"DocComment":"     }))"},{"DocComment":" };"},{"DocComment":" let mut sum = 0;"},{"DocComment":""},{"DocComment":" let res = node.traverse_inorder(&mut |val| {"},{"DocComment":"     if *val < 0 {"},{"DocComment":"         ControlFlow::Break(*val)"},{"DocComment":"     } else {"},{"DocComment":"         sum += *val;"},{"DocComment":"         ControlFlow::Continue(())"},{"DocComment":"     }"},{"DocComment":" });"},{"DocComment":" assert_eq!(res, ControlFlow::Break(-1));"},{"DocComment":" assert_eq!(sum, 6);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" [`Break`]: ControlFlow::Break"},{"DocComment":" [`Continue`]: ControlFlow::Continue"},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"ControlFlow\""}},{"Unknown":{"path":"must_use","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"ControlFlow"},"generics":{"regions":[],"types":[{"index":0,"name":"B"},{"index":1,"name":"C"}],"const_generics":[],"trait_clauses":[null,null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"kind":{"Enum":[{"span":{"span":{"file_id":36,"beg":{"line":91,"col":4},"end":{"line":91,"col":12}},"generated_from_span":null},"attr_info":{"attributes":[{"DocComment":" Move on to the next phase of the operation as normal."}],"inline":null,"rename":null,"public":true},"name":"Continue","fields":[{"span":{"span":{"file_id":36,"beg":{"line":91,"col":13},"end":{"line":91,"col":14}},"generated_from_span":null},"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"name":null,"ty":{"TypeVar":{"Free":1}}}],"discriminant":{"Isize":"0"}},{"span":{"span":{"file_id":36,"beg":{"line":95,"col":4},"end":{"line":95,"col":9}},"generated_from_span":null},"attr_info":{"attributes":[{"DocComment":" Exit the operation without running subsequent phases."}],"inline":null,"rename":null,"public":true},"name":"Break","fields":[{"span":{"span":{"file_id":36,"beg":{"line":95,"col":10},"end":{"line":95,"col":11}},"generated_from_span":null},"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"name":null,"ty":{"TypeVar":{"Free":0}}}],"discriminant":{"Isize":"1"}}]},"layout":null,"ptr_metadata":"None"}],"fun_decls":[{"def_id":0,"item_meta":{"name":[{"Ident":["bn_rust",0]},{"Ident":["addition",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["from_u64",0]}],"span":{"span":{"file_id":1,"beg":{"line":6,"col":4},"end":{"line":19,"col":5}},"generated_from_span":null},"source_text":"pub fn from_u64(mut value: u64) -> Self {\n        let mut bits = Vec::new();\n        \n        if value == 0 {\n            bits.push(false);\n        } else {\n            while value > 0 {\n                bits.push(value & 1 == 1);\n                value >>= 1;\n            }\n        }\n        \n        BigNum { bits }\n    }","attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"is_local":true,"opacity":"Transparent","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Literal":{"Integer":"U64"}}],"output":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Ok":{"Structured":{"span":{"span":{"file_id":1,"beg":{"line":6,"col":4},"end":{"line":19,"col":5}},"generated_from_span":null},"locals":{"arg_count":1,"locals":[{"index":0,"name":null,"ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":1,"name":"value","ty":{"Literal":{"Integer":"U64"}}},{"index":2,"name":"bits","ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},{"index":3,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":4,"name":null,"ty":{"Literal":"Bool"}},{"index":5,"name":null,"ty":{"Literal":{"Integer":"U64"}}},{"index":6,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":7,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Mut"]}},{"index":8,"name":null,"ty":{"Literal":"Bool"}},{"index":9,"name":null,"ty":{"Literal":{"Integer":"U64"}}},{"index":10,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":11,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Mut"]}},{"index":12,"name":null,"ty":{"Literal":"Bool"}},{"index":13,"name":null,"ty":{"Literal":{"Integer":"U64"}}},{"index":14,"name":null,"ty":{"Literal":{"Integer":"U64"}}},{"index":15,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":16,"name":null,"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}}]},"comments":[],"body":{"span":{"span":{"file_id":1,"beg":{"line":7,"col":12},"end":{"line":19,"col":5}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":7,"col":12},"end":{"line":7,"col":20}},"generated_from_span":null},"content":{"StorageLive":6},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":7,"col":12},"end":{"line":7,"col":20}},"generated_from_span":null},"content":{"StorageLive":7},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":7,"col":12},"end":{"line":7,"col":20}},"generated_from_span":null},"content":{"StorageLive":8},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":7,"col":12},"end":{"line":7,"col":20}},"generated_from_span":null},"content":{"StorageLive":9},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":7,"col":12},"end":{"line":7,"col":20}},"generated_from_span":null},"content":{"StorageLive":10},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":7,"col":12},"end":{"line":7,"col":20}},"generated_from_span":null},"content":{"StorageLive":11},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":7,"col":12},"end":{"line":7,"col":20}},"generated_from_span":null},"content":{"StorageLive":12},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":7,"col":12},"end":{"line":7,"col":20}},"generated_from_span":null},"content":{"StorageLive":13},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":7,"col":12},"end":{"line":7,"col":20}},"generated_from_span":null},"content":{"StorageLive":14},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":7,"col":12},"end":{"line":7,"col":20}},"generated_from_span":null},"content":{"StorageLive":15},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":7,"col":12},"end":{"line":7,"col":20}},"generated_from_span":null},"content":{"StorageLive":2},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":7,"col":23},"end":{"line":7,"col":33}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":5}},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}},"args":[],"dest":{"kind":{"Local":2},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":9,"col":8},"end":{"line":16,"col":9}},"generated_from_span":null},"content":{"StorageLive":3},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":9,"col":11},"end":{"line":9,"col":21}},"generated_from_span":null},"content":{"StorageLive":4},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":9,"col":11},"end":{"line":9,"col":16}},"generated_from_span":null},"content":{"StorageLive":5},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":9,"col":11},"end":{"line":9,"col":16}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":5},"ty":{"Literal":{"Integer":"U64"}}},{"Use":{"Copy":{"kind":{"Local":1},"ty":{"Literal":{"Integer":"U64"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":9,"col":11},"end":{"line":9,"col":21}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":4},"ty":{"Literal":"Bool"}},{"BinaryOp":["Eq",{"Move":{"kind":{"Local":5},"ty":{"Literal":{"Integer":"U64"}}}},{"Const":{"value":{"Literal":{"Scalar":{"U64":"0"}}},"ty":{"Literal":{"Integer":"U64"}}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":9,"col":8},"end":{"line":16,"col":9}},"generated_from_span":null},"content":{"Switch":{"If":[{"Move":{"kind":{"Local":4},"ty":{"Literal":"Bool"}}},{"span":{"span":{"file_id":1,"beg":{"line":9,"col":8},"end":{"line":16,"col":9}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":9,"col":20},"end":{"line":9,"col":21}},"generated_from_span":null},"content":{"StorageDead":5},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":10,"col":12},"end":{"line":10,"col":28}},"generated_from_span":null},"content":{"StorageLive":6},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":10,"col":12},"end":{"line":10,"col":16}},"generated_from_span":null},"content":{"StorageLive":7},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":10,"col":12},"end":{"line":10,"col":16}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":7},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Mut"]}},{"Ref":[{"kind":{"Local":2},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},"TwoPhaseMut"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":10,"col":12},"end":{"line":10,"col":28}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":6}},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"args":[{"Move":{"kind":{"Local":7},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Mut"]}}},{"Const":{"value":{"Literal":{"Bool":false}},"ty":{"Literal":"Bool"}}}],"dest":{"kind":{"Local":6},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":10,"col":27},"end":{"line":10,"col":28}},"generated_from_span":null},"content":{"StorageDead":7},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":10,"col":28},"end":{"line":10,"col":29}},"generated_from_span":null},"content":{"StorageDead":6},"comments_before":[]}]},{"span":{"span":{"file_id":1,"beg":{"line":9,"col":8},"end":{"line":16,"col":9}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":9,"col":20},"end":{"line":9,"col":21}},"generated_from_span":null},"content":{"StorageDead":5},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":12,"col":12},"end":{"line":15,"col":13}},"generated_from_span":null},"content":{"Loop":{"span":{"span":{"file_id":1,"beg":{"line":12,"col":12},"end":{"line":15,"col":13}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":12,"col":18},"end":{"line":12,"col":27}},"generated_from_span":null},"content":{"StorageLive":8},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":12,"col":18},"end":{"line":12,"col":23}},"generated_from_span":null},"content":{"StorageLive":9},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":12,"col":18},"end":{"line":12,"col":23}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":9},"ty":{"Literal":{"Integer":"U64"}}},{"Use":{"Copy":{"kind":{"Local":1},"ty":{"Literal":{"Integer":"U64"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":12,"col":18},"end":{"line":12,"col":27}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":8},"ty":{"Literal":"Bool"}},{"BinaryOp":["Gt",{"Move":{"kind":{"Local":9},"ty":{"Literal":{"Integer":"U64"}}}},{"Const":{"value":{"Literal":{"Scalar":{"U64":"0"}}},"ty":{"Literal":{"Integer":"U64"}}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":12,"col":12},"end":{"line":15,"col":13}},"generated_from_span":null},"content":{"Switch":{"If":[{"Move":{"kind":{"Local":8},"ty":{"Literal":"Bool"}}},{"span":{"span":{"file_id":1,"beg":{"line":12,"col":12},"end":{"line":15,"col":13}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":12,"col":26},"end":{"line":12,"col":27}},"generated_from_span":null},"content":{"StorageDead":9},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":13,"col":16},"end":{"line":13,"col":41}},"generated_from_span":null},"content":{"StorageLive":10},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":13,"col":16},"end":{"line":13,"col":20}},"generated_from_span":null},"content":{"StorageLive":11},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":13,"col":16},"end":{"line":13,"col":20}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":11},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Mut"]}},{"Ref":[{"kind":{"Local":2},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},"TwoPhaseMut"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":13,"col":26},"end":{"line":13,"col":40}},"generated_from_span":null},"content":{"StorageLive":12},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":13,"col":26},"end":{"line":13,"col":35}},"generated_from_span":null},"content":{"StorageLive":13},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":13,"col":26},"end":{"line":13,"col":31}},"generated_from_span":null},"content":{"StorageLive":14},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":13,"col":26},"end":{"line":13,"col":31}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":14},"ty":{"Literal":{"Integer":"U64"}}},{"Use":{"Copy":{"kind":{"Local":1},"ty":{"Literal":{"Integer":"U64"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":13,"col":26},"end":{"line":13,"col":35}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":13},"ty":{"Literal":{"Integer":"U64"}}},{"BinaryOp":["BitAnd",{"Move":{"kind":{"Local":14},"ty":{"Literal":{"Integer":"U64"}}}},{"Const":{"value":{"Literal":{"Scalar":{"U64":"1"}}},"ty":{"Literal":{"Integer":"U64"}}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":13,"col":34},"end":{"line":13,"col":35}},"generated_from_span":null},"content":{"StorageDead":14},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":13,"col":26},"end":{"line":13,"col":40}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":12},"ty":{"Literal":"Bool"}},{"BinaryOp":["Eq",{"Move":{"kind":{"Local":13},"ty":{"Literal":{"Integer":"U64"}}}},{"Const":{"value":{"Literal":{"Scalar":{"U64":"1"}}},"ty":{"Literal":{"Integer":"U64"}}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":13,"col":39},"end":{"line":13,"col":40}},"generated_from_span":null},"content":{"StorageDead":13},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":13,"col":16},"end":{"line":13,"col":41}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":6}},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"args":[{"Move":{"kind":{"Local":11},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Mut"]}}},{"Move":{"kind":{"Local":12},"ty":{"Literal":"Bool"}}}],"dest":{"kind":{"Local":10},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":13,"col":40},"end":{"line":13,"col":41}},"generated_from_span":null},"content":{"StorageDead":12},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":13,"col":40},"end":{"line":13,"col":41}},"generated_from_span":null},"content":{"StorageDead":11},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":13,"col":41},"end":{"line":13,"col":42}},"generated_from_span":null},"content":{"StorageDead":10},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":14,"col":16},"end":{"line":14,"col":27}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":1},"ty":{"Literal":{"Integer":"U64"}}},{"BinaryOp":["Shr",{"Copy":{"kind":{"Local":1},"ty":{"Literal":{"Integer":"U64"}}}},{"Const":{"value":{"Literal":{"Scalar":{"I32":"1"}}},"ty":{"Literal":{"Integer":"I32"}}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":15,"col":12},"end":{"line":15,"col":13}},"generated_from_span":null},"content":{"StorageDead":8},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":12,"col":12},"end":{"line":15,"col":13}},"generated_from_span":null},"content":{"Continue":0},"comments_before":[]}]},{"span":{"span":{"file_id":1,"beg":{"line":12,"col":18},"end":{"line":12,"col":27}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":12,"col":18},"end":{"line":12,"col":27}},"generated_from_span":null},"content":{"Break":0},"comments_before":[]}]}]}},"comments_before":[]}]}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":12,"col":26},"end":{"line":12,"col":27}},"generated_from_span":null},"content":{"StorageDead":9},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":12,"col":12},"end":{"line":15,"col":13}},"generated_from_span":null},"content":{"StorageLive":15},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":15,"col":12},"end":{"line":15,"col":13}},"generated_from_span":null},"content":{"StorageDead":15},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":15,"col":12},"end":{"line":15,"col":13}},"generated_from_span":null},"content":{"StorageDead":8},"comments_before":[]}]}]}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":16,"col":8},"end":{"line":16,"col":9}},"generated_from_span":null},"content":{"StorageDead":4},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":16,"col":8},"end":{"line":16,"col":9}},"generated_from_span":null},"content":{"StorageDead":3},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":18,"col":17},"end":{"line":18,"col":21}},"generated_from_span":null},"content":{"StorageLive":16},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":18,"col":17},"end":{"line":18,"col":21}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":16},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},{"Use":{"Move":{"kind":{"Local":2},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":18,"col":8},"end":{"line":18,"col":23}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":0},"ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Aggregate":[{"Adt":[{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},null,null]},[{"Move":{"kind":{"Local":16},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}}}]]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":18,"col":22},"end":{"line":18,"col":23}},"generated_from_span":null},"content":{"Drop":{"kind":{"Local":16},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":18,"col":22},"end":{"line":18,"col":23}},"generated_from_span":null},"content":{"StorageDead":16},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":19,"col":4},"end":{"line":19,"col":5}},"generated_from_span":null},"content":{"Drop":{"kind":{"Local":2},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":19,"col":4},"end":{"line":19,"col":5}},"generated_from_span":null},"content":{"StorageDead":2},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":19,"col":5},"end":{"line":19,"col":5}},"generated_from_span":null},"content":"Return","comments_before":[]}]}}}}},{"def_id":1,"item_meta":{"name":[{"Ident":["bn_rust",0]},{"Ident":["addition",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["to_u64",0]}],"span":{"span":{"file_id":1,"beg":{"line":21,"col":4},"end":{"line":29,"col":5}},"generated_from_span":null},"source_text":"pub fn to_u64(&self) -> u64 {\n        let mut result = 0u64;\n        for (i, &bit) in self.bits.iter().enumerate() {\n            if bit && i < 64 {\n                result |= 1u64 << i;\n            }\n        }\n        result\n    }","attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"is_local":true,"opacity":"Transparent","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"output":{"Literal":{"Integer":"U64"}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Ok":{"Structured":{"span":{"span":{"file_id":1,"beg":{"line":21,"col":4},"end":{"line":29,"col":5}},"generated_from_span":null},"locals":{"arg_count":1,"locals":[{"index":0,"name":null,"ty":{"Literal":{"Integer":"U64"}}},{"index":1,"name":"self","ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"index":2,"name":"result","ty":{"Literal":{"Integer":"U64"}}},{"index":3,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":4,"name":null,"ty":{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}}},{"index":5,"name":null,"ty":{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}}},{"index":6,"name":null,"ty":{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}},{"index":7,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"index":8,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"index":9,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}},{"index":10,"name":"iter","ty":{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}}},{"index":11,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":12,"name":null,"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null]}}}},{"index":13,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}},"Mut"]}},{"index":14,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}},"Mut"]}},{"index":15,"name":"i","ty":{"Literal":{"Integer":"Usize"}}},{"index":16,"name":"bit","ty":{"Literal":"Bool"}},{"index":17,"name":null,"ty":{"Literal":"Bool"}},{"index":18,"name":null,"ty":{"Literal":"Bool"}},{"index":19,"name":null,"ty":{"Literal":{"Integer":"Usize"}}},{"index":20,"name":null,"ty":{"Literal":{"Integer":"U64"}}},{"index":21,"name":null,"ty":{"Literal":{"Integer":"Usize"}}}]},"comments":[],"body":{"span":{"span":{"file_id":1,"beg":{"line":22,"col":12},"end":{"line":29,"col":5}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":22,"col":12},"end":{"line":22,"col":22}},"generated_from_span":null},"content":{"StorageLive":13},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":22,"col":12},"end":{"line":22,"col":22}},"generated_from_span":null},"content":{"StorageLive":15},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":22,"col":12},"end":{"line":22,"col":22}},"generated_from_span":null},"content":{"StorageLive":16},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":22,"col":12},"end":{"line":22,"col":22}},"generated_from_span":null},"content":{"StorageLive":17},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":22,"col":12},"end":{"line":22,"col":22}},"generated_from_span":null},"content":{"StorageLive":18},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":22,"col":12},"end":{"line":22,"col":22}},"generated_from_span":null},"content":{"StorageLive":19},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":22,"col":12},"end":{"line":22,"col":22}},"generated_from_span":null},"content":{"StorageLive":20},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":22,"col":12},"end":{"line":22,"col":22}},"generated_from_span":null},"content":{"StorageLive":21},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":22,"col":12},"end":{"line":22,"col":22}},"generated_from_span":null},"content":{"StorageLive":2},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":22,"col":25},"end":{"line":22,"col":29}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":2},"ty":{"Literal":{"Integer":"U64"}}},{"Use":{"Const":{"value":{"Literal":{"Scalar":{"U64":"0"}}},"ty":{"Literal":{"Integer":"U64"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":8},"end":{"line":27,"col":9}},"generated_from_span":null},"content":{"StorageLive":3},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":53}},"generated_from_span":null},"content":{"StorageLive":4},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":53}},"generated_from_span":null},"content":{"StorageLive":5},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":41}},"generated_from_span":null},"content":{"StorageLive":6},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":34}},"generated_from_span":null},"content":{"StorageLive":7},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":41}},"generated_from_span":null},"content":{"StorageLive":8},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":34}},"generated_from_span":null},"content":{"StorageLive":9},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":34}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":9},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Projection":[{"kind":{"Local":1},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}},"Deref"]},"ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Field":[{"Adt":[0,null]},0]}]},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":41}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":221}},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"args":[{"Move":{"kind":{"Local":9},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}}}],"dest":{"kind":{"Local":8},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":34}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":7},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Local":8},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}},"Deref"]},"ty":{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":33},"end":{"line":23,"col":34}},"generated_from_span":null},"content":{"StorageDead":9},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":41}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":8}},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}},"args":[{"Move":{"kind":{"Local":7},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}}}],"dest":{"kind":{"Local":6},"ty":{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":40},"end":{"line":23,"col":41}},"generated_from_span":null},"content":{"StorageDead":7},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":53}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":222}},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null,null]}}},"args":[{"Move":{"kind":{"Local":6},"ty":{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}}}],"dest":{"kind":{"Local":5},"ty":{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":52},"end":{"line":23,"col":53}},"generated_from_span":null},"content":{"StorageDead":6},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":53}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":72}},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,{"kind":{"TraitImpl":{"id":4,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}},{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[null,{"kind":{"TraitImpl":{"id":2,"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}},{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[]}}}}]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}]}}},"args":[{"Move":{"kind":{"Local":5},"ty":{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}}}}],"dest":{"kind":{"Local":4},"ty":{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":52},"end":{"line":23,"col":53}},"generated_from_span":null},"content":{"StorageDead":5},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":53}},"generated_from_span":null},"content":{"StorageLive":10},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":53}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":10},"ty":{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}}},{"Use":{"Move":{"kind":{"Local":4},"ty":{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":8},"end":{"line":27,"col":9}},"generated_from_span":null},"content":{"Loop":{"span":{"span":{"file_id":1,"beg":{"line":23,"col":8},"end":{"line":27,"col":9}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":53}},"generated_from_span":null},"content":{"StorageLive":11},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":53}},"generated_from_span":null},"content":{"StorageLive":12},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":53}},"generated_from_span":null},"content":{"StorageLive":13},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":53}},"generated_from_span":null},"content":{"StorageLive":14},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":53}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":14},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}},"Mut"]}},{"Ref":[{"kind":{"Local":10},"ty":{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}}},"Mut"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":53}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":13},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}},"Mut"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Local":14},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}},"Mut"]}},"Deref"]},"ty":{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}}},"TwoPhaseMut"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":53}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":41}},"generics":{"regions":["Erased"],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}},{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[null,{"kind":{"TraitImpl":{"id":2,"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}},{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[]}}}}]}}},"args":[{"Move":{"kind":{"Local":13},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}},"Mut"]}}}],"dest":{"kind":{"Local":12},"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":52},"end":{"line":23,"col":53}},"generated_from_span":null},"content":{"StorageDead":13},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":8},"end":{"line":27,"col":9}},"generated_from_span":null},"content":{"Switch":{"Match":[{"kind":{"Local":12},"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null]}}}},[[[0],{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":53}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":23,"col":25},"end":{"line":23,"col":53}},"generated_from_span":null},"content":{"Break":0},"comments_before":[]}]}],[[1],{"span":{"span":{"file_id":1,"beg":{"line":23,"col":8},"end":{"line":27,"col":9}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":23,"col":13},"end":{"line":23,"col":14}},"generated_from_span":null},"content":{"StorageLive":15},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":13},"end":{"line":23,"col":14}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":15},"ty":{"Literal":{"Integer":"Usize"}}},{"Use":{"Copy":{"kind":{"Projection":[{"kind":{"Projection":[{"kind":{"Local":12},"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null]}}}},{"Field":[{"Adt":[5,1]},0]}]},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[]}}}},{"Field":[{"Tuple":2},0]}]},"ty":{"Literal":{"Integer":"Usize"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":17},"end":{"line":23,"col":20}},"generated_from_span":null},"content":{"StorageLive":16},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":17},"end":{"line":23,"col":20}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":16},"ty":{"Literal":"Bool"}},{"Use":{"Copy":{"kind":{"Projection":[{"kind":{"Projection":[{"kind":{"Projection":[{"kind":{"Local":12},"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null]}}}},{"Field":[{"Adt":[5,1]},0]}]},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[]}}}},{"Field":[{"Tuple":2},1]}]},"ty":{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}},"Deref"]},"ty":{"Literal":"Bool"}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":24,"col":15},"end":{"line":24,"col":18}},"generated_from_span":null},"content":{"StorageLive":17},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":24,"col":15},"end":{"line":24,"col":18}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":17},"ty":{"Literal":"Bool"}},{"Use":{"Copy":{"kind":{"Local":16},"ty":{"Literal":"Bool"}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":24,"col":12},"end":{"line":26,"col":13}},"generated_from_span":null},"content":{"Switch":{"If":[{"Move":{"kind":{"Local":17},"ty":{"Literal":"Bool"}}},{"span":{"span":{"file_id":1,"beg":{"line":24,"col":12},"end":{"line":26,"col":13}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":24,"col":22},"end":{"line":24,"col":28}},"generated_from_span":null},"content":{"StorageLive":18},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":24,"col":22},"end":{"line":24,"col":23}},"generated_from_span":null},"content":{"StorageLive":19},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":24,"col":22},"end":{"line":24,"col":23}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":19},"ty":{"Literal":{"Integer":"Usize"}}},{"Use":{"Copy":{"kind":{"Local":15},"ty":{"Literal":{"Integer":"Usize"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":24,"col":22},"end":{"line":24,"col":28}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":18},"ty":{"Literal":"Bool"}},{"BinaryOp":["Lt",{"Move":{"kind":{"Local":19},"ty":{"Literal":{"Integer":"Usize"}}}},{"Const":{"value":{"Literal":{"Scalar":{"Usize":"64"}}},"ty":{"Literal":{"Integer":"Usize"}}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":24,"col":12},"end":{"line":26,"col":13}},"generated_from_span":null},"content":{"Switch":{"If":[{"Move":{"kind":{"Local":18},"ty":{"Literal":"Bool"}}},{"span":{"span":{"file_id":1,"beg":{"line":24,"col":12},"end":{"line":26,"col":13}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":24,"col":27},"end":{"line":24,"col":28}},"generated_from_span":null},"content":{"StorageDead":19},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":25,"col":26},"end":{"line":25,"col":35}},"generated_from_span":null},"content":{"StorageLive":20},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":25,"col":34},"end":{"line":25,"col":35}},"generated_from_span":null},"content":{"StorageLive":21},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":25,"col":34},"end":{"line":25,"col":35}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":21},"ty":{"Literal":{"Integer":"Usize"}}},{"Use":{"Copy":{"kind":{"Local":15},"ty":{"Literal":{"Integer":"Usize"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":25,"col":26},"end":{"line":25,"col":35}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":20},"ty":{"Literal":{"Integer":"U64"}}},{"BinaryOp":["Shl",{"Const":{"value":{"Literal":{"Scalar":{"U64":"1"}}},"ty":{"Literal":{"Integer":"U64"}}}},{"Move":{"kind":{"Local":21},"ty":{"Literal":{"Integer":"Usize"}}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":25,"col":34},"end":{"line":25,"col":35}},"generated_from_span":null},"content":{"StorageDead":21},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":25,"col":16},"end":{"line":25,"col":35}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":2},"ty":{"Literal":{"Integer":"U64"}}},{"BinaryOp":["BitOr",{"Copy":{"kind":{"Local":2},"ty":{"Literal":{"Integer":"U64"}}}},{"Move":{"kind":{"Local":20},"ty":{"Literal":{"Integer":"U64"}}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":25,"col":34},"end":{"line":25,"col":35}},"generated_from_span":null},"content":{"StorageDead":20},"comments_before":[]}]},{"span":{"span":{"file_id":1,"beg":{"line":24,"col":12},"end":{"line":26,"col":13}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":24,"col":27},"end":{"line":24,"col":28}},"generated_from_span":null},"content":{"StorageDead":19},"comments_before":[]}]}]}},"comments_before":[]}]},{"span":{"span":{"file_id":1,"beg":{"line":24,"col":12},"end":{"line":26,"col":13}},"generated_from_span":null},"statements":[]}]}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":26,"col":12},"end":{"line":26,"col":13}},"generated_from_span":null},"content":{"StorageDead":18},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":26,"col":12},"end":{"line":26,"col":13}},"generated_from_span":null},"content":{"StorageDead":17},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":27,"col":8},"end":{"line":27,"col":9}},"generated_from_span":null},"content":{"StorageDead":16},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":27,"col":8},"end":{"line":27,"col":9}},"generated_from_span":null},"content":{"StorageDead":15},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":27,"col":8},"end":{"line":27,"col":9}},"generated_from_span":null},"content":{"StorageDead":14},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":27,"col":8},"end":{"line":27,"col":9}},"generated_from_span":null},"content":{"StorageDead":12},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":27,"col":8},"end":{"line":27,"col":9}},"generated_from_span":null},"content":{"StorageDead":11},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":23,"col":8},"end":{"line":27,"col":9}},"generated_from_span":null},"content":{"Continue":0},"comments_before":[]}]}]],null]}},"comments_before":[]}]}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":27,"col":8},"end":{"line":27,"col":9}},"generated_from_span":null},"content":{"StorageDead":14},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":27,"col":8},"end":{"line":27,"col":9}},"generated_from_span":null},"content":{"StorageDead":12},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":27,"col":8},"end":{"line":27,"col":9}},"generated_from_span":null},"content":{"StorageDead":11},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":27,"col":8},"end":{"line":27,"col":9}},"generated_from_span":null},"content":{"StorageDead":10},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":27,"col":8},"end":{"line":27,"col":9}},"generated_from_span":null},"content":{"StorageDead":8},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":27,"col":8},"end":{"line":27,"col":9}},"generated_from_span":null},"content":{"StorageDead":4},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":27,"col":8},"end":{"line":27,"col":9}},"generated_from_span":null},"content":{"StorageDead":3},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":28,"col":8},"end":{"line":28,"col":14}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":0},"ty":{"Literal":{"Integer":"U64"}}},{"Use":{"Copy":{"kind":{"Local":2},"ty":{"Literal":{"Integer":"U64"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":29,"col":4},"end":{"line":29,"col":5}},"generated_from_span":null},"content":{"StorageDead":2},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":29,"col":5},"end":{"line":29,"col":5}},"generated_from_span":null},"content":"Return","comments_before":[]}]}}}}},{"def_id":2,"item_meta":{"name":[{"Ident":["bn_rust",0]},{"Ident":["addition",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["normalize",0]}],"span":{"span":{"file_id":1,"beg":{"line":31,"col":4},"end":{"line":36,"col":5}},"generated_from_span":null},"source_text":"fn normalize(&mut self) {\n        // Remove trailing false bits, but keep at least one bit\n        while self.bits.len() > 1 && !self.bits.last().unwrap() {\n            self.bits.pop();\n        }\n    }","attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":true,"opacity":"Transparent","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Mut"]}],"output":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Ok":{"Structured":{"span":{"span":{"file_id":1,"beg":{"line":31,"col":4},"end":{"line":36,"col":5}},"generated_from_span":null},"locals":{"arg_count":1,"locals":[{"index":0,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":1,"name":"self","ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Mut"]}},{"index":2,"name":null,"ty":{"Literal":"Bool"}},{"index":3,"name":null,"ty":{"Literal":{"Integer":"Usize"}}},{"index":4,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}},{"index":5,"name":null,"ty":{"Literal":"Bool"}},{"index":6,"name":null,"ty":{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}},{"index":7,"name":null,"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[null]}}}},{"index":8,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"index":9,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"index":10,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}},{"index":11,"name":null,"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}},{"index":12,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Mut"]}},{"index":13,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}}]},"comments":[[33,["Remove trailing false bits, but keep at least one bit"]]],"body":{"span":{"span":{"file_id":1,"beg":{"line":33,"col":8},"end":{"line":36,"col":5}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":33,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"content":{"StorageLive":3},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"content":{"StorageLive":4},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"content":{"StorageLive":6},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"content":{"StorageLive":7},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"content":{"StorageLive":8},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"content":{"StorageLive":9},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"content":{"StorageLive":10},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"content":{"StorageLive":11},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"content":{"StorageLive":12},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"content":{"Loop":{"span":{"span":{"file_id":1,"beg":{"line":33,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":33,"col":14},"end":{"line":33,"col":33}},"generated_from_span":null},"content":{"StorageLive":2},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":14},"end":{"line":33,"col":29}},"generated_from_span":null},"content":{"StorageLive":3},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":14},"end":{"line":33,"col":23}},"generated_from_span":null},"content":{"StorageLive":4},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":14},"end":{"line":33,"col":23}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":4},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Projection":[{"kind":{"Local":1},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Mut"]}},"Deref"]},"ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Field":[{"Adt":[0,null]},0]}]},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":14},"end":{"line":33,"col":29}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":12}},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"args":[{"Move":{"kind":{"Local":4},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}}}],"dest":{"kind":{"Local":3},"ty":{"Literal":{"Integer":"Usize"}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":28},"end":{"line":33,"col":29}},"generated_from_span":null},"content":{"StorageDead":4},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":14},"end":{"line":33,"col":33}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":2},"ty":{"Literal":"Bool"}},{"BinaryOp":["Gt",{"Move":{"kind":{"Local":3},"ty":{"Literal":{"Integer":"Usize"}}}},{"Const":{"value":{"Literal":{"Scalar":{"Usize":"1"}}},"ty":{"Literal":{"Integer":"Usize"}}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"content":{"Switch":{"If":[{"Move":{"kind":{"Local":2},"ty":{"Literal":"Bool"}}},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":33,"col":32},"end":{"line":33,"col":33}},"generated_from_span":null},"content":{"StorageDead":3},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":37},"end":{"line":33,"col":63}},"generated_from_span":null},"content":{"StorageLive":5},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":38},"end":{"line":33,"col":63}},"generated_from_span":null},"content":{"StorageLive":6},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":38},"end":{"line":33,"col":54}},"generated_from_span":null},"content":{"StorageLive":7},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":38},"end":{"line":33,"col":47}},"generated_from_span":null},"content":{"StorageLive":8},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":38},"end":{"line":33,"col":54}},"generated_from_span":null},"content":{"StorageLive":9},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":38},"end":{"line":33,"col":47}},"generated_from_span":null},"content":{"StorageLive":10},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":38},"end":{"line":33,"col":47}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":10},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Projection":[{"kind":{"Local":1},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Mut"]}},"Deref"]},"ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Field":[{"Adt":[0,null]},0]}]},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":38},"end":{"line":33,"col":54}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":221}},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"args":[{"Move":{"kind":{"Local":10},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}}}],"dest":{"kind":{"Local":9},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":38},"end":{"line":33,"col":47}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":8},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Local":9},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}},"Deref"]},"ty":{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":46},"end":{"line":33,"col":47}},"generated_from_span":null},"content":{"StorageDead":10},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":38},"end":{"line":33,"col":54}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":13}},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}},"args":[{"Move":{"kind":{"Local":8},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}}}],"dest":{"kind":{"Local":7},"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[null]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":53},"end":{"line":33,"col":54}},"generated_from_span":null},"content":{"StorageDead":8},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":38},"end":{"line":33,"col":63}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":14}},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[null]}}},"args":[{"Move":{"kind":{"Local":7},"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[null]}}}}}],"dest":{"kind":{"Local":6},"ty":{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":62},"end":{"line":33,"col":63}},"generated_from_span":null},"content":{"StorageDead":7},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":37},"end":{"line":33,"col":63}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":187}},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}},"args":[{"Move":{"kind":{"Local":6},"ty":{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}}}],"dest":{"kind":{"Local":5},"ty":{"Literal":"Bool"}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"content":{"Switch":{"If":[{"Move":{"kind":{"Local":5},"ty":{"Literal":"Bool"}}},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":33,"col":62},"end":{"line":33,"col":63}},"generated_from_span":null},"content":{"StorageDead":9},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":62},"end":{"line":33,"col":63}},"generated_from_span":null},"content":{"StorageDead":6},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":34,"col":12},"end":{"line":34,"col":27}},"generated_from_span":null},"content":{"StorageLive":11},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":34,"col":12},"end":{"line":34,"col":21}},"generated_from_span":null},"content":{"StorageLive":12},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":34,"col":12},"end":{"line":34,"col":21}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":12},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Mut"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Projection":[{"kind":{"Local":1},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Mut"]}},"Deref"]},"ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Field":[{"Adt":[0,null]},0]}]},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},"TwoPhaseMut"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":34,"col":12},"end":{"line":34,"col":27}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":16}},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"args":[{"Move":{"kind":{"Local":12},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Mut"]}}}],"dest":{"kind":{"Local":11},"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":34,"col":26},"end":{"line":34,"col":27}},"generated_from_span":null},"content":{"StorageDead":12},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":34,"col":27},"end":{"line":34,"col":28}},"generated_from_span":null},"content":{"StorageDead":11},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":35,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"content":{"StorageDead":5},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":35,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"content":{"StorageDead":2},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"content":{"Continue":0},"comments_before":[]}]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":62},"end":{"line":33,"col":63}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":33,"col":62},"end":{"line":33,"col":63}},"generated_from_span":null},"content":{"StorageDead":9},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":62},"end":{"line":33,"col":63}},"generated_from_span":null},"content":{"StorageDead":6},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"content":{"Break":0},"comments_before":[]}]}]}},"comments_before":[]}]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":32},"end":{"line":33,"col":33}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":33,"col":32},"end":{"line":33,"col":33}},"generated_from_span":null},"content":{"StorageDead":3},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"content":{"Break":0},"comments_before":[]}]}]}},"comments_before":[]}]}},"comments_before":["Remove trailing false bits, but keep at least one bit"]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"content":{"StorageLive":13},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":33,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":0},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Aggregate":[{"Adt":[{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},null,null]},[]]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":35,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"content":{"StorageDead":13},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":35,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"content":{"StorageDead":5},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":35,"col":8},"end":{"line":35,"col":9}},"generated_from_span":null},"content":{"StorageDead":2},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":36,"col":5},"end":{"line":36,"col":5}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":0},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Aggregate":[{"Adt":[{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},null,null]},[]]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":36,"col":5},"end":{"line":36,"col":5}},"generated_from_span":null},"content":"Return","comments_before":[]}]}}}}},{"def_id":3,"item_meta":{"name":[{"Ident":["bn_rust",0]},{"Ident":["addition",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["add",0]}],"span":{"span":{"file_id":1,"beg":{"line":39,"col":4},"end":{"line":64,"col":5}},"generated_from_span":null},"source_text":"pub fn add(&self, other: &BigNum) -> BigNum {\n        let max_len = self.bits.len().max(other.bits.len());\n        let mut result = Vec::with_capacity(max_len + 1);\n        let mut carry = false;\n        \n        for i in 0..max_len {\n            let a = self.bits.get(i).copied().unwrap_or(false);\n            let b = other.bits.get(i).copied().unwrap_or(false);\n            \n            // Full adder logic\n            let sum = a ^ b ^ carry;\n            let new_carry = (a & b) | (carry & (a ^ b));\n            \n            result.push(sum);\n            carry = new_carry;\n        }\n        \n        // Add final carry if needed\n        if carry {\n            result.push(true);\n        }\n        \n        let mut bn = BigNum { bits: result };\n        bn.normalize();\n        bn\n    }","attr_info":{"attributes":[{"DocComment":" Add two BigNums and return the result"}],"inline":null,"rename":null,"public":true},"is_local":true,"opacity":"Transparent","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]},{"Ref":[{"Var":{"Free":1}},{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"output":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Ok":{"Structured":{"span":{"span":{"file_id":1,"beg":{"line":39,"col":4},"end":{"line":64,"col":5}},"generated_from_span":null},"locals":{"arg_count":2,"locals":[{"index":0,"name":null,"ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":1,"name":"self","ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"index":2,"name":"other","ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"index":3,"name":"max_len","ty":{"Literal":{"Integer":"Usize"}}},{"index":4,"name":null,"ty":{"Literal":{"Integer":"Usize"}}},{"index":5,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}},{"index":6,"name":null,"ty":{"Literal":{"Integer":"Usize"}}},{"index":7,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}},{"index":8,"name":"result","ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},{"index":9,"name":null,"ty":{"Literal":{"Integer":"Usize"}}},{"index":10,"name":null,"ty":{"Literal":{"Integer":"Usize"}}},{"index":11,"name":null,"ty":{"Literal":{"Integer":"Usize"}}},{"index":12,"name":"carry","ty":{"Literal":"Bool"}},{"index":13,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":14,"name":null,"ty":{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}}},{"index":15,"name":null,"ty":{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}}},{"index":16,"name":null,"ty":{"Literal":{"Integer":"Usize"}}},{"index":17,"name":"iter","ty":{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}}},{"index":18,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":19,"name":null,"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}}},{"index":20,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}},"Mut"]}},{"index":21,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}},"Mut"]}},{"index":22,"name":"i","ty":{"Literal":{"Integer":"Usize"}}},{"index":23,"name":"a","ty":{"Literal":"Bool"}},{"index":24,"name":null,"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}},{"index":25,"name":null,"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[null]}}}},{"index":26,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"index":27,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"index":28,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}},{"index":29,"name":null,"ty":{"Literal":{"Integer":"Usize"}}},{"index":30,"name":"b","ty":{"Literal":"Bool"}},{"index":31,"name":null,"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}},{"index":32,"name":null,"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[null]}}}},{"index":33,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"index":34,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"index":35,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}},{"index":36,"name":null,"ty":{"Literal":{"Integer":"Usize"}}},{"index":37,"name":"sum","ty":{"Literal":"Bool"}},{"index":38,"name":null,"ty":{"Literal":"Bool"}},{"index":39,"name":null,"ty":{"Literal":"Bool"}},{"index":40,"name":null,"ty":{"Literal":"Bool"}},{"index":41,"name":null,"ty":{"Literal":"Bool"}},{"index":42,"name":"new_carry","ty":{"Literal":"Bool"}},{"index":43,"name":null,"ty":{"Literal":"Bool"}},{"index":44,"name":null,"ty":{"Literal":"Bool"}},{"index":45,"name":null,"ty":{"Literal":"Bool"}},{"index":46,"name":null,"ty":{"Literal":"Bool"}},{"index":47,"name":null,"ty":{"Literal":"Bool"}},{"index":48,"name":null,"ty":{"Literal":"Bool"}},{"index":49,"name":null,"ty":{"Literal":"Bool"}},{"index":50,"name":null,"ty":{"Literal":"Bool"}},{"index":51,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":52,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Mut"]}},{"index":53,"name":null,"ty":{"Literal":"Bool"}},{"index":54,"name":null,"ty":{"Literal":"Bool"}},{"index":55,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":56,"name":null,"ty":{"Literal":"Bool"}},{"index":57,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":58,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Mut"]}},{"index":59,"name":"bn","ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":60,"name":null,"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},{"index":61,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":62,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Mut"]}}]},"comments":[[49,["Full adder logic"]],[57,["Add final carry if needed"]]],"body":{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":64,"col":5}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":11},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":20},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":22},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":23},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":24},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":25},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":26},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":27},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":28},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":29},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":30},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":31},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":32},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":33},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":34},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":35},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":36},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":37},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":38},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":39},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":40},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":41},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":42},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":43},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":44},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":45},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":46},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":47},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":48},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":49},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":50},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":51},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":52},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":53},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":54},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":57},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":58},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":12},"end":{"line":40,"col":19}},"generated_from_span":null},"content":{"StorageLive":3},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":22},"end":{"line":40,"col":37}},"generated_from_span":null},"content":{"StorageLive":4},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":22},"end":{"line":40,"col":31}},"generated_from_span":null},"content":{"StorageLive":5},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":22},"end":{"line":40,"col":31}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":5},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Projection":[{"kind":{"Local":1},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}},"Deref"]},"ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Field":[{"Adt":[0,null]},0]}]},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":22},"end":{"line":40,"col":37}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":12}},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"args":[{"Move":{"kind":{"Local":5},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}}}],"dest":{"kind":{"Local":4},"ty":{"Literal":{"Integer":"Usize"}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":36},"end":{"line":40,"col":37}},"generated_from_span":null},"content":{"StorageDead":5},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":42},"end":{"line":40,"col":58}},"generated_from_span":null},"content":{"StorageLive":6},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":42},"end":{"line":40,"col":52}},"generated_from_span":null},"content":{"StorageLive":7},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":42},"end":{"line":40,"col":52}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":7},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Projection":[{"kind":{"Local":2},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}},"Deref"]},"ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Field":[{"Adt":[0,null]},0]}]},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":42},"end":{"line":40,"col":58}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":12}},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"args":[{"Move":{"kind":{"Local":7},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}}}],"dest":{"kind":{"Local":6},"ty":{"Literal":{"Integer":"Usize"}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":57},"end":{"line":40,"col":58}},"generated_from_span":null},"content":{"StorageDead":7},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":22},"end":{"line":40,"col":59}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":224}},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[null]}}},"args":[{"Move":{"kind":{"Local":4},"ty":{"Literal":{"Integer":"Usize"}}}},{"Move":{"kind":{"Local":6},"ty":{"Literal":{"Integer":"Usize"}}}}],"dest":{"kind":{"Local":3},"ty":{"Literal":{"Integer":"Usize"}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":58},"end":{"line":40,"col":59}},"generated_from_span":null},"content":{"StorageDead":6},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":40,"col":58},"end":{"line":40,"col":59}},"generated_from_span":null},"content":{"StorageDead":4},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":41,"col":12},"end":{"line":41,"col":22}},"generated_from_span":null},"content":{"StorageLive":8},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":41,"col":44},"end":{"line":41,"col":55}},"generated_from_span":null},"content":{"StorageLive":9},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":41,"col":44},"end":{"line":41,"col":51}},"generated_from_span":null},"content":{"StorageLive":10},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":41,"col":44},"end":{"line":41,"col":51}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":10},"ty":{"Literal":{"Integer":"Usize"}}},{"Use":{"Copy":{"kind":{"Local":3},"ty":{"Literal":{"Integer":"Usize"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":41,"col":44},"end":{"line":41,"col":55}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":11},"ty":{"Literal":{"Integer":"Usize"}}},{"BinaryOp":["Add",{"Copy":{"kind":{"Local":10},"ty":{"Literal":{"Integer":"Usize"}}}},{"Const":{"value":{"Literal":{"Scalar":{"Usize":"1"}}},"ty":{"Literal":{"Integer":"Usize"}}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":41,"col":44},"end":{"line":41,"col":55}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":9},"ty":{"Literal":{"Integer":"Usize"}}},{"Use":{"Move":{"kind":{"Local":11},"ty":{"Literal":{"Integer":"Usize"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":41,"col":54},"end":{"line":41,"col":55}},"generated_from_span":null},"content":{"StorageDead":10},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":41,"col":25},"end":{"line":41,"col":56}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":18}},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}},"args":[{"Move":{"kind":{"Local":9},"ty":{"Literal":{"Integer":"Usize"}}}}],"dest":{"kind":{"Local":8},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":41,"col":55},"end":{"line":41,"col":56}},"generated_from_span":null},"content":{"StorageDead":9},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":42,"col":12},"end":{"line":42,"col":21}},"generated_from_span":null},"content":{"StorageLive":12},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":42,"col":24},"end":{"line":42,"col":29}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":12},"ty":{"Literal":"Bool"}},{"Use":{"Const":{"value":{"Literal":{"Bool":false}},"ty":{"Literal":"Bool"}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"content":{"StorageLive":13},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":17},"end":{"line":44,"col":27}},"generated_from_span":null},"content":{"StorageLive":14},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":17},"end":{"line":44,"col":27}},"generated_from_span":null},"content":{"StorageLive":15},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":20},"end":{"line":44,"col":27}},"generated_from_span":null},"content":{"StorageLive":16},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":20},"end":{"line":44,"col":27}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":16},"ty":{"Literal":{"Integer":"Usize"}}},{"Use":{"Copy":{"kind":{"Local":3},"ty":{"Literal":{"Integer":"Usize"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":17},"end":{"line":44,"col":27}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":15},"ty":{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}}},{"Aggregate":[{"Adt":[{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}},null,null]},[{"Const":{"value":{"Literal":{"Scalar":{"Usize":"0"}}},"ty":{"Literal":{"Integer":"Usize"}}}},{"Move":{"kind":{"Local":16},"ty":{"Literal":{"Integer":"Usize"}}}}]]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":26},"end":{"line":44,"col":27}},"generated_from_span":null},"content":{"StorageDead":16},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":17},"end":{"line":44,"col":27}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":72}},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}},{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null,{"kind":{"TraitImpl":{"id":7,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null,{"kind":{"TraitImpl":{"id":8,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":7,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}}}}]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}},{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}}}}]}}},"args":[{"Move":{"kind":{"Local":15},"ty":{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}}}}],"dest":{"kind":{"Local":14},"ty":{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":26},"end":{"line":44,"col":27}},"generated_from_span":null},"content":{"StorageDead":15},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":17},"end":{"line":44,"col":27}},"generated_from_span":null},"content":{"StorageLive":17},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":17},"end":{"line":44,"col":27}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":17},"ty":{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}}},{"Use":{"Move":{"kind":{"Local":14},"ty":{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"content":{"Loop":{"span":{"span":{"file_id":1,"beg":{"line":44,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":44,"col":17},"end":{"line":44,"col":27}},"generated_from_span":null},"content":{"StorageLive":18},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":17},"end":{"line":44,"col":27}},"generated_from_span":null},"content":{"StorageLive":19},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":17},"end":{"line":44,"col":27}},"generated_from_span":null},"content":{"StorageLive":20},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":17},"end":{"line":44,"col":27}},"generated_from_span":null},"content":{"StorageLive":21},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":17},"end":{"line":44,"col":27}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":21},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}},"Mut"]}},{"Ref":[{"kind":{"Local":17},"ty":{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}}},"Mut"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":17},"end":{"line":44,"col":27}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":20},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}},"Mut"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Local":21},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}},"Mut"]}},"Deref"]},"ty":{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}}},"TwoPhaseMut"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":17},"end":{"line":44,"col":27}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":62}},"generics":{"regions":["Erased"],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null,{"kind":{"TraitImpl":{"id":8,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":7,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}}}}]}}},"args":[{"Move":{"kind":{"Local":20},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}},"Mut"]}}}],"dest":{"kind":{"Local":19},"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":26},"end":{"line":44,"col":27}},"generated_from_span":null},"content":{"StorageDead":20},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"content":{"Switch":{"Match":[{"kind":{"Local":19},"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}}},[[[0],{"span":{"span":{"file_id":1,"beg":{"line":44,"col":17},"end":{"line":44,"col":27}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":44,"col":17},"end":{"line":44,"col":27}},"generated_from_span":null},"content":{"Break":0},"comments_before":[]}]}],[[1],{"span":{"span":{"file_id":1,"beg":{"line":44,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":44,"col":12},"end":{"line":44,"col":13}},"generated_from_span":null},"content":{"StorageLive":22},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":12},"end":{"line":44,"col":13}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":22},"ty":{"Literal":{"Integer":"Usize"}}},{"Use":{"Copy":{"kind":{"Projection":[{"kind":{"Local":19},"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}}},{"Field":[{"Adt":[5,1]},0]}]},"ty":{"Literal":{"Integer":"Usize"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":45,"col":16},"end":{"line":45,"col":17}},"generated_from_span":null},"content":{"StorageLive":23},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":45,"col":20},"end":{"line":45,"col":45}},"generated_from_span":null},"content":{"StorageLive":24},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":45,"col":20},"end":{"line":45,"col":36}},"generated_from_span":null},"content":{"StorageLive":25},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":45,"col":20},"end":{"line":45,"col":29}},"generated_from_span":null},"content":{"StorageLive":26},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":45,"col":20},"end":{"line":45,"col":36}},"generated_from_span":null},"content":{"StorageLive":27},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":45,"col":20},"end":{"line":45,"col":29}},"generated_from_span":null},"content":{"StorageLive":28},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":45,"col":20},"end":{"line":45,"col":29}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":28},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Projection":[{"kind":{"Local":1},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}},"Deref"]},"ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Field":[{"Adt":[0,null]},0]}]},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":45,"col":20},"end":{"line":45,"col":36}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":221}},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"args":[{"Move":{"kind":{"Local":28},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}}}],"dest":{"kind":{"Local":27},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":45,"col":20},"end":{"line":45,"col":29}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":26},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Local":27},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}},"Deref"]},"ty":{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":45,"col":28},"end":{"line":45,"col":29}},"generated_from_span":null},"content":{"StorageDead":28},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":45,"col":34},"end":{"line":45,"col":35}},"generated_from_span":null},"content":{"StorageLive":29},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":45,"col":34},"end":{"line":45,"col":35}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":29},"ty":{"Literal":{"Integer":"Usize"}}},{"Use":{"Copy":{"kind":{"Local":22},"ty":{"Literal":{"Integer":"Usize"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":45,"col":20},"end":{"line":45,"col":36}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":19}},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"},{"Literal":{"Integer":"Usize"}},{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null,null,{"kind":{"TraitImpl":{"id":9,"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":8,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}}}]}}},"args":[{"Move":{"kind":{"Local":26},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}}},{"Move":{"kind":{"Local":29},"ty":{"Literal":{"Integer":"Usize"}}}}],"dest":{"kind":{"Local":25},"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[null]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":45,"col":35},"end":{"line":45,"col":36}},"generated_from_span":null},"content":{"StorageDead":29},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":45,"col":35},"end":{"line":45,"col":36}},"generated_from_span":null},"content":{"StorageDead":26},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":45,"col":20},"end":{"line":45,"col":45}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":20}},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null,{"kind":{"TraitImpl":{"id":10,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":9,"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}}}]}}},"args":[{"Move":{"kind":{"Local":25},"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[null]}}}}}],"dest":{"kind":{"Local":24},"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":45,"col":44},"end":{"line":45,"col":45}},"generated_from_span":null},"content":{"StorageDead":25},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":45,"col":20},"end":{"line":45,"col":62}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":21}},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}},"args":[{"Move":{"kind":{"Local":24},"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}}},{"Const":{"value":{"Literal":{"Bool":false}},"ty":{"Literal":"Bool"}}}],"dest":{"kind":{"Local":23},"ty":{"Literal":"Bool"}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":45,"col":61},"end":{"line":45,"col":62}},"generated_from_span":null},"content":{"StorageDead":24},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":45,"col":62},"end":{"line":45,"col":63}},"generated_from_span":null},"content":{"StorageDead":27},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":46,"col":16},"end":{"line":46,"col":17}},"generated_from_span":null},"content":{"StorageLive":30},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":46,"col":20},"end":{"line":46,"col":46}},"generated_from_span":null},"content":{"StorageLive":31},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":46,"col":20},"end":{"line":46,"col":37}},"generated_from_span":null},"content":{"StorageLive":32},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":46,"col":20},"end":{"line":46,"col":30}},"generated_from_span":null},"content":{"StorageLive":33},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":46,"col":20},"end":{"line":46,"col":37}},"generated_from_span":null},"content":{"StorageLive":34},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":46,"col":20},"end":{"line":46,"col":30}},"generated_from_span":null},"content":{"StorageLive":35},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":46,"col":20},"end":{"line":46,"col":30}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":35},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Projection":[{"kind":{"Local":2},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}},"Deref"]},"ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Field":[{"Adt":[0,null]},0]}]},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":46,"col":20},"end":{"line":46,"col":37}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":221}},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"args":[{"Move":{"kind":{"Local":35},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}}}],"dest":{"kind":{"Local":34},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":46,"col":20},"end":{"line":46,"col":30}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":33},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Local":34},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}},"Deref"]},"ty":{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":46,"col":29},"end":{"line":46,"col":30}},"generated_from_span":null},"content":{"StorageDead":35},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":46,"col":35},"end":{"line":46,"col":36}},"generated_from_span":null},"content":{"StorageLive":36},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":46,"col":35},"end":{"line":46,"col":36}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":36},"ty":{"Literal":{"Integer":"Usize"}}},{"Use":{"Copy":{"kind":{"Local":22},"ty":{"Literal":{"Integer":"Usize"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":46,"col":20},"end":{"line":46,"col":37}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":19}},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"},{"Literal":{"Integer":"Usize"}},{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null,null,{"kind":{"TraitImpl":{"id":9,"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":8,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}}}]}}},"args":[{"Move":{"kind":{"Local":33},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}},"Shared"]}}},{"Move":{"kind":{"Local":36},"ty":{"Literal":{"Integer":"Usize"}}}}],"dest":{"kind":{"Local":32},"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[null]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":46,"col":36},"end":{"line":46,"col":37}},"generated_from_span":null},"content":{"StorageDead":36},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":46,"col":36},"end":{"line":46,"col":37}},"generated_from_span":null},"content":{"StorageDead":33},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":46,"col":20},"end":{"line":46,"col":46}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":20}},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null,{"kind":{"TraitImpl":{"id":10,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":9,"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}}}]}}},"args":[{"Move":{"kind":{"Local":32},"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Literal":"Bool"},"Shared"]}],"const_generics":[],"trait_refs":[null]}}}}}],"dest":{"kind":{"Local":31},"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":46,"col":45},"end":{"line":46,"col":46}},"generated_from_span":null},"content":{"StorageDead":32},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":46,"col":20},"end":{"line":46,"col":63}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":21}},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}},"args":[{"Move":{"kind":{"Local":31},"ty":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[null]}}}}},{"Const":{"value":{"Literal":{"Bool":false}},"ty":{"Literal":"Bool"}}}],"dest":{"kind":{"Local":30},"ty":{"Literal":"Bool"}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":46,"col":62},"end":{"line":46,"col":63}},"generated_from_span":null},"content":{"StorageDead":31},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":46,"col":63},"end":{"line":46,"col":64}},"generated_from_span":null},"content":{"StorageDead":34},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":49,"col":16},"end":{"line":49,"col":19}},"generated_from_span":null},"content":{"StorageLive":37},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":49,"col":22},"end":{"line":49,"col":27}},"generated_from_span":null},"content":{"StorageLive":38},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":49,"col":22},"end":{"line":49,"col":23}},"generated_from_span":null},"content":{"StorageLive":39},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":49,"col":22},"end":{"line":49,"col":23}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":39},"ty":{"Literal":"Bool"}},{"Use":{"Copy":{"kind":{"Local":23},"ty":{"Literal":"Bool"}}}}]},"comments_before":["Full adder logic"]},{"span":{"span":{"file_id":1,"beg":{"line":49,"col":26},"end":{"line":49,"col":27}},"generated_from_span":null},"content":{"StorageLive":40},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":49,"col":26},"end":{"line":49,"col":27}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":40},"ty":{"Literal":"Bool"}},{"Use":{"Copy":{"kind":{"Local":30},"ty":{"Literal":"Bool"}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":49,"col":22},"end":{"line":49,"col":27}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":38},"ty":{"Literal":"Bool"}},{"BinaryOp":["BitXor",{"Move":{"kind":{"Local":39},"ty":{"Literal":"Bool"}}},{"Move":{"kind":{"Local":40},"ty":{"Literal":"Bool"}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":49,"col":26},"end":{"line":49,"col":27}},"generated_from_span":null},"content":{"StorageDead":40},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":49,"col":26},"end":{"line":49,"col":27}},"generated_from_span":null},"content":{"StorageDead":39},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":49,"col":30},"end":{"line":49,"col":35}},"generated_from_span":null},"content":{"StorageLive":41},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":49,"col":30},"end":{"line":49,"col":35}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":41},"ty":{"Literal":"Bool"}},{"Use":{"Copy":{"kind":{"Local":12},"ty":{"Literal":"Bool"}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":49,"col":22},"end":{"line":49,"col":35}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":37},"ty":{"Literal":"Bool"}},{"BinaryOp":["BitXor",{"Move":{"kind":{"Local":38},"ty":{"Literal":"Bool"}}},{"Move":{"kind":{"Local":41},"ty":{"Literal":"Bool"}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":49,"col":34},"end":{"line":49,"col":35}},"generated_from_span":null},"content":{"StorageDead":41},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":49,"col":34},"end":{"line":49,"col":35}},"generated_from_span":null},"content":{"StorageDead":38},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":16},"end":{"line":50,"col":25}},"generated_from_span":null},"content":{"StorageLive":42},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":28},"end":{"line":50,"col":35}},"generated_from_span":null},"content":{"StorageLive":43},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":29},"end":{"line":50,"col":30}},"generated_from_span":null},"content":{"StorageLive":44},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":29},"end":{"line":50,"col":30}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":44},"ty":{"Literal":"Bool"}},{"Use":{"Copy":{"kind":{"Local":23},"ty":{"Literal":"Bool"}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":33},"end":{"line":50,"col":34}},"generated_from_span":null},"content":{"StorageLive":45},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":33},"end":{"line":50,"col":34}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":45},"ty":{"Literal":"Bool"}},{"Use":{"Copy":{"kind":{"Local":30},"ty":{"Literal":"Bool"}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":28},"end":{"line":50,"col":35}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":43},"ty":{"Literal":"Bool"}},{"BinaryOp":["BitAnd",{"Move":{"kind":{"Local":44},"ty":{"Literal":"Bool"}}},{"Move":{"kind":{"Local":45},"ty":{"Literal":"Bool"}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":34},"end":{"line":50,"col":35}},"generated_from_span":null},"content":{"StorageDead":45},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":34},"end":{"line":50,"col":35}},"generated_from_span":null},"content":{"StorageDead":44},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":38},"end":{"line":50,"col":55}},"generated_from_span":null},"content":{"StorageLive":46},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":39},"end":{"line":50,"col":44}},"generated_from_span":null},"content":{"StorageLive":47},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":39},"end":{"line":50,"col":44}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":47},"ty":{"Literal":"Bool"}},{"Use":{"Copy":{"kind":{"Local":12},"ty":{"Literal":"Bool"}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":47},"end":{"line":50,"col":54}},"generated_from_span":null},"content":{"StorageLive":48},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":48},"end":{"line":50,"col":49}},"generated_from_span":null},"content":{"StorageLive":49},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":48},"end":{"line":50,"col":49}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":49},"ty":{"Literal":"Bool"}},{"Use":{"Copy":{"kind":{"Local":23},"ty":{"Literal":"Bool"}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":52},"end":{"line":50,"col":53}},"generated_from_span":null},"content":{"StorageLive":50},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":52},"end":{"line":50,"col":53}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":50},"ty":{"Literal":"Bool"}},{"Use":{"Copy":{"kind":{"Local":30},"ty":{"Literal":"Bool"}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":47},"end":{"line":50,"col":54}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":48},"ty":{"Literal":"Bool"}},{"BinaryOp":["BitXor",{"Move":{"kind":{"Local":49},"ty":{"Literal":"Bool"}}},{"Move":{"kind":{"Local":50},"ty":{"Literal":"Bool"}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":53},"end":{"line":50,"col":54}},"generated_from_span":null},"content":{"StorageDead":50},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":53},"end":{"line":50,"col":54}},"generated_from_span":null},"content":{"StorageDead":49},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":38},"end":{"line":50,"col":55}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":46},"ty":{"Literal":"Bool"}},{"BinaryOp":["BitAnd",{"Move":{"kind":{"Local":47},"ty":{"Literal":"Bool"}}},{"Move":{"kind":{"Local":48},"ty":{"Literal":"Bool"}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":54},"end":{"line":50,"col":55}},"generated_from_span":null},"content":{"StorageDead":48},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":54},"end":{"line":50,"col":55}},"generated_from_span":null},"content":{"StorageDead":47},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":28},"end":{"line":50,"col":55}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":42},"ty":{"Literal":"Bool"}},{"BinaryOp":["BitOr",{"Move":{"kind":{"Local":43},"ty":{"Literal":"Bool"}}},{"Move":{"kind":{"Local":46},"ty":{"Literal":"Bool"}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":54},"end":{"line":50,"col":55}},"generated_from_span":null},"content":{"StorageDead":46},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":50,"col":54},"end":{"line":50,"col":55}},"generated_from_span":null},"content":{"StorageDead":43},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":52,"col":12},"end":{"line":52,"col":28}},"generated_from_span":null},"content":{"StorageLive":51},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":52,"col":12},"end":{"line":52,"col":18}},"generated_from_span":null},"content":{"StorageLive":52},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":52,"col":12},"end":{"line":52,"col":18}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":52},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Mut"]}},{"Ref":[{"kind":{"Local":8},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},"TwoPhaseMut"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":52,"col":24},"end":{"line":52,"col":27}},"generated_from_span":null},"content":{"StorageLive":53},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":52,"col":24},"end":{"line":52,"col":27}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":53},"ty":{"Literal":"Bool"}},{"Use":{"Copy":{"kind":{"Local":37},"ty":{"Literal":"Bool"}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":52,"col":12},"end":{"line":52,"col":28}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":6}},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"args":[{"Move":{"kind":{"Local":52},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Mut"]}}},{"Move":{"kind":{"Local":53},"ty":{"Literal":"Bool"}}}],"dest":{"kind":{"Local":51},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":52,"col":27},"end":{"line":52,"col":28}},"generated_from_span":null},"content":{"StorageDead":53},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":52,"col":27},"end":{"line":52,"col":28}},"generated_from_span":null},"content":{"StorageDead":52},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":52,"col":28},"end":{"line":52,"col":29}},"generated_from_span":null},"content":{"StorageDead":51},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":53,"col":20},"end":{"line":53,"col":29}},"generated_from_span":null},"content":{"StorageLive":54},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":53,"col":20},"end":{"line":53,"col":29}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":54},"ty":{"Literal":"Bool"}},{"Use":{"Copy":{"kind":{"Local":42},"ty":{"Literal":"Bool"}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":53,"col":12},"end":{"line":53,"col":29}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":12},"ty":{"Literal":"Bool"}},{"Use":{"Move":{"kind":{"Local":54},"ty":{"Literal":"Bool"}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":53,"col":28},"end":{"line":53,"col":29}},"generated_from_span":null},"content":{"StorageDead":54},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":54,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"content":{"StorageDead":42},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":54,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"content":{"StorageDead":37},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":54,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"content":{"StorageDead":30},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":54,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"content":{"StorageDead":23},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":54,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"content":{"StorageDead":22},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":54,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"content":{"StorageDead":21},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":54,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"content":{"StorageDead":19},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":54,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"content":{"StorageDead":18},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":44,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"content":{"Continue":0},"comments_before":[]}]}]],null]}},"comments_before":[]}]}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":54,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"content":{"StorageDead":21},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":54,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"content":{"StorageDead":19},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":54,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"content":{"StorageDead":18},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":54,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"content":{"StorageDead":17},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":54,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"content":{"StorageDead":14},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":54,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"content":{"StorageDead":13},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":57,"col":8},"end":{"line":59,"col":9}},"generated_from_span":null},"content":{"StorageLive":55},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":57,"col":11},"end":{"line":57,"col":16}},"generated_from_span":null},"content":{"StorageLive":56},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":57,"col":11},"end":{"line":57,"col":16}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":56},"ty":{"Literal":"Bool"}},{"Use":{"Copy":{"kind":{"Local":12},"ty":{"Literal":"Bool"}}}}]},"comments_before":["Add final carry if needed"]},{"span":{"span":{"file_id":1,"beg":{"line":57,"col":8},"end":{"line":59,"col":9}},"generated_from_span":null},"content":{"Switch":{"If":[{"Move":{"kind":{"Local":56},"ty":{"Literal":"Bool"}}},{"span":{"span":{"file_id":1,"beg":{"line":57,"col":8},"end":{"line":59,"col":9}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":58,"col":12},"end":{"line":58,"col":29}},"generated_from_span":null},"content":{"StorageLive":57},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":58,"col":12},"end":{"line":58,"col":18}},"generated_from_span":null},"content":{"StorageLive":58},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":58,"col":12},"end":{"line":58,"col":18}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":58},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Mut"]}},{"Ref":[{"kind":{"Local":8},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},"TwoPhaseMut"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":58,"col":12},"end":{"line":58,"col":29}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":6}},"generics":{"regions":["Erased"],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"args":[{"Move":{"kind":{"Local":58},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Mut"]}}},{"Const":{"value":{"Literal":{"Bool":true}},"ty":{"Literal":"Bool"}}}],"dest":{"kind":{"Local":57},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":58,"col":28},"end":{"line":58,"col":29}},"generated_from_span":null},"content":{"StorageDead":58},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":58,"col":29},"end":{"line":58,"col":30}},"generated_from_span":null},"content":{"StorageDead":57},"comments_before":[]}]},{"span":{"span":{"file_id":1,"beg":{"line":57,"col":8},"end":{"line":59,"col":9}},"generated_from_span":null},"statements":[]}]}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":59,"col":8},"end":{"line":59,"col":9}},"generated_from_span":null},"content":{"StorageDead":56},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":59,"col":8},"end":{"line":59,"col":9}},"generated_from_span":null},"content":{"StorageDead":55},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":61,"col":12},"end":{"line":61,"col":18}},"generated_from_span":null},"content":{"StorageLive":59},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":61,"col":36},"end":{"line":61,"col":42}},"generated_from_span":null},"content":{"StorageLive":60},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":61,"col":36},"end":{"line":61,"col":42}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":60},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},{"Use":{"Move":{"kind":{"Local":8},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":61,"col":21},"end":{"line":61,"col":44}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":59},"ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Aggregate":[{"Adt":[{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},null,null]},[{"Move":{"kind":{"Local":60},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}}}]]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":61,"col":43},"end":{"line":61,"col":44}},"generated_from_span":null},"content":{"Drop":{"kind":{"Local":60},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":61,"col":43},"end":{"line":61,"col":44}},"generated_from_span":null},"content":{"StorageDead":60},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":62,"col":8},"end":{"line":62,"col":22}},"generated_from_span":null},"content":{"StorageLive":61},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":62,"col":8},"end":{"line":62,"col":10}},"generated_from_span":null},"content":{"StorageLive":62},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":62,"col":8},"end":{"line":62,"col":10}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":62},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Mut"]}},{"Ref":[{"kind":{"Local":59},"ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},"TwoPhaseMut"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":62,"col":8},"end":{"line":62,"col":22}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":2}},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}},"args":[{"Move":{"kind":{"Local":62},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Mut"]}}}],"dest":{"kind":{"Local":61},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":62,"col":21},"end":{"line":62,"col":22}},"generated_from_span":null},"content":{"StorageDead":62},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":62,"col":22},"end":{"line":62,"col":23}},"generated_from_span":null},"content":{"StorageDead":61},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":63,"col":8},"end":{"line":63,"col":10}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":0},"ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Use":{"Move":{"kind":{"Local":59},"ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":64,"col":4},"end":{"line":64,"col":5}},"generated_from_span":null},"content":{"Drop":{"kind":{"Local":59},"ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":64,"col":4},"end":{"line":64,"col":5}},"generated_from_span":null},"content":{"StorageDead":59},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":64,"col":4},"end":{"line":64,"col":5}},"generated_from_span":null},"content":{"StorageDead":12},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":64,"col":4},"end":{"line":64,"col":5}},"generated_from_span":null},"content":{"Drop":{"kind":{"Local":8},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":64,"col":4},"end":{"line":64,"col":5}},"generated_from_span":null},"content":{"StorageDead":8},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":64,"col":4},"end":{"line":64,"col":5}},"generated_from_span":null},"content":{"StorageDead":3},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":64,"col":5},"end":{"line":64,"col":5}},"generated_from_span":null},"content":"Return","comments_before":[]}]}}}}},{"def_id":4,"item_meta":{"name":[{"Ident":["bn_rust",0]},{"Ident":["main",0]}],"span":{"span":{"file_id":0,"beg":{"line":4,"col":0},"end":{"line":8,"col":1}},"generated_from_span":null},"source_text":"fn main() {\n    println!(\"BigNum Operations Demo\");\n    \n    println!(\"Demo completed successfully!\");\n}","attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":true,"opacity":"Transparent","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[],"output":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Ok":{"Structured":{"span":{"span":{"file_id":0,"beg":{"line":4,"col":0},"end":{"line":8,"col":1}},"generated_from_span":null},"locals":{"arg_count":0,"locals":[{"index":0,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":1,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":2,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":3,"name":null,"ty":{"Adt":{"id":{"Adt":7},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":4,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}},"Shared"]}},{"index":5,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}},"Shared"]}},{"index":6,"name":null,"ty":{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}}},{"index":7,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":8,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":9,"name":null,"ty":{"Adt":{"id":{"Adt":7},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":10,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}},"Shared"]}},{"index":11,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}},"Shared"]}},{"index":12,"name":null,"ty":{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}}}]},"comments":[],"body":{"span":{"span":{"file_id":26,"beg":{"line":142,"col":22},"end":{"line":144,"col":5}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":26,"beg":{"line":142,"col":22},"end":{"line":144,"col":5}},"generated_from_span":null},"content":{"StorageLive":1},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":143,"col":8},"end":{"line":143,"col":61}},"generated_from_span":null},"content":{"StorageLive":2},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":143,"col":27},"end":{"line":143,"col":60}},"generated_from_span":null},"content":{"StorageLive":3},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":13},"end":{"line":5,"col":37}},"generated_from_span":null},"content":{"StorageLive":4},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":13},"end":{"line":5,"col":37}},"generated_from_span":null},"content":{"StorageLive":5},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":13},"end":{"line":5,"col":37}},"generated_from_span":null},"content":{"StorageLive":6},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":13},"end":{"line":5,"col":37}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":6},"ty":{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}}},{"Aggregate":[{"Array":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]},{"Value":{"Scalar":{"Usize":"1"}}}]},[{"Const":{"value":{"Literal":{"Str":"BigNum Operations Demo\n"}},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}}}]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":13},"end":{"line":5,"col":37}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":5},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}},"Shared"]}},{"Ref":[{"kind":{"Local":6},"ty":{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":13},"end":{"line":5,"col":37}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":4},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Local":5},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}},"Shared"]}},"Deref"]},"ty":{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":143,"col":27},"end":{"line":143,"col":60}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":22}},"generics":{"regions":["Erased"],"types":[],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}},"args":[{"Move":{"kind":{"Local":4},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}},"Shared"]}}}],"dest":{"kind":{"Local":3},"ty":{"Adt":{"id":{"Adt":7},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":143,"col":59},"end":{"line":143,"col":60}},"generated_from_span":null},"content":{"StorageDead":4},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":143,"col":8},"end":{"line":143,"col":61}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":23}},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}},"args":[{"Move":{"kind":{"Local":3},"ty":{"Adt":{"id":{"Adt":7},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}}}],"dest":{"kind":{"Local":2},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":143,"col":60},"end":{"line":143,"col":61}},"generated_from_span":null},"content":{"StorageDead":3},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":143,"col":61},"end":{"line":143,"col":62}},"generated_from_span":null},"content":{"StorageDead":6},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":143,"col":61},"end":{"line":143,"col":62}},"generated_from_span":null},"content":{"StorageDead":5},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":143,"col":61},"end":{"line":143,"col":62}},"generated_from_span":null},"content":{"StorageDead":2},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":144,"col":4},"end":{"line":144,"col":5}},"generated_from_span":null},"content":{"StorageDead":1},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":142,"col":22},"end":{"line":144,"col":5}},"generated_from_span":null},"content":{"StorageLive":7},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":143,"col":8},"end":{"line":143,"col":61}},"generated_from_span":null},"content":{"StorageLive":8},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":143,"col":27},"end":{"line":143,"col":60}},"generated_from_span":null},"content":{"StorageLive":9},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":7,"col":13},"end":{"line":7,"col":43}},"generated_from_span":null},"content":{"StorageLive":10},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":7,"col":13},"end":{"line":7,"col":43}},"generated_from_span":null},"content":{"StorageLive":11},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":7,"col":13},"end":{"line":7,"col":43}},"generated_from_span":null},"content":{"StorageLive":12},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":7,"col":13},"end":{"line":7,"col":43}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":12},"ty":{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}}},{"Aggregate":[{"Array":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]},{"Value":{"Scalar":{"Usize":"1"}}}]},[{"Const":{"value":{"Literal":{"Str":"Demo completed successfully!\n"}},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}}}]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":7,"col":13},"end":{"line":7,"col":43}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":11},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}},"Shared"]}},{"Ref":[{"kind":{"Local":12},"ty":{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":7,"col":13},"end":{"line":7,"col":43}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":10},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Local":11},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}},"Shared"]}},"Deref"]},"ty":{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":143,"col":27},"end":{"line":143,"col":60}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":22}},"generics":{"regions":["Erased"],"types":[],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}},"args":[{"Move":{"kind":{"Local":10},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[]}}},"Shared"]}}}],"dest":{"kind":{"Local":9},"ty":{"Adt":{"id":{"Adt":7},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":143,"col":59},"end":{"line":143,"col":60}},"generated_from_span":null},"content":{"StorageDead":10},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":143,"col":8},"end":{"line":143,"col":61}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":23}},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}},"args":[{"Move":{"kind":{"Local":9},"ty":{"Adt":{"id":{"Adt":7},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}}}],"dest":{"kind":{"Local":8},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":143,"col":60},"end":{"line":143,"col":61}},"generated_from_span":null},"content":{"StorageDead":9},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":143,"col":61},"end":{"line":143,"col":62}},"generated_from_span":null},"content":{"StorageDead":12},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":143,"col":61},"end":{"line":143,"col":62}},"generated_from_span":null},"content":{"StorageDead":11},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":143,"col":61},"end":{"line":143,"col":62}},"generated_from_span":null},"content":{"StorageDead":8},"comments_before":[]},{"span":{"span":{"file_id":26,"beg":{"line":144,"col":4},"end":{"line":144,"col":5}},"generated_from_span":null},"content":{"StorageDead":7},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":10},"end":{"line":8,"col":1}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":0},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Aggregate":[{"Adt":[{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},null,null]},[]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":8,"col":1},"end":{"line":8,"col":1}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Local":0},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Aggregate":[{"Adt":[{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},null,null]},[]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":8,"col":1},"end":{"line":8,"col":1}},"generated_from_span":null},"content":"Return","comments_before":[]}]}}}}},{"def_id":5,"item_meta":{"name":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"kind":"InherentImplBlock"}}},{"Ident":["new",0]}],"span":{"span":{"file_id":2,"beg":{"line":434,"col":4},"end":{"line":434,"col":30}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Constructs a new, empty `Vec<T>`."},{"DocComment":""},{"DocComment":" The vector will not allocate until elements are pushed onto it."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # #![allow(unused_mut)]"},{"DocComment":" let mut vec: Vec<i32> = Vec::new();"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"vec_new\""}},{"Unknown":{"path":"must_use","args":null}}],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"vec_new"},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[],"output":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Err":null}},{"def_id":6,"item_meta":{"name":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"},{"index":1,"name":"A"}],"const_generics":[],"trait_clauses":[null,null,null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}},{"TypeVar":{"Bound":[0,1]}}],"const_generics":[],"trait_refs":[null,null,null]}}},"kind":"InherentImplBlock"}}},{"Ident":["push",0]}],"span":{"span":{"file_id":2,"beg":{"line":2442,"col":4},"end":{"line":2442,"col":36}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Appends an element to the back of a collection."},{"DocComment":""},{"DocComment":" # Panics"},{"DocComment":""},{"DocComment":" Panics if the new capacity exceeds `isize::MAX` _bytes_."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let mut vec = vec![1, 2];"},{"DocComment":" vec.push(3);"},{"DocComment":" assert_eq!(vec, [1, 2, 3]);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" # Time complexity"},{"DocComment":""},{"DocComment":" Takes amortized *O*(1) time. If the vector's length would exceed its"},{"DocComment":" capacity after the push, *O*(*capacity*) time is taken to copy the"},{"DocComment":" vector's elements to a larger allocation. This expensive operation is"},{"DocComment":" offset by the *capacity* *O*(1) insertions it allows."},{"Unknown":{"path":"track_caller","args":null}}],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"},{"index":1,"name":"A"}],"const_generics":[],"trait_clauses":[null,null,null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Mut"]},{"TypeVar":{"Free":0}}],"output":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Err":null}},{"def_id":7,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["deref",0]},{"Ident":["Deref",0]},{"Ident":["deref",0]}],"span":{"span":{"file_id":14,"beg":{"line":149,"col":4},"end":{"line":149,"col":37}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Dereferences the value."},{"Unknown":{"path":"must_use","args":null}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"deref_method\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"deref_method"},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Clause0_Target"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":14,"beg":{"line":149,"col":4},"end":{"line":149,"col":37}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]}],"output":{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":1}},"Shared"]}},"kind":{"TraitDecl":{"trait_ref":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}},"item_name":"deref","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":8,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}}],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["iter",0]}],"span":{"span":{"file_id":12,"beg":{"line":1029,"col":4},"end":{"line":1029,"col":43}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns an iterator over the slice."},{"DocComment":""},{"DocComment":" The iterator yields all items from start to end."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let x = &[1, 2, 4];"},{"DocComment":" let mut iterator = x.iter();"},{"DocComment":""},{"DocComment":" assert_eq!(iterator.next(), Some(&1));"},{"DocComment":" assert_eq!(iterator.next(), Some(&2));"},{"DocComment":" assert_eq!(iterator.next(), Some(&4));"},{"DocComment":" assert_eq!(iterator.next(), None);"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"slice_iter\""}}],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"slice_iter"},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"output":{"Adt":{"id":{"Adt":4},"generics":{"regions":[{"Var":{"Free":0}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Err":null}},{"def_id":9,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["enumerate",0]}],"span":{"span":{"file_id":16,"beg":{"line":984,"col":4},"end":{"line":986,"col":20}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Creates an iterator which gives the current iteration count as well as"},{"DocComment":" the next value."},{"DocComment":""},{"DocComment":" The iterator returned yields pairs `(i, val)`, where `i` is the"},{"DocComment":" current index of iteration and `val` is the value returned by the"},{"DocComment":" iterator."},{"DocComment":""},{"DocComment":" `enumerate()` keeps its count as a [`usize`]. If you want to count by a"},{"DocComment":" different sized integer, the [`zip`] function provides similar"},{"DocComment":" functionality."},{"DocComment":""},{"DocComment":" # Overflow Behavior"},{"DocComment":""},{"DocComment":" The method does no guarding against overflows, so enumerating more than"},{"DocComment":" [`usize::MAX`] elements either produces the wrong result or panics. If"},{"DocComment":" overflow checks are enabled, a panic is guaranteed."},{"DocComment":""},{"DocComment":" # Panics"},{"DocComment":""},{"DocComment":" The returned iterator might panic if the to-be-returned index would"},{"DocComment":" overflow a [`usize`]."},{"DocComment":""},{"DocComment":" [`zip`]: Iterator::zip"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let a = ['a', 'b', 'c'];"},{"DocComment":""},{"DocComment":" let mut iter = a.into_iter().enumerate();"},{"DocComment":""},{"DocComment":" assert_eq!(iter.next(), Some((0, 'a')));"},{"DocComment":" assert_eq!(iter.next(), Some((1, 'b')));"},{"DocComment":" assert_eq!(iter.next(), Some((2, 'c')));"},{"DocComment":" assert_eq!(iter.next(), None);"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"enumerate_method\""}}],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"enumerate_method"},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Clause0_Item"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":16,"beg":{"line":984,"col":4},"end":{"line":986,"col":20}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}}],"output":{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitDecl":{"trait_ref":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}},"item_name":"enumerate","has_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":10,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["collect",0]},{"Ident":["IntoIterator",0]},{"Ident":["into_iter",0]}],"span":{"span":{"file_id":19,"beg":{"line":310,"col":4},"end":{"line":310,"col":41}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Creates an iterator from a value."},{"DocComment":""},{"DocComment":" See the [module-level documentation] for more."},{"DocComment":""},{"DocComment":" [module-level documentation]: crate::iter"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let v = [1, 2, 3];"},{"DocComment":" let mut iter = v.into_iter();"},{"DocComment":""},{"DocComment":" assert_eq!(Some(1), iter.next());"},{"DocComment":" assert_eq!(Some(2), iter.next());"},{"DocComment":" assert_eq!(Some(3), iter.next());"},{"DocComment":" assert_eq!(None, iter.next());"},{"DocComment":" ```"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"into_iter"},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Clause0_Item"},{"index":2,"name":"Clause0_IntoIter"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":19,"beg":{"line":310,"col":4},"end":{"line":310,"col":41}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":4,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}}],"output":{"TypeVar":{"Free":2}}},"kind":{"TraitDecl":{"trait_ref":{"id":4,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}},"item_name":"into_iter","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":11,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]},{"Ident":["next",0]}],"span":{"span":{"file_id":16,"beg":{"line":75,"col":4},"end":{"line":75,"col":45}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Advances the iterator and returns the next value."},{"DocComment":""},{"DocComment":" Returns [`None`] when iteration is finished. Individual iterator"},{"DocComment":" implementations may choose to resume iteration, and so calling `next()`"},{"DocComment":" again may or may not eventually start returning [`Some(Item)`] again at some"},{"DocComment":" point."},{"DocComment":""},{"DocComment":" [`Some(Item)`]: Some"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let a = [1, 2, 3];"},{"DocComment":""},{"DocComment":" let mut iter = a.into_iter();"},{"DocComment":""},{"DocComment":" // A call to next() returns the next value..."},{"DocComment":" assert_eq!(Some(1), iter.next());"},{"DocComment":" assert_eq!(Some(2), iter.next());"},{"DocComment":" assert_eq!(Some(3), iter.next());"},{"DocComment":""},{"DocComment":" // ... and then None once it's over."},{"DocComment":" assert_eq!(None, iter.next());"},{"DocComment":""},{"DocComment":" // More calls may or may not return `None`. Here, they always will."},{"DocComment":" assert_eq!(None, iter.next());"},{"DocComment":" assert_eq!(None, iter.next());"},{"DocComment":" ```"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"next"},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Clause0_Item"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":16,"beg":{"line":75,"col":4},"end":{"line":75,"col":45}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Mut"]}],"output":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitDecl":{"trait_ref":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}},"item_name":"next","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":12,"item_meta":{"name":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"},{"index":1,"name":"A"}],"const_generics":[],"trait_clauses":[null,null,null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}},{"TypeVar":{"Bound":[0,1]}}],"const_generics":[],"trait_refs":[null,null,null]}}},"kind":"InherentImplBlock"}}},{"Ident":["len",0]}],"span":{"span":{"file_id":2,"beg":{"line":2705,"col":4},"end":{"line":2705,"col":36}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns the number of elements in the vector, also referred to"},{"DocComment":" as its 'length'."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let a = vec![1, 2, 3];"},{"DocComment":" assert_eq!(a.len(), 3);"},{"DocComment":" ```"}],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"},{"index":1,"name":"A"}],"const_generics":[],"trait_clauses":[null,null,null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}],"output":{"Literal":{"Integer":"Usize"}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Err":null}},{"def_id":13,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}}],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["last",0]}],"span":{"span":{"file_id":12,"beg":{"line":280,"col":4},"end":{"line":280,"col":42}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns the last element of the slice, or `None` if it is empty."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let v = [10, 40, 30];"},{"DocComment":" assert_eq!(Some(&30), v.last());"},{"DocComment":""},{"DocComment":" let w: &[i32] = &[];"},{"DocComment":" assert_eq!(None, w.last());"},{"DocComment":" ```"},{"Unknown":{"path":"must_use","args":null}}],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"output":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]}],"const_generics":[],"trait_refs":[null]}}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Err":null}},{"def_id":14,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["option",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}}],"const_generics":[],"trait_refs":[null]}}},"kind":"InherentImplBlock"}}},{"Ident":["unwrap",0]}],"span":{"span":{"file_id":13,"beg":{"line":1002,"col":4},"end":{"line":1002,"col":34}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns the contained [`Some`] value, consuming the `self` value."},{"DocComment":""},{"DocComment":" Because this function may panic, its use is generally discouraged."},{"DocComment":" Panics are meant for unrecoverable errors, and"},{"DocComment":" [may abort the entire program][panic-abort]."},{"DocComment":""},{"DocComment":" Instead, prefer to use pattern matching and handle the [`None`]"},{"DocComment":" case explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or"},{"DocComment":" [`unwrap_or_default`]. In functions returning `Option`, you can use"},{"DocComment":" [the `?` (try) operator][try-option]."},{"DocComment":""},{"DocComment":" [panic-abort]: https://doc.rust-lang.org/book/ch09-01-unrecoverable-errors-with-panic.html"},{"DocComment":" [try-option]: https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html#where-the--operator-can-be-used"},{"DocComment":" [`unwrap_or`]: Option::unwrap_or"},{"DocComment":" [`unwrap_or_else`]: Option::unwrap_or_else"},{"DocComment":" [`unwrap_or_default`]: Option::unwrap_or_default"},{"DocComment":""},{"DocComment":" # Panics"},{"DocComment":""},{"DocComment":" Panics if the self value equals [`None`]."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let x = Some(\"air\");"},{"DocComment":" assert_eq!(x.unwrap(), \"air\");"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" ```should_panic"},{"DocComment":" let x: Option<&str> = None;"},{"DocComment":" assert_eq!(x.unwrap(), \"air\"); // fails"},{"DocComment":" ```"},{"Unknown":{"path":"track_caller","args":null}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"option_unwrap\""}}],"inline":"Always","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"option_unwrap"},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}}],"output":{"TypeVar":{"Free":0}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Err":null}},{"def_id":15,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["bit",0]},{"Ident":["Not",0]},{"Ident":["not",0]}],"span":{"span":{"file_id":20,"beg":{"line":51,"col":4},"end":{"line":51,"col":33}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Performs the unary `!` operation."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" assert_eq!(!true, false);"},{"DocComment":" assert_eq!(!false, true);"},{"DocComment":" assert_eq!(!1u8, 254);"},{"DocComment":" assert_eq!(!0u8, 255);"},{"DocComment":" ```"},{"Unknown":{"path":"must_use","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Clause0_Output"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":20,"beg":{"line":51,"col":4},"end":{"line":51,"col":33}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}}],"output":{"TypeVar":{"Free":1}}},"kind":{"TraitDecl":{"trait_ref":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}},"item_name":"not","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":16,"item_meta":{"name":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"},{"index":1,"name":"A"}],"const_generics":[],"trait_clauses":[null,null,null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}},{"TypeVar":{"Bound":[0,1]}}],"const_generics":[],"trait_refs":[null,null,null]}}},"kind":"InherentImplBlock"}}},{"Ident":["pop",0]}],"span":{"span":{"file_id":2,"beg":{"line":2528,"col":4},"end":{"line":2528,"col":38}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Removes the last element from a vector and returns it, or [`None`] if it"},{"DocComment":" is empty."},{"DocComment":""},{"DocComment":" If you'd like to pop the first element, consider using"},{"DocComment":" [`VecDeque::pop_front`] instead."},{"DocComment":""},{"DocComment":" [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let mut vec = vec![1, 2, 3];"},{"DocComment":" assert_eq!(vec.pop(), Some(3));"},{"DocComment":" assert_eq!(vec, [1, 2]);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" # Time complexity"},{"DocComment":""},{"DocComment":" Takes *O*(1) time."},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"vec_pop\""}}],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"vec_pop"},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"},{"index":1,"name":"A"}],"const_generics":[],"trait_clauses":[null,null,null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Mut"]}],"output":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Err":null}},{"def_id":17,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["Ord",0]},{"Ident":["max",0]}],"span":{"span":{"file_id":23,"beg":{"line":1009,"col":4},"end":{"line":1011,"col":20}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Compares and returns the maximum of two values."},{"DocComment":""},{"DocComment":" Returns the second argument if the comparison determines them to be equal."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" assert_eq!(1.max(2), 2);"},{"DocComment":" assert_eq!(2.max(2), 2);"},{"DocComment":" ```"},{"DocComment":" ```"},{"DocComment":" use std::cmp::Ordering;"},{"DocComment":""},{"DocComment":" #[derive(Eq)]"},{"DocComment":" struct Equal(&'static str);"},{"DocComment":""},{"DocComment":" impl PartialEq for Equal {"},{"DocComment":"     fn eq(&self, other: &Self) -> bool { true }"},{"DocComment":" }"},{"DocComment":" impl PartialOrd for Equal {"},{"DocComment":"     fn partial_cmp(&self, other: &Self) -> Option<Ordering> { Some(Ordering::Equal) }"},{"DocComment":" }"},{"DocComment":" impl Ord for Equal {"},{"DocComment":"     fn cmp(&self, other: &Self) -> Ordering { Ordering::Equal }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" assert_eq!(Equal(\"self\").max(Equal(\"other\")).0, \"other\");"},{"DocComment":" ```"},{"Unknown":{"path":"must_use","args":null}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"cmp_ord_max\""}}],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"cmp_ord_max"},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":23,"beg":{"line":1009,"col":4},"end":{"line":1011,"col":20}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":6,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":0}}],"output":{"TypeVar":{"Free":0}}},"kind":{"TraitDecl":{"trait_ref":{"id":6,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"max","has_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":18,"item_meta":{"name":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"kind":"InherentImplBlock"}}},{"Ident":["with_capacity",0]}],"span":{"span":{"file_id":2,"beg":{"line":494,"col":4},"end":{"line":494,"col":49}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Constructs a new, empty `Vec<T>` with at least the specified capacity."},{"DocComment":""},{"DocComment":" The vector will be able to hold at least `capacity` elements without"},{"DocComment":" reallocating. This method is allowed to allocate for more elements than"},{"DocComment":" `capacity`. If `capacity` is zero, the vector will not allocate."},{"DocComment":""},{"DocComment":" It is important to note that although the returned vector has the"},{"DocComment":" minimum *capacity* specified, the vector will have a zero *length*. For"},{"DocComment":" an explanation of the difference between length and capacity, see"},{"DocComment":" *[Capacity and reallocation]*."},{"DocComment":""},{"DocComment":" If it is important to know the exact allocated capacity of a `Vec`,"},{"DocComment":" always use the [`capacity`] method after construction."},{"DocComment":""},{"DocComment":" For `Vec<T>` where `T` is a zero-sized type, there will be no allocation"},{"DocComment":" and the capacity will always be `usize::MAX`."},{"DocComment":""},{"DocComment":" [Capacity and reallocation]: #capacity-and-reallocation"},{"DocComment":" [`capacity`]: Vec::capacity"},{"DocComment":""},{"DocComment":" # Panics"},{"DocComment":""},{"DocComment":" Panics if the new capacity exceeds `isize::MAX` _bytes_."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let mut vec = Vec::with_capacity(10);"},{"DocComment":""},{"DocComment":" // The vector contains no items, even though it has capacity for more"},{"DocComment":" assert_eq!(vec.len(), 0);"},{"DocComment":" assert!(vec.capacity() >= 10);"},{"DocComment":""},{"DocComment":" // These are all done without reallocating..."},{"DocComment":" for i in 0..10 {"},{"DocComment":"     vec.push(i);"},{"DocComment":" }"},{"DocComment":" assert_eq!(vec.len(), 10);"},{"DocComment":" assert!(vec.capacity() >= 10);"},{"DocComment":""},{"DocComment":" // ...but this may make the vector reallocate"},{"DocComment":" vec.push(11);"},{"DocComment":" assert_eq!(vec.len(), 11);"},{"DocComment":" assert!(vec.capacity() >= 11);"},{"DocComment":""},{"DocComment":" // A vector of a zero-sized type will always over-allocate, since no"},{"DocComment":" // allocation is necessary"},{"DocComment":" let vec_units = Vec::<()>::with_capacity(10);"},{"DocComment":" assert_eq!(vec_units.capacity(), usize::MAX);"},{"DocComment":" ```"},{"Unknown":{"path":"must_use","args":null}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"vec_with_capacity\""}},{"Unknown":{"path":"track_caller","args":null}}],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"vec_with_capacity"},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Literal":{"Integer":"Usize"}}],"output":{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"Adt":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Err":null}},{"def_id":19,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}}],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["get",0]}],"span":{"span":{"file_id":12,"beg":{"line":570,"col":4},"end":{"line":572,"col":28}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns a reference to an element or subslice depending on the type of"},{"DocComment":" index."},{"DocComment":""},{"DocComment":" - If given a position, returns a reference to the element at that"},{"DocComment":"   position or `None` if out of bounds."},{"DocComment":" - If given a range, returns the subslice corresponding to that range,"},{"DocComment":"   or `None` if out of bounds."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let v = [10, 40, 30];"},{"DocComment":" assert_eq!(Some(&40), v.get(1));"},{"DocComment":" assert_eq!(Some(&[10, 40][..]), v.get(0..2));"},{"DocComment":" assert_eq!(None, v.get(3));"},{"DocComment":" assert_eq!(None, v.get(0..4));"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_no_implicit_autorefs","args":null}},{"Unknown":{"path":"must_use","args":null}}],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"},{"index":1,"name":"I"},{"index":2,"name":"Clause2_Output"}],"const_generics":[],"trait_clauses":[null,null,{"clause_id":2,"span":{"span":{"file_id":12,"beg":{"line":572,"col":11},"end":{"line":572,"col":27}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":8,"generics":{"regions":[],"types":[{"TypeVar":{"Free":1}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},"Shared"]},{"TypeVar":{"Free":1}}],"output":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":2}},"Shared"]}],"const_generics":[],"trait_refs":[null]}}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Err":null}},{"def_id":20,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["option",0]},{"Impl":{"Ty":{"params":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Ref":[{"Var":{"Bound":[0,0]}},{"TypeVar":{"Bound":[0,0]}},"Shared"]}],"const_generics":[],"trait_refs":[null]}}},"kind":"InherentImplBlock"}}},{"Ident":["copied",0]}],"span":{"span":{"file_id":13,"beg":{"line":1919,"col":4},"end":{"line":1921,"col":16}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Maps an `Option<&T>` to an `Option<T>` by copying the contents of the"},{"DocComment":" option."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let x = 12;"},{"DocComment":" let opt_x = Some(&x);"},{"DocComment":" assert_eq!(opt_x, Some(&12));"},{"DocComment":" let copied = opt_x.copied();"},{"DocComment":" assert_eq!(copied, Some(12));"},{"DocComment":" ```"},{"Unknown":{"path":"must_use","args":"\"`self` will be dropped if the result is not used\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null,{"clause_id":1,"span":{"span":{"file_id":13,"beg":{"line":1921,"col":11},"end":{"line":1921,"col":15}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":9,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]}],"const_generics":[],"trait_refs":[null]}}}],"output":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Err":null}},{"def_id":21,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["option",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}}],"const_generics":[],"trait_refs":[null]}}},"kind":"InherentImplBlock"}}},{"Ident":["unwrap_or",0]}],"span":{"span":{"file_id":13,"beg":{"line":1025,"col":4},"end":{"line":1025,"col":43}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns the contained [`Some`] value or a provided default."},{"DocComment":""},{"DocComment":" Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing"},{"DocComment":" the result of a function call, it is recommended to use [`unwrap_or_else`],"},{"DocComment":" which is lazily evaluated."},{"DocComment":""},{"DocComment":" [`unwrap_or_else`]: Option::unwrap_or_else"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" assert_eq!(Some(\"car\").unwrap_or(\"bike\"), \"car\");"},{"DocComment":" assert_eq!(None.unwrap_or(\"bike\"), \"bike\");"},{"DocComment":" ```"}],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}},{"TypeVar":{"Free":0}}],"output":{"TypeVar":{"Free":0}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Err":null}},{"def_id":22,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["rt",0]},{"Impl":{"Ty":{"params":{"regions":[{"index":0,"name":"'a"}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":7},"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["new_const",0]}],"span":{"span":{"file_id":28,"beg":{"line":226,"col":4},"end":{"line":226,"col":81}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":"'a"}],"types":[],"const_generics":[{"index":0,"name":"N","ty":{"Integer":"Usize"}}],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Static",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Var":{"Free":0}}],"trait_refs":[]}}},"Shared"]}],"output":{"Adt":{"id":{"Adt":7},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Err":null}},{"def_id":23,"item_meta":{"name":[{"Ident":["std",0]},{"Ident":["io",0]},{"Ident":["stdio",0]},{"Ident":["_print",0]}],"span":{"span":{"file_id":29,"beg":{"line":1274,"col":0},"end":{"line":1274,"col":39}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"Unknown":{"path":"doc","args":"hidden"}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Adt":{"id":{"Adt":7},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}}],"output":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Err":null}},{"def_id":24,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["Ord",0]},{"Ident":["cmp",0]}],"span":{"span":{"file_id":23,"beg":{"line":975,"col":4},"end":{"line":975,"col":44}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" This method returns an [`Ordering`] between `self` and `other`."},{"DocComment":""},{"DocComment":" By convention, `self.cmp(&other)` returns the ordering matching the expression"},{"DocComment":" `self <operator> other` if true."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" use std::cmp::Ordering;"},{"DocComment":""},{"DocComment":" assert_eq!(5.cmp(&10), Ordering::Less);"},{"DocComment":" assert_eq!(10.cmp(&5), Ordering::Greater);"},{"DocComment":" assert_eq!(5.cmp(&5), Ordering::Equal);"},{"DocComment":" ```"},{"Unknown":{"path":"must_use","args":null}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"ord_cmp_method\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"ord_cmp_method"},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":23,"beg":{"line":975,"col":4},"end":{"line":975,"col":44}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":6,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]},{"Ref":[{"Var":{"Free":1}},{"TypeVar":{"Free":0}},"Shared"]}],"output":{"Adt":{"id":{"Adt":8},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},"kind":{"TraitDecl":{"trait_ref":{"id":6,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"cmp","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},null,null,null,{"def_id":28,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["PartialEq",0]},{"Ident":["eq",0]}],"span":{"span":{"file_id":23,"beg":{"line":254,"col":4},"end":{"line":254,"col":38}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Tests for `self` and `other` values to be equal, and is used by `==`."},{"Unknown":{"path":"must_use","args":null}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"cmp_partialeq_eq\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"cmp_partialeq_eq"},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Rhs"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":23,"beg":{"line":254,"col":4},"end":{"line":254,"col":38}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":12,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]},{"Ref":[{"Var":{"Free":1}},{"TypeVar":{"Free":1}},"Shared"]}],"output":{"Literal":"Bool"}},"kind":{"TraitDecl":{"trait_ref":{"id":12,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}},"item_name":"eq","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},null,{"def_id":30,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["PartialOrd",0]},{"Ident":["partial_cmp",0]}],"span":{"span":{"file_id":23,"beg":{"line":1367,"col":4},"end":{"line":1367,"col":59}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" This method returns an ordering between `self` and `other` values if one exists."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" use std::cmp::Ordering;"},{"DocComment":""},{"DocComment":" let result = 1.0.partial_cmp(&2.0);"},{"DocComment":" assert_eq!(result, Some(Ordering::Less));"},{"DocComment":""},{"DocComment":" let result = 1.0.partial_cmp(&1.0);"},{"DocComment":" assert_eq!(result, Some(Ordering::Equal));"},{"DocComment":""},{"DocComment":" let result = 2.0.partial_cmp(&1.0);"},{"DocComment":" assert_eq!(result, Some(Ordering::Greater));"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" When comparison is impossible:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let result = f64::NAN.partial_cmp(&1.0);"},{"DocComment":" assert_eq!(result, None);"},{"DocComment":" ```"},{"Unknown":{"path":"must_use","args":null}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"cmp_partialord_cmp\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"cmp_partialord_cmp"},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Rhs"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":23,"beg":{"line":1367,"col":4},"end":{"line":1367,"col":59}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":11,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]},{"Ref":[{"Var":{"Free":1}},{"TypeVar":{"Free":1}},"Shared"]}],"output":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":8},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitDecl":{"trait_ref":{"id":11,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}},"item_name":"partial_cmp","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},null,null,null,null,null,null,null,null,{"def_id":39,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["clone",0]},{"Ident":["Clone",0]},{"Ident":["clone",0]}],"span":{"span":{"file_id":32,"beg":{"line":165,"col":4},"end":{"line":165,"col":28}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns a copy of the value."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # #![allow(noop_method_call)]"},{"DocComment":" let hello = \"Hello\"; // &str implements Clone"},{"DocComment":""},{"DocComment":" assert_eq!(\"Hello\", hello.clone());"},{"DocComment":" ```"},{"Unknown":{"path":"must_use","args":"\"cloning is often expensive and is not expected to have side effects\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"clone_fn"},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":32,"beg":{"line":165,"col":4},"end":{"line":165,"col":28}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":13,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]}],"output":{"TypeVar":{"Free":0}}},"kind":{"TraitDecl":{"trait_ref":{"id":13,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"clone","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},null,{"def_id":41,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["adapters",0]},{"Ident":["enumerate",0]},{"Impl":{"Trait":4}},{"Ident":["next",0]}],"span":{"span":{"file_id":8,"beg":{"line":79,"col":4},"end":{"line":79,"col":64}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" # Overflow Behavior"},{"DocComment":""},{"DocComment":" The method does no guarding against overflows, so enumerating more than"},{"DocComment":" `usize::MAX` elements either produces the wrong result or panics. If"},{"DocComment":" overflow checks are enabled, a panic is guaranteed."},{"DocComment":""},{"DocComment":" # Panics"},{"DocComment":""},{"DocComment":" Might panic if the index of the element overflows a `usize`."}],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"I"},{"index":1,"name":"Clause1_Item"}],"const_generics":[],"trait_clauses":[null,{"clause_id":1,"span":{"span":{"file_id":8,"beg":{"line":64,"col":7},"end":{"line":64,"col":15}},"generated_from_span":null},"origin":"WhereClauseOnImpl","trait_":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}},"Mut"]}],"output":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitImpl":{"impl_ref":{"id":4,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[null,{"kind":{"Clause":{"Free":1}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}]}},"trait_ref":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}},"item_name":"next","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},null,null,null,null,null,null,null,{"def_id":49,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["FnMut",0]},{"Ident":["call_mut",0]}],"span":{"span":{"file_id":33,"beg":{"line":166,"col":4},"end":{"line":166,"col":74}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Performs the call operation."}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Args"},{"index":2,"name":"Clause0_Clause0_Output"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":33,"beg":{"line":166,"col":4},"end":{"line":166,"col":74}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":14,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Mut"]},{"TypeVar":{"Free":1}}],"output":{"TypeVar":{"Free":2}}},"kind":{"TraitDecl":{"trait_ref":{"id":14,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}},"item_name":"call_mut","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":50,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["FnOnce",0]},{"Ident":["call_once",0]}],"span":{"span":{"file_id":33,"beg":{"line":250,"col":4},"end":{"line":250,"col":70}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Performs the call operation."}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Args"},{"index":2,"name":"Clause0_Output"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":33,"beg":{"line":250,"col":4},"end":{"line":250,"col":70}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":16,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"output":{"TypeVar":{"Free":2}}},"kind":{"TraitDecl":{"trait_ref":{"id":16,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}},"item_name":"call_once","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":51,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["Try",0]},{"Ident":["from_output",0]}],"span":{"span":{"file_id":34,"beg":{"line":190,"col":4},"end":{"line":190,"col":49}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Constructs the type from its `Output` type."},{"DocComment":""},{"DocComment":" This should be implemented consistently with the `branch` method"},{"DocComment":" such that applying the `?` operator will get back the original value:"},{"DocComment":" `Try::from_output(x).branch() --> ControlFlow::Continue(x)`."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" #![feature(try_trait_v2)]"},{"DocComment":" use std::ops::Try;"},{"DocComment":""},{"DocComment":" assert_eq!(<Result<_, String> as Try>::from_output(3), Ok(3));"},{"DocComment":" assert_eq!(<Option<_> as Try>::from_output(4), Some(4));"},{"DocComment":" assert_eq!("},{"DocComment":"     <std::ops::ControlFlow<String, _> as Try>::from_output(5),"},{"DocComment":"     std::ops::ControlFlow::Continue(5),"},{"DocComment":" );"},{"DocComment":""},{"DocComment":" # fn make_question_mark_work() -> Option<()> {"},{"DocComment":" assert_eq!(Option::from_output(4)?, 4);"},{"DocComment":" # None }"},{"DocComment":" # make_question_mark_work();"},{"DocComment":""},{"DocComment":" // This is used, for example, on the accumulator in `try_fold`:"},{"DocComment":" let r = std::iter::empty().try_fold(4, |_, ()| -> Option<_> { unreachable!() });"},{"DocComment":" assert_eq!(r, Some(4));"},{"DocComment":" ```"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"from_output"},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Clause0_Output"},{"index":2,"name":"Clause0_Residual"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":34,"beg":{"line":190,"col":4},"end":{"line":190,"col":49}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":15,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":1}}],"output":{"TypeVar":{"Free":0}}},"kind":{"TraitDecl":{"trait_ref":{"id":15,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}},"item_name":"from_output","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":52,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["Try",0]},{"Ident":["branch",0]}],"span":{"span":{"file_id":34,"beg":{"line":217,"col":4},"end":{"line":217,"col":65}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Used in `?` to decide whether the operator should produce a value"},{"DocComment":" (because this returned [`ControlFlow::Continue`])"},{"DocComment":" or propagate a value back to the caller"},{"DocComment":" (because this returned [`ControlFlow::Break`])."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" #![feature(try_trait_v2)]"},{"DocComment":" use std::ops::{ControlFlow, Try};"},{"DocComment":""},{"DocComment":" assert_eq!(Ok::<_, String>(3).branch(), ControlFlow::Continue(3));"},{"DocComment":" assert_eq!(Err::<String, _>(3).branch(), ControlFlow::Break(Err(3)));"},{"DocComment":""},{"DocComment":" assert_eq!(Some(3).branch(), ControlFlow::Continue(3));"},{"DocComment":" assert_eq!(None::<String>.branch(), ControlFlow::Break(None));"},{"DocComment":""},{"DocComment":" assert_eq!(ControlFlow::<String, _>::Continue(3).branch(), ControlFlow::Continue(3));"},{"DocComment":" assert_eq!("},{"DocComment":"     ControlFlow::<_, String>::Break(3).branch(),"},{"DocComment":"     ControlFlow::Break(ControlFlow::Break(3)),"},{"DocComment":" );"},{"DocComment":" ```"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"branch"},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Clause0_Output"},{"index":2,"name":"Clause0_Residual"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":34,"beg":{"line":217,"col":4},"end":{"line":217,"col":65}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":15,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}}],"output":{"Adt":{"id":{"Adt":9},"generics":{"regions":[],"types":[{"TypeVar":{"Free":2}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[null,null]}}}},"kind":{"TraitDecl":{"trait_ref":{"id":15,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}},"item_name":"branch","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":53,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["FromResidual",0]},{"Ident":["from_residual",0]}],"span":{"span":{"file_id":34,"beg":{"line":330,"col":4},"end":{"line":330,"col":42}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Constructs the type from a compatible `Residual` type."},{"DocComment":""},{"DocComment":" This should be implemented consistently with the `branch` method such"},{"DocComment":" that applying the `?` operator will get back an equivalent residual:"},{"DocComment":" `FromResidual::from_residual(r).branch() --> ControlFlow::Break(r)`."},{"DocComment":" (The residual is not mandated to be *identical* when interconversion is involved.)"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" #![feature(try_trait_v2)]"},{"DocComment":" use std::ops::{ControlFlow, FromResidual};"},{"DocComment":""},{"DocComment":" assert_eq!(Result::<String, i64>::from_residual(Err(3_u8)), Err(3));"},{"DocComment":" assert_eq!(Option::<String>::from_residual(None), None);"},{"DocComment":" assert_eq!("},{"DocComment":"     ControlFlow::<_, String>::from_residual(ControlFlow::Break(5)),"},{"DocComment":"     ControlFlow::Break(5),"},{"DocComment":" );"},{"DocComment":" ```"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"from_residual"},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"R"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":34,"beg":{"line":330,"col":4},"end":{"line":330,"col":42}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":19,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":1}}],"output":{"TypeVar":{"Free":0}}},"kind":{"TraitDecl":{"trait_ref":{"id":19,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}},"item_name":"from_residual","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},null,{"def_id":55,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Ident":["Step",0]},{"Ident":["steps_between",0]}],"span":{"span":{"file_id":24,"beg":{"line":39,"col":4},"end":{"line":39,"col":73}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns the bounds on the number of *successor* steps required to get from `start` to `end`"},{"DocComment":" like [`Iterator::size_hint()`][Iterator::size_hint()]."},{"DocComment":""},{"DocComment":" Returns `(usize::MAX, None)` if the number of steps would overflow `usize`, or is infinite."},{"DocComment":""},{"DocComment":" # Invariants"},{"DocComment":""},{"DocComment":" For any `a`, `b`, and `n`:"},{"DocComment":""},{"DocComment":" * `steps_between(&a, &b) == (n, Some(n))` if and only if `Step::forward_checked(&a, n) == Some(b)`"},{"DocComment":" * `steps_between(&a, &b) == (n, Some(n))` if and only if `Step::backward_checked(&b, n) == Some(a)`"},{"DocComment":" * `steps_between(&a, &b) == (n, Some(n))` only if `a <= b`"},{"DocComment":"   * Corollary: `steps_between(&a, &b) == (0, Some(0))` if and only if `a == b`"},{"DocComment":" * `steps_between(&a, &b) == (0, None)` if `a > b`"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":24,"beg":{"line":39,"col":4},"end":{"line":39,"col":73}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]},{"Ref":[{"Var":{"Free":1}},{"TypeVar":{"Free":0}},"Shared"]}],"output":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[]}}}},"kind":{"TraitDecl":{"trait_ref":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"steps_between","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":56,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Ident":["Step",0]},{"Ident":["forward_checked",0]}],"span":{"span":{"file_id":24,"beg":{"line":57,"col":4},"end":{"line":57,"col":66}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns the value that would be obtained by taking the *successor*"},{"DocComment":" of `self` `count` times."},{"DocComment":""},{"DocComment":" If this would overflow the range of values supported by `Self`, returns `None`."},{"DocComment":""},{"DocComment":" # Invariants"},{"DocComment":""},{"DocComment":" For any `a`, `n`, and `m`:"},{"DocComment":""},{"DocComment":" * `Step::forward_checked(a, n).and_then(|x| Step::forward_checked(x, m)) == Step::forward_checked(a, m).and_then(|x| Step::forward_checked(x, n))`"},{"DocComment":" * `Step::forward_checked(a, n).and_then(|x| Step::forward_checked(x, m)) == try { Step::forward_checked(a, n.checked_add(m)) }`"},{"DocComment":""},{"DocComment":" For any `a` and `n`:"},{"DocComment":""},{"DocComment":" * `Step::forward_checked(a, n) == (0..n).try_fold(a, |x, _| Step::forward_checked(&x, 1))`"},{"DocComment":"   * Corollary: `Step::forward_checked(a, 0) == Some(a)`"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":24,"beg":{"line":57,"col":4},"end":{"line":57,"col":66}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}},{"Literal":{"Integer":"Usize"}}],"output":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitDecl":{"trait_ref":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"forward_checked","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},null,null,{"def_id":59,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Ident":["Step",0]},{"Ident":["backward_checked",0]}],"span":{"span":{"file_id":24,"beg":{"line":127,"col":4},"end":{"line":127,"col":67}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns the value that would be obtained by taking the *predecessor*"},{"DocComment":" of `self` `count` times."},{"DocComment":""},{"DocComment":" If this would overflow the range of values supported by `Self`, returns `None`."},{"DocComment":""},{"DocComment":" # Invariants"},{"DocComment":""},{"DocComment":" For any `a`, `n`, and `m`:"},{"DocComment":""},{"DocComment":" * `Step::backward_checked(a, n).and_then(|x| Step::backward_checked(x, m)) == n.checked_add(m).and_then(|x| Step::backward_checked(a, x))`"},{"DocComment":" * `Step::backward_checked(a, n).and_then(|x| Step::backward_checked(x, m)) == try { Step::backward_checked(a, n.checked_add(m)?) }`"},{"DocComment":""},{"DocComment":" For any `a` and `n`:"},{"DocComment":""},{"DocComment":" * `Step::backward_checked(a, n) == (0..n).try_fold(a, |x, _| Step::backward_checked(x, 1))`"},{"DocComment":"   * Corollary: `Step::backward_checked(a, 0) == Some(a)`"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":24,"beg":{"line":127,"col":4},"end":{"line":127,"col":67}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}},{"Literal":{"Integer":"Usize"}}],"output":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitDecl":{"trait_ref":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"backward_checked","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},null,null,{"def_id":62,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":7}},{"Ident":["next",0]}],"span":{"span":{"file_id":24,"beg":{"line":848,"col":4},"end":{"line":848,"col":35}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"A"}],"const_generics":[],"trait_clauses":[null,{"clause_id":1,"span":{"span":{"file_id":24,"beg":{"line":844,"col":8},"end":{"line":844,"col":12}},"generated_from_span":null},"origin":"WhereClauseOnImpl","trait_":{"regions":[],"skip_binder":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}},"Mut"]}],"output":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitImpl":{"impl_ref":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null,{"kind":{"Clause":{"Free":1}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}]}},"trait_ref":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"next","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},null,null,null,null,null,null,null,null,null,{"def_id":72,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["collect",0]},{"Impl":{"Trait":3}},{"Ident":["into_iter",0]}],"span":{"span":{"file_id":19,"beg":{"line":319,"col":4},"end":{"line":319,"col":27}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"I"},{"index":1,"name":"Clause1_Item"}],"const_generics":[],"trait_clauses":[null,{"clause_id":1,"span":{"span":{"file_id":19,"beg":{"line":314,"col":8},"end":{"line":314,"col":16}},"generated_from_span":null},"origin":"WhereClauseOnImpl","trait_":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}}],"output":{"TypeVar":{"Free":0}}},"kind":{"TraitImpl":{"impl_ref":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[null,{"kind":{"Clause":{"Free":1}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}]}},"trait_ref":{"id":4,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"into_iter","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{"def_id":148,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["default",0]},{"Ident":["Default",0]},{"Ident":["default",0]}],"span":{"span":{"file_id":37,"beg":{"line":139,"col":4},"end":{"line":139,"col":25}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns the \"default value\" for a type."},{"DocComment":""},{"DocComment":" Default values are often some kind of initial value, identity value, or anything else that"},{"DocComment":" may make sense as a default."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" Using built-in default values:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let i: i8 = Default::default();"},{"DocComment":" let (x, y): (Option<String>, f64) = Default::default();"},{"DocComment":" let (a, b, (c, d)): (i32, u32, (bool, bool)) = Default::default();"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" Making your own:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # #[allow(dead_code)]"},{"DocComment":" enum Kind {"},{"DocComment":"     A,"},{"DocComment":"     B,"},{"DocComment":"     C,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl Default for Kind {"},{"DocComment":"     fn default() -> Self { Kind::A }"},{"DocComment":" }"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"default_fn\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"default_fn"},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":37,"beg":{"line":139,"col":4},"end":{"line":139,"col":25}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":23,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[],"output":{"TypeVar":{"Free":0}}},"kind":{"TraitDecl":{"trait_ref":{"id":23,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"default","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":149,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["collect",0]},{"Ident":["FromIterator",0]},{"Ident":["from_iter",0]}],"span":{"span":{"file_id":19,"beg":{"line":152,"col":4},"end":{"line":152,"col":61}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Creates a value from an iterator."},{"DocComment":""},{"DocComment":" See the [module-level documentation] for more."},{"DocComment":""},{"DocComment":" [module-level documentation]: crate::iter"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let five_fives = std::iter::repeat(5).take(5);"},{"DocComment":""},{"DocComment":" let v = Vec::from_iter(five_fives);"},{"DocComment":""},{"DocComment":" assert_eq!(v, vec![5, 5, 5, 5, 5]);"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"from_iter_fn\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"from_iter_fn"},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"A"},{"index":2,"name":"T"},{"index":3,"name":"Clause2_IntoIter"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":19,"beg":{"line":152,"col":4},"end":{"line":152,"col":61}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":20,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},null,{"clause_id":2,"span":{"span":{"file_id":19,"beg":{"line":152,"col":20},"end":{"line":152,"col":42}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":4,"generics":{"regions":[],"types":[{"TypeVar":{"Free":2}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":3}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[null]},"inputs":[{"TypeVar":{"Free":2}}],"output":{"TypeVar":{"Free":0}}},"kind":{"TraitDecl":{"trait_ref":{"id":20,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}},"item_name":"from_iter","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":150,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["collect",0]},{"Ident":["Extend",0]},{"Ident":["extend",0]}],"span":{"span":{"file_id":19,"beg":{"line":413,"col":4},"end":{"line":413,"col":61}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Extends a collection with the contents of an iterator."},{"DocComment":""},{"DocComment":" As this is the only required method for this trait, the [trait-level] docs"},{"DocComment":" contain more details."},{"DocComment":""},{"DocComment":" [trait-level]: Extend"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" // You can extend a String with some chars:"},{"DocComment":" let mut message = String::from(\"abc\");"},{"DocComment":""},{"DocComment":" message.extend(['d', 'e', 'f'].iter());"},{"DocComment":""},{"DocComment":" assert_eq!(\"abcdef\", &message);"},{"DocComment":" ```"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"Self"},{"index":1,"name":"A"},{"index":2,"name":"T"},{"index":3,"name":"Clause2_IntoIter"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":19,"beg":{"line":413,"col":4},"end":{"line":413,"col":61}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":22,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},null,{"clause_id":2,"span":{"span":{"file_id":19,"beg":{"line":413,"col":17},"end":{"line":413,"col":39}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":4,"generics":{"regions":[],"types":[{"TypeVar":{"Free":2}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":3}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[null]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Mut"]},{"TypeVar":{"Free":2}}],"output":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},"kind":{"TraitDecl":{"trait_ref":{"id":22,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}},"item_name":"extend","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},null,null,null,{"def_id":154,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["double_ended",0]},{"Ident":["DoubleEndedIterator",0]},{"Ident":["next_back",0]}],"span":{"span":{"file_id":38,"beg":{"line":94,"col":4},"end":{"line":94,"col":50}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Removes and returns an element from the end of the iterator."},{"DocComment":""},{"DocComment":" Returns `None` when there are no more elements."},{"DocComment":""},{"DocComment":" The [trait-level] docs contain more details."},{"DocComment":""},{"DocComment":" [trait-level]: DoubleEndedIterator"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" Basic usage:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let numbers = vec![1, 2, 3, 4, 5, 6];"},{"DocComment":""},{"DocComment":" let mut iter = numbers.iter();"},{"DocComment":""},{"DocComment":" assert_eq!(Some(&1), iter.next());"},{"DocComment":" assert_eq!(Some(&6), iter.next_back());"},{"DocComment":" assert_eq!(Some(&5), iter.next_back());"},{"DocComment":" assert_eq!(Some(&2), iter.next());"},{"DocComment":" assert_eq!(Some(&3), iter.next());"},{"DocComment":" assert_eq!(Some(&4), iter.next());"},{"DocComment":" assert_eq!(None, iter.next());"},{"DocComment":" assert_eq!(None, iter.next_back());"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" # Remarks"},{"DocComment":""},{"DocComment":" The elements yielded by `DoubleEndedIterator`'s methods may differ from"},{"DocComment":" the ones yielded by [`Iterator`]'s methods:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let vec = vec![(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b')];"},{"DocComment":" let uniq_by_fst_comp = || {"},{"DocComment":"     let mut seen = std::collections::HashSet::new();"},{"DocComment":"     vec.iter().copied().filter(move |x| seen.insert(x.0))"},{"DocComment":" };"},{"DocComment":""},{"DocComment":" assert_eq!(uniq_by_fst_comp().last(), Some((2, 'a')));"},{"DocComment":" assert_eq!(uniq_by_fst_comp().next_back(), Some((2, 'b')));"},{"DocComment":""},{"DocComment":" assert_eq!("},{"DocComment":"     uniq_by_fst_comp().fold(vec![], |mut v, x| {v.push(x); v}),"},{"DocComment":"     vec![(1, 'a'), (2, 'a')]"},{"DocComment":" );"},{"DocComment":" assert_eq!("},{"DocComment":"     uniq_by_fst_comp().rfold(vec![], |mut v, x| {v.push(x); v}),"},{"DocComment":"     vec![(2, 'b'), (1, 'c')]"},{"DocComment":" );"},{"DocComment":" ```"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Clause0_Clause0_Item"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":38,"beg":{"line":94,"col":4},"end":{"line":94,"col":50}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":24,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Mut"]}],"output":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitDecl":{"trait_ref":{"id":24,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}},"item_name":"next_back","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},null,null,null,null,null,null,null,{"def_id":162,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["get",0]}],"span":{"span":{"file_id":25,"beg":{"line":180,"col":4},"end":{"line":180,"col":53}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns a shared reference to the output at this location, if in"},{"DocComment":" bounds."}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"Self"},{"index":1,"name":"T"},{"index":2,"name":"Clause0_Output"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":25,"beg":{"line":180,"col":4},"end":{"line":180,"col":53}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":8,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}},{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":1}},"Shared"]}],"output":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":2}},"Shared"]}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitDecl":{"trait_ref":{"id":8,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}},"item_name":"get","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":163,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["get_mut",0]}],"span":{"span":{"file_id":25,"beg":{"line":185,"col":4},"end":{"line":185,"col":65}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns a mutable reference to the output at this location, if in"},{"DocComment":" bounds."}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"Self"},{"index":1,"name":"T"},{"index":2,"name":"Clause0_Output"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":25,"beg":{"line":185,"col":4},"end":{"line":185,"col":65}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":8,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}},{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":1}},"Mut"]}],"output":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":2}},"Mut"]}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitDecl":{"trait_ref":{"id":8,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}},"item_name":"get_mut","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":164,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["get_unchecked",0]}],"span":{"span":{"file_id":25,"beg":{"line":195,"col":4},"end":{"line":195,"col":74}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns a pointer to the output at this location, without"},{"DocComment":" performing any bounds checking."},{"DocComment":""},{"DocComment":" Calling this method with an out-of-bounds index or a dangling `slice` pointer"},{"DocComment":" is *[undefined behavior]* even if the resulting pointer is not used."},{"DocComment":""},{"DocComment":" [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":true,"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"T"},{"index":2,"name":"Clause0_Output"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":25,"beg":{"line":195,"col":4},"end":{"line":195,"col":74}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":8,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}},{"RawPtr":[{"TypeVar":{"Free":1}},"Shared"]}],"output":{"RawPtr":[{"TypeVar":{"Free":2}},"Shared"]}},"kind":{"TraitDecl":{"trait_ref":{"id":8,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}},"item_name":"get_unchecked","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":165,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["get_unchecked_mut",0]}],"span":{"span":{"file_id":25,"beg":{"line":205,"col":4},"end":{"line":205,"col":74}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns a mutable pointer to the output at this location, without"},{"DocComment":" performing any bounds checking."},{"DocComment":""},{"DocComment":" Calling this method with an out-of-bounds index or a dangling `slice` pointer"},{"DocComment":" is *[undefined behavior]* even if the resulting pointer is not used."},{"DocComment":""},{"DocComment":" [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":true,"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"T"},{"index":2,"name":"Clause0_Output"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":25,"beg":{"line":205,"col":4},"end":{"line":205,"col":74}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":8,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}},{"RawPtr":[{"TypeVar":{"Free":1}},"Mut"]}],"output":{"RawPtr":[{"TypeVar":{"Free":2}},"Mut"]}},"kind":{"TraitDecl":{"trait_ref":{"id":8,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}},"item_name":"get_unchecked_mut","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":166,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["index",0]}],"span":{"span":{"file_id":25,"beg":{"line":211,"col":4},"end":{"line":211,"col":47}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns a shared reference to the output at this location, panicking"},{"DocComment":" if out of bounds."},{"Unknown":{"path":"track_caller","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"Self"},{"index":1,"name":"T"},{"index":2,"name":"Clause0_Output"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":25,"beg":{"line":211,"col":4},"end":{"line":211,"col":47}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":8,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}},{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":1}},"Shared"]}],"output":{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":2}},"Shared"]}},"kind":{"TraitDecl":{"trait_ref":{"id":8,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}},"item_name":"index","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":167,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["index_mut",0]}],"span":{"span":{"file_id":25,"beg":{"line":217,"col":4},"end":{"line":217,"col":59}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns a mutable reference to the output at this location, panicking"},{"DocComment":" if out of bounds."},{"Unknown":{"path":"track_caller","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"Self"},{"index":1,"name":"T"},{"index":2,"name":"Clause0_Output"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":25,"beg":{"line":217,"col":4},"end":{"line":217,"col":59}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":8,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}},{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":1}},"Mut"]}],"output":{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":2}},"Mut"]}},"kind":{"TraitDecl":{"trait_ref":{"id":8,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}},"item_name":"index_mut","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":168,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":9}},{"Ident":["get",0]}],"span":{"span":{"file_id":25,"beg":{"line":226,"col":4},"end":{"line":226,"col":43}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Literal":{"Integer":"Usize"}},{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"output":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitImpl":{"impl_ref":{"id":9,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"trait_ref":{"id":8,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"get","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":169,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":9}},{"Ident":["get_mut",0]}],"span":{"span":{"file_id":25,"beg":{"line":232,"col":4},"end":{"line":232,"col":55}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Literal":{"Integer":"Usize"}},{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},"Mut"]}],"output":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Mut"]}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitImpl":{"impl_ref":{"id":9,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"trait_ref":{"id":8,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"get_mut","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":170,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":9}},{"Ident":["get_unchecked",0]}],"span":{"span":{"file_id":25,"beg":{"line":242,"col":4},"end":{"line":242,"col":64}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":true,"generics":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Literal":{"Integer":"Usize"}},{"RawPtr":[{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"output":{"RawPtr":[{"TypeVar":{"Free":0}},"Shared"]}},"kind":{"TraitImpl":{"impl_ref":{"id":9,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"trait_ref":{"id":8,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"get_unchecked","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":171,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":9}},{"Ident":["get_unchecked_mut",0]}],"span":{"span":{"file_id":25,"beg":{"line":261,"col":4},"end":{"line":261,"col":64}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":true,"generics":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Literal":{"Integer":"Usize"}},{"RawPtr":[{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},"Mut"]}],"output":{"RawPtr":[{"TypeVar":{"Free":0}},"Mut"]}},"kind":{"TraitImpl":{"impl_ref":{"id":9,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"trait_ref":{"id":8,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"get_unchecked_mut","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":172,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":9}},{"Ident":["index",0]}],"span":{"span":{"file_id":25,"beg":{"line":272,"col":4},"end":{"line":272,"col":37}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Literal":{"Integer":"Usize"}},{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"output":{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]}},"kind":{"TraitImpl":{"impl_ref":{"id":9,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"trait_ref":{"id":8,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"index","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":173,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":9}},{"Ident":["index_mut",0]}],"span":{"span":{"file_id":25,"beg":{"line":278,"col":4},"end":{"line":278,"col":49}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Literal":{"Integer":"Usize"}},{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},"Mut"]}],"output":{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Mut"]}},"kind":{"TraitImpl":{"impl_ref":{"id":9,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"trait_ref":{"id":8,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"index_mut","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":174,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":6}},{"Ident":["cmp",0]}],"span":{"span":{"file_id":23,"beg":{"line":1938,"col":16},"end":{"line":1938,"col":55}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Literal":{"Integer":"Usize"}},"Shared"]},{"Ref":[{"Var":{"Free":1}},{"Literal":{"Integer":"Usize"}},"Shared"]}],"output":{"Adt":{"id":{"Adt":8},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},"kind":{"TraitImpl":{"impl_ref":{"id":6,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},"trait_ref":{"id":6,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}},"item_name":"cmp","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":175,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":14}},{"Ident":["eq",0]}],"span":{"span":{"file_id":23,"beg":{"line":1813,"col":16},"end":{"line":1813,"col":50}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Literal":{"Integer":"Usize"}},"Shared"]},{"Ref":[{"Var":{"Free":1}},{"Literal":{"Integer":"Usize"}},"Shared"]}],"output":{"Literal":"Bool"}},"kind":{"TraitImpl":{"impl_ref":{"id":14,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},"trait_ref":{"id":12,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}},"item_name":"eq","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},null,{"def_id":177,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":13}},{"Ident":["partial_cmp",0]}],"span":{"span":{"file_id":23,"beg":{"line":1928,"col":16},"end":{"line":1928,"col":71}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Literal":{"Integer":"Usize"}},"Shared"]},{"Ref":[{"Var":{"Free":1}},{"Literal":{"Integer":"Usize"}},"Shared"]}],"output":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":8},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitImpl":{"impl_ref":{"id":13,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},"trait_ref":{"id":11,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}},"item_name":"partial_cmp","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},null,null,null,null,null,null,null,null,{"def_id":186,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["clone",0]},{"Ident":["impls",0]},{"Impl":{"Trait":15}},{"Ident":["clone",0]}],"span":{"span":{"file_id":32,"beg":{"line":504,"col":20},"end":{"line":504,"col":43}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Always","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Literal":"Bool"},"Shared"]}],"output":{"Literal":"Bool"}},"kind":{"TraitImpl":{"impl_ref":{"id":15,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},"trait_ref":{"id":13,"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}},"item_name":"clone","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":187,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["bit",0]},{"Impl":{"Trait":5}},{"Ident":["not",0]}],"span":{"span":{"file_id":21,"beg":{"line":14,"col":12},"end":{"line":14,"col":52}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Literal":"Bool"},"Shared"]}],"output":{"Literal":"Bool"}},"kind":{"TraitImpl":{"impl_ref":{"id":5,"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}},"trait_ref":{"id":5,"generics":{"regions":[],"types":[{"Ref":[{"Var":{"Free":0}},{"Literal":"Bool"},"Shared"]},{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}},"item_name":"not","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":188,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["bit",0]},{"Impl":{"Trait":16}},{"Ident":["not",0]}],"span":{"span":{"file_id":20,"beg":{"line":61,"col":12},"end":{"line":61,"col":30}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Literal":"Bool"}],"output":{"Literal":"Bool"}},"kind":{"TraitImpl":{"impl_ref":{"id":16,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},"trait_ref":{"id":5,"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}},"item_name":"not","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":189,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":8}},{"Ident":["steps_between",0]}],"span":{"span":{"file_id":24,"beg":{"line":262,"col":16},"end":{"line":262,"col":84}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Literal":{"Integer":"Usize"}},"Shared"]},{"Ref":[{"Var":{"Free":1}},{"Literal":{"Integer":"Usize"}},"Shared"]}],"output":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[]}}}},"kind":{"TraitImpl":{"impl_ref":{"id":8,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},"trait_ref":{"id":7,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}},"item_name":"steps_between","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":190,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":8}},{"Ident":["forward_checked",0]}],"span":{"span":{"file_id":24,"beg":{"line":273,"col":16},"end":{"line":273,"col":73}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Literal":{"Integer":"Usize"}},{"Literal":{"Integer":"Usize"}}],"output":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitImpl":{"impl_ref":{"id":8,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},"trait_ref":{"id":7,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}},"item_name":"forward_checked","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},null,null,{"def_id":193,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":8}},{"Ident":["backward_checked",0]}],"span":{"span":{"file_id":24,"beg":{"line":281,"col":16},"end":{"line":281,"col":74}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Literal":{"Integer":"Usize"}},{"Literal":{"Integer":"Usize"}}],"output":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitImpl":{"impl_ref":{"id":8,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},"trait_ref":{"id":7,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}},"item_name":"backward_checked","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},null,null,{"def_id":196,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["clone",0]},{"Ident":["impls",0]},{"Impl":{"Trait":17}},{"Ident":["clone",0]}],"span":{"span":{"file_id":32,"beg":{"line":504,"col":20},"end":{"line":504,"col":43}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Always","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Literal":{"Integer":"Usize"}},"Shared"]}],"output":{"Literal":{"Integer":"Usize"}}},"kind":{"TraitImpl":{"impl_ref":{"id":17,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},"trait_ref":{"id":13,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}},"item_name":"clone","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":197,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["accum",0]},{"Ident":["Sum",0]},{"Ident":["sum",0]}],"span":{"span":{"file_id":40,"beg":{"line":21,"col":4},"end":{"line":21,"col":51}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Takes an iterator and generates `Self` from the elements by \"summing up\""},{"DocComment":" the items."}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"A"},{"index":2,"name":"I"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":40,"beg":{"line":21,"col":4},"end":{"line":21,"col":51}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":26,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},null,{"clause_id":2,"span":{"span":{"file_id":40,"beg":{"line":21,"col":14},"end":{"line":21,"col":32}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":2}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[null]},"inputs":[{"TypeVar":{"Free":2}}],"output":{"TypeVar":{"Free":0}}},"kind":{"TraitDecl":{"trait_ref":{"id":26,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}},"item_name":"sum","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":198,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["accum",0]},{"Ident":["Product",0]},{"Ident":["product",0]}],"span":{"span":{"file_id":40,"beg":{"line":42,"col":4},"end":{"line":42,"col":55}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Takes an iterator and generates `Self` from the elements by multiplying"},{"DocComment":" the items."}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"A"},{"index":2,"name":"I"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":40,"beg":{"line":42,"col":4},"end":{"line":42,"col":55}},"generated_from_span":null},"origin":"TraitSelf","trait_":{"regions":[],"skip_binder":{"id":27,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},null,{"clause_id":2,"span":{"span":{"file_id":40,"beg":{"line":42,"col":18},"end":{"line":42,"col":36}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":2}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[null]},"inputs":[{"TypeVar":{"Free":2}}],"output":{"TypeVar":{"Free":0}}},"kind":{"TraitDecl":{"trait_ref":{"id":27,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}},"item_name":"product","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":199,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}},{"Ident":["next",0]}],"span":{"span":{"file_id":18,"beg":{"line":156,"col":12},"end":{"line":156,"col":47}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":"'a"},{"index":1,"name":null}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":1}},{"Adt":{"id":{"Adt":4},"generics":{"regions":[{"Var":{"Free":0}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}},"Mut"]}],"output":{"Adt":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitImpl":{"impl_ref":{"id":2,"generics":{"regions":[{"Var":{"Free":0}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"trait_ref":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":[{"Var":{"Free":0}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}},{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]}],"const_generics":[],"trait_refs":[]}},"item_name":"next","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{"def_id":221,"item_meta":{"name":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Trait":1}},{"Ident":["deref",0]}],"span":{"span":{"file_id":2,"beg":{"line":3298,"col":4},"end":{"line":3298,"col":27}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"},{"index":1,"name":"A"}],"const_generics":[],"trait_clauses":[null,null,null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}],"output":{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},"Shared"]}},"kind":{"TraitImpl":{"impl_ref":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[null,null,null]}},"trait_ref":{"id":2,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[null,null,null]}}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}},"item_name":"deref","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":222,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}},{"Ident":["enumerate",0]}],"span":{"span":{"file_id":18,"beg":{"line":152,"col":8},"end":{"line":152,"col":45}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Creates an iterator which gives the current iteration count as well as"},{"DocComment":" the next value."},{"DocComment":""},{"DocComment":" The iterator returned yields pairs `(i, val)`, where `i` is the"},{"DocComment":" current index of iteration and `val` is the value returned by the"},{"DocComment":" iterator."},{"DocComment":""},{"DocComment":" `enumerate()` keeps its count as a [`usize`]. If you want to count by a"},{"DocComment":" different sized integer, the [`zip`] function provides similar"},{"DocComment":" functionality."},{"DocComment":""},{"DocComment":" # Overflow Behavior"},{"DocComment":""},{"DocComment":" The method does no guarding against overflows, so enumerating more than"},{"DocComment":" [`usize::MAX`] elements either produces the wrong result or panics. If"},{"DocComment":" overflow checks are enabled, a panic is guaranteed."},{"DocComment":""},{"DocComment":" # Panics"},{"DocComment":""},{"DocComment":" The returned iterator might panic if the to-be-returned index would"},{"DocComment":" overflow a [`usize`]."},{"DocComment":""},{"DocComment":" [`zip`]: Iterator::zip"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let a = ['a', 'b', 'c'];"},{"DocComment":""},{"DocComment":" let mut iter = a.into_iter().enumerate();"},{"DocComment":""},{"DocComment":" assert_eq!(iter.next(), Some((0, 'a')));"},{"DocComment":" assert_eq!(iter.next(), Some((1, 'b')));"},{"DocComment":" assert_eq!(iter.next(), Some((2, 'c')));"},{"DocComment":" assert_eq!(iter.next(), None);"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"enumerate_method\""}}],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"enumerate_method"},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":"'a"}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null,null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Adt":{"id":{"Adt":4},"generics":{"regions":[{"Var":{"Free":0}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}}],"output":{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":[{"Var":{"Free":0}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitImpl":{"impl_ref":{"id":2,"generics":{"regions":[{"Var":{"Free":0}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"trait_ref":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":[{"Var":{"Free":0}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}},{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]}],"const_generics":[],"trait_refs":[]}},"item_name":"enumerate","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":223,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["adapters",0]},{"Ident":["enumerate",0]},{"Impl":{"Trait":4}},{"Ident":["enumerate",0]}],"span":{"span":{"file_id":8,"beg":{"line":62,"col":0},"end":{"line":64,"col":16}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Creates an iterator which gives the current iteration count as well as"},{"DocComment":" the next value."},{"DocComment":""},{"DocComment":" The iterator returned yields pairs `(i, val)`, where `i` is the"},{"DocComment":" current index of iteration and `val` is the value returned by the"},{"DocComment":" iterator."},{"DocComment":""},{"DocComment":" `enumerate()` keeps its count as a [`usize`]. If you want to count by a"},{"DocComment":" different sized integer, the [`zip`] function provides similar"},{"DocComment":" functionality."},{"DocComment":""},{"DocComment":" # Overflow Behavior"},{"DocComment":""},{"DocComment":" The method does no guarding against overflows, so enumerating more than"},{"DocComment":" [`usize::MAX`] elements either produces the wrong result or panics. If"},{"DocComment":" overflow checks are enabled, a panic is guaranteed."},{"DocComment":""},{"DocComment":" # Panics"},{"DocComment":""},{"DocComment":" The returned iterator might panic if the to-be-returned index would"},{"DocComment":" overflow a [`usize`]."},{"DocComment":""},{"DocComment":" [`zip`]: Iterator::zip"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let a = ['a', 'b', 'c'];"},{"DocComment":""},{"DocComment":" let mut iter = a.into_iter().enumerate();"},{"DocComment":""},{"DocComment":" assert_eq!(iter.next(), Some((0, 'a')));"},{"DocComment":" assert_eq!(iter.next(), Some((1, 'b')));"},{"DocComment":" assert_eq!(iter.next(), Some((2, 'c')));"},{"DocComment":" assert_eq!(iter.next(), None);"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"enumerate_method\""}}],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"enumerate_method"},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"I"},{"index":1,"name":"Clause1_Item"}],"const_generics":[],"trait_clauses":[null,{"clause_id":1,"span":{"span":{"file_id":8,"beg":{"line":64,"col":7},"end":{"line":64,"col":15}},"generated_from_span":null},"origin":"WhereClauseOnImpl","trait_":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}}],"output":{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitImpl":{"impl_ref":{"id":4,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[null,{"kind":{"Clause":{"Free":1}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}]}},"trait_ref":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}},"item_name":"enumerate","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":224,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":6}},{"Ident":["max",0]}],"span":{"span":{"file_id":23,"beg":{"line":1936,"col":12},"end":{"line":1936,"col":27}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Compares and returns the maximum of two values."},{"DocComment":""},{"DocComment":" Returns the second argument if the comparison determines them to be equal."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" assert_eq!(1.max(2), 2);"},{"DocComment":" assert_eq!(2.max(2), 2);"},{"DocComment":" ```"},{"DocComment":" ```"},{"DocComment":" use std::cmp::Ordering;"},{"DocComment":""},{"DocComment":" #[derive(Eq)]"},{"DocComment":" struct Equal(&'static str);"},{"DocComment":""},{"DocComment":" impl PartialEq for Equal {"},{"DocComment":"     fn eq(&self, other: &Self) -> bool { true }"},{"DocComment":" }"},{"DocComment":" impl PartialOrd for Equal {"},{"DocComment":"     fn partial_cmp(&self, other: &Self) -> Option<Ordering> { Some(Ordering::Equal) }"},{"DocComment":" }"},{"DocComment":" impl Ord for Equal {"},{"DocComment":"     fn cmp(&self, other: &Self) -> Ordering { Ordering::Equal }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" assert_eq!(Equal(\"self\").max(Equal(\"other\")).0, \"other\");"},{"DocComment":" ```"},{"Unknown":{"path":"must_use","args":null}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"cmp_ord_max\""}}],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"cmp_ord_max"},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Literal":{"Integer":"Usize"}},{"Literal":{"Integer":"Usize"}}],"output":{"Literal":{"Integer":"Usize"}}},"kind":{"TraitImpl":{"impl_ref":{"id":6,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},"trait_ref":{"id":6,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}},"item_name":"max","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":225,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":7}},{"Ident":["enumerate",0]}],"span":{"span":{"file_id":24,"beg":{"line":844,"col":0},"end":{"line":844,"col":40}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Creates an iterator which gives the current iteration count as well as"},{"DocComment":" the next value."},{"DocComment":""},{"DocComment":" The iterator returned yields pairs `(i, val)`, where `i` is the"},{"DocComment":" current index of iteration and `val` is the value returned by the"},{"DocComment":" iterator."},{"DocComment":""},{"DocComment":" `enumerate()` keeps its count as a [`usize`]. If you want to count by a"},{"DocComment":" different sized integer, the [`zip`] function provides similar"},{"DocComment":" functionality."},{"DocComment":""},{"DocComment":" # Overflow Behavior"},{"DocComment":""},{"DocComment":" The method does no guarding against overflows, so enumerating more than"},{"DocComment":" [`usize::MAX`] elements either produces the wrong result or panics. If"},{"DocComment":" overflow checks are enabled, a panic is guaranteed."},{"DocComment":""},{"DocComment":" # Panics"},{"DocComment":""},{"DocComment":" The returned iterator might panic if the to-be-returned index would"},{"DocComment":" overflow a [`usize`]."},{"DocComment":""},{"DocComment":" [`zip`]: Iterator::zip"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let a = ['a', 'b', 'c'];"},{"DocComment":""},{"DocComment":" let mut iter = a.into_iter().enumerate();"},{"DocComment":""},{"DocComment":" assert_eq!(iter.next(), Some((0, 'a')));"},{"DocComment":" assert_eq!(iter.next(), Some((1, 'b')));"},{"DocComment":" assert_eq!(iter.next(), Some((2, 'c')));"},{"DocComment":" assert_eq!(iter.next(), None);"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"enumerate_method\""}}],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"enumerate_method"},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"A"}],"const_generics":[],"trait_clauses":[null,{"clause_id":1,"span":{"span":{"file_id":24,"beg":{"line":844,"col":8},"end":{"line":844,"col":12}},"generated_from_span":null},"origin":"WhereClauseOnImpl","trait_":{"regions":[],"skip_binder":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}}],"output":{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitImpl":{"impl_ref":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null,{"kind":{"Clause":{"Free":1}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}]}},"trait_ref":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"enumerate","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}}],"global_decls":[],"trait_decls":[null,null,{"def_id":2,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["deref",0]},{"Ident":["Deref",0]}],"span":{"span":{"file_id":14,"beg":{"line":138,"col":0},"end":{"line":138,"col":15}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Used for immutable dereferencing operations, like `*v`."},{"DocComment":""},{"DocComment":" In addition to being used for explicit dereferencing operations with the"},{"DocComment":" (unary) `*` operator in immutable contexts, `Deref` is also used implicitly"},{"DocComment":" by the compiler in many circumstances. This mechanism is called"},{"DocComment":" [\"`Deref` coercion\"][coercion]. In mutable contexts, [`DerefMut`] is used and"},{"DocComment":" mutable deref coercion similarly occurs."},{"DocComment":""},{"DocComment":" **Warning:** Deref coercion is a powerful language feature which has"},{"DocComment":" far-reaching implications for every type that implements `Deref`. The"},{"DocComment":" compiler will silently insert calls to `Deref::deref`. For this reason, one"},{"DocComment":" should be careful about implementing `Deref` and only do so when deref"},{"DocComment":" coercion is desirable. See [below][implementing] for advice on when this is"},{"DocComment":" typically desirable or undesirable."},{"DocComment":""},{"DocComment":" Types that implement `Deref` or `DerefMut` are often called \"smart"},{"DocComment":" pointers\" and the mechanism of deref coercion has been specifically designed"},{"DocComment":" to facilitate the pointer-like behavior that name suggests. Often, the"},{"DocComment":" purpose of a \"smart pointer\" type is to change the ownership semantics"},{"DocComment":" of a contained value (for example, [`Rc`][rc] or [`Cow`][cow]) or the"},{"DocComment":" storage semantics of a contained value (for example, [`Box`][box])."},{"DocComment":""},{"DocComment":" # Deref coercion"},{"DocComment":""},{"DocComment":" If `T` implements `Deref<Target = U>`, and `v` is a value of type `T`, then:"},{"DocComment":""},{"DocComment":" * In immutable contexts, `*v` (where `T` is neither a reference nor a raw"},{"DocComment":"   pointer) is equivalent to `*Deref::deref(&v)`."},{"DocComment":" * Values of type `&T` are coerced to values of type `&U`"},{"DocComment":" * `T` implicitly implements all the methods of the type `U` which take the"},{"DocComment":"   `&self` receiver."},{"DocComment":""},{"DocComment":" For more details, visit [the chapter in *The Rust Programming Language*][book]"},{"DocComment":" as well as the reference sections on [the dereference operator][ref-deref-op],"},{"DocComment":" [method resolution], and [type coercions]."},{"DocComment":""},{"DocComment":" # When to implement `Deref` or `DerefMut`"},{"DocComment":""},{"DocComment":" The same advice applies to both deref traits. In general, deref traits"},{"DocComment":" **should** be implemented if:"},{"DocComment":""},{"DocComment":" 1. a value of the type transparently behaves like a value of the target"},{"DocComment":"    type;"},{"DocComment":" 1. the implementation of the deref function is cheap; and"},{"DocComment":" 1. users of the type will not be surprised by any deref coercion behavior."},{"DocComment":""},{"DocComment":" In general, deref traits **should not** be implemented if:"},{"DocComment":""},{"DocComment":" 1. the deref implementations could fail unexpectedly; or"},{"DocComment":" 1. the type has methods that are likely to collide with methods on the"},{"DocComment":"    target type; or"},{"DocComment":" 1. committing to deref coercion as part of the public API is not desirable."},{"DocComment":""},{"DocComment":" Note that there's a large difference between implementing deref traits"},{"DocComment":" generically over many target types, and doing so only for specific target"},{"DocComment":" types."},{"DocComment":""},{"DocComment":" Generic implementations, such as for [`Box<T>`][box] (which is generic over"},{"DocComment":" every type and dereferences to `T`) should be careful to provide few or no"},{"DocComment":" methods, since the target type is unknown and therefore every method could"},{"DocComment":" collide with one on the target type, causing confusion for users."},{"DocComment":" `impl<T> Box<T>` has no methods (though several associated functions),"},{"DocComment":" partly for this reason."},{"DocComment":""},{"DocComment":" Specific implementations, such as for [`String`][string] (whose `Deref`"},{"DocComment":" implementation has `Target = str`) can have many methods, since avoiding"},{"DocComment":" collision is much easier. `String` and `str` both have many methods, and"},{"DocComment":" `String` additionally behaves as if it has every method of `str` because of"},{"DocComment":" deref coercion. The implementing type may also be generic while the"},{"DocComment":" implementation is still specific in this sense; for example, [`Vec<T>`][vec]"},{"DocComment":" dereferences to `[T]`, so methods of `T` are not applicable."},{"DocComment":""},{"DocComment":" Consider also that deref coercion means that deref traits are a much larger"},{"DocComment":" part of a type's public API than any other trait as it is implicitly called"},{"DocComment":" by the compiler. Therefore, it is advisable to consider whether this is"},{"DocComment":" something you are comfortable supporting as a public API."},{"DocComment":""},{"DocComment":" The [`AsRef`] and [`Borrow`][core::borrow::Borrow] traits have very similar"},{"DocComment":" signatures to `Deref`. It may be desirable to implement either or both of"},{"DocComment":" these, whether in addition to or rather than deref traits. See their"},{"DocComment":" documentation for details."},{"DocComment":""},{"DocComment":" # Fallibility"},{"DocComment":""},{"DocComment":" **This trait's method should never unexpectedly fail**. Deref coercion means"},{"DocComment":" the compiler will often insert calls to `Deref::deref` implicitly. Failure"},{"DocComment":" during dereferencing can be extremely confusing when `Deref` is invoked"},{"DocComment":" implicitly. In the majority of uses it should be infallible, though it may"},{"DocComment":" be acceptable to panic if the type is misused through programmer error, for"},{"DocComment":" example."},{"DocComment":""},{"DocComment":" However, infallibility is not enforced and therefore not guaranteed."},{"DocComment":" As such, `unsafe` code should not rely on infallibility in general for"},{"DocComment":" soundness."},{"DocComment":""},{"DocComment":" [book]: ../../book/ch15-02-deref.html"},{"DocComment":" [coercion]: #deref-coercion"},{"DocComment":" [implementing]: #when-to-implement-deref-or-derefmut"},{"DocComment":" [ref-deref-op]: ../../reference/expressions/operator-expr.html#the-dereference-operator"},{"DocComment":" [method resolution]: ../../reference/expressions/method-call-expr.html"},{"DocComment":" [type coercions]: ../../reference/type-coercions.html"},{"DocComment":" [box]: ../../alloc/boxed/struct.Box.html"},{"DocComment":" [string]: ../../alloc/string/struct.String.html"},{"DocComment":" [vec]: ../../alloc/vec/struct.Vec.html"},{"DocComment":" [rc]: ../../alloc/rc/struct.Rc.html"},{"DocComment":" [cow]: ../../alloc/borrow/enum.Cow.html"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" A struct with a single field which is accessible by dereferencing the"},{"DocComment":" struct."},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" use std::ops::Deref;"},{"DocComment":""},{"DocComment":" struct DerefExample<T> {"},{"DocComment":"     value: T"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl<T> Deref for DerefExample<T> {"},{"DocComment":"     type Target = T;"},{"DocComment":""},{"DocComment":"     fn deref(&self) -> &Self::Target {"},{"DocComment":"         &self.value"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" let x = DerefExample { value: 'a' };"},{"DocComment":" assert_eq!('a', *x);"},{"DocComment":" ```"},{"Unknown":{"path":"doc","args":"alias = \"*\""}},{"Unknown":{"path":"doc","args":"alias = \"&*\""}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"Deref\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"deref"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Self_Target"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["deref",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":7,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[2,"deref"]}}]]},{"def_id":3,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["iterator",0]},{"Ident":["Iterator",0]}],"span":{"span":{"file_id":16,"beg":{"line":39,"col":0},"end":{"line":39,"col":18}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" A trait for dealing with iterators."},{"DocComment":""},{"DocComment":" This is the main iterator trait. For more about the concept of iterators"},{"DocComment":" generally, please see the [module-level documentation]. In particular, you"},{"DocComment":" may want to know how to [implement `Iterator`][impl]."},{"DocComment":""},{"DocComment":" [module-level documentation]: crate::iter"},{"DocComment":" [impl]: crate::iter#implementing-iterator"},{"Unknown":{"path":"rustc_on_unimplemented","args":"on(Self = \"core::ops::range::RangeTo<Idx>\", note =\n\"you might have meant to use a bounded `Range`\"),\non(Self = \"core::ops::range::RangeToInclusive<Idx>\", note =\n\"you might have meant to use a bounded `RangeInclusive`\"), label =\n\"`{Self}` is not an iterator\", message = \"`{Self}` is not an iterator\""}},{"Unknown":{"path":"doc","args":"notable_trait"}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"Iterator\""}},{"Unknown":{"path":"must_use","args":"\"iterators are lazy and do nothing unless consumed\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"iterator"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Self_Item"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[null],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["next",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":11,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[3,"next"]}}],["enumerate",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":9,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},null]}},"kind":{"TraitMethod":[3,"enumerate"]}}]]},{"def_id":4,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["collect",0]},{"Ident":["IntoIterator",0]}],"span":{"span":{"file_id":19,"beg":{"line":282,"col":0},"end":{"line":282,"col":22}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Conversion into an [`Iterator`]."},{"DocComment":""},{"DocComment":" By implementing `IntoIterator` for a type, you define how it will be"},{"DocComment":" converted to an iterator. This is common for types which describe a"},{"DocComment":" collection of some kind."},{"DocComment":""},{"DocComment":" One benefit of implementing `IntoIterator` is that your type will [work"},{"DocComment":" with Rust's `for` loop syntax](crate::iter#for-loops-and-intoiterator)."},{"DocComment":""},{"DocComment":" See also: [`FromIterator`]."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" Basic usage:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let v = [1, 2, 3];"},{"DocComment":" let mut iter = v.into_iter();"},{"DocComment":""},{"DocComment":" assert_eq!(Some(1), iter.next());"},{"DocComment":" assert_eq!(Some(2), iter.next());"},{"DocComment":" assert_eq!(Some(3), iter.next());"},{"DocComment":" assert_eq!(None, iter.next());"},{"DocComment":" ```"},{"DocComment":" Implementing `IntoIterator` for your type:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" // A sample collection, that's just a wrapper over Vec<T>"},{"DocComment":" #[derive(Debug)]"},{"DocComment":" struct MyCollection(Vec<i32>);"},{"DocComment":""},{"DocComment":" // Let's give it some methods so we can create one and add things"},{"DocComment":" // to it."},{"DocComment":" impl MyCollection {"},{"DocComment":"     fn new() -> MyCollection {"},{"DocComment":"         MyCollection(Vec::new())"},{"DocComment":"     }"},{"DocComment":""},{"DocComment":"     fn add(&mut self, elem: i32) {"},{"DocComment":"         self.0.push(elem);"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" // and we'll implement IntoIterator"},{"DocComment":" impl IntoIterator for MyCollection {"},{"DocComment":"     type Item = i32;"},{"DocComment":"     type IntoIter = std::vec::IntoIter<Self::Item>;"},{"DocComment":""},{"DocComment":"     fn into_iter(self) -> Self::IntoIter {"},{"DocComment":"         self.0.into_iter()"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" // Now we can make a new collection..."},{"DocComment":" let mut c = MyCollection::new();"},{"DocComment":""},{"DocComment":" // ... add some stuff to it ..."},{"DocComment":" c.add(0);"},{"DocComment":" c.add(1);"},{"DocComment":" c.add(2);"},{"DocComment":""},{"DocComment":" // ... and then turn it into an Iterator:"},{"DocComment":" for (i, n) in c.into_iter().enumerate() {"},{"DocComment":"     assert_eq!(i as i32, n);"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" It is common to use `IntoIterator` as a trait bound. This allows"},{"DocComment":" the input collection type to change, so long as it is still an"},{"DocComment":" iterator. Additional bounds can be specified by restricting on"},{"DocComment":" `Item`:"},{"DocComment":""},{"DocComment":" ```rust"},{"DocComment":" fn collect_as_strings<T>(collection: T) -> Vec<String>"},{"DocComment":" where"},{"DocComment":"     T: IntoIterator,"},{"DocComment":"     T::Item: std::fmt::Debug,"},{"DocComment":" {"},{"DocComment":"     collection"},{"DocComment":"         .into_iter()"},{"DocComment":"         .map(|item| format!(\"{item:?}\"))"},{"DocComment":"         .collect()"},{"DocComment":" }"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"IntoIterator\""}},{"Unknown":{"path":"rustc_on_unimplemented","args":"on(Self = \"core::ops::range::RangeTo<Idx>\", label =\n\"if you meant to iterate until a value, add a starting value\", note =\n\"`..end` is a `RangeTo`, which cannot be iterated on; you might have meant to have a \\\n              bounded `Range`: `0..end`\"),\non(Self = \"core::ops::range::RangeToInclusive<Idx>\", label =\n\"if you meant to iterate until a value (including it), add a starting value\",\nnote =\n\"`..=end` is a `RangeToInclusive`, which cannot be iterated on; you might have meant \\\n              to have a bounded `RangeInclusive`: `0..=end`\"),\non(Self = \"[]\", label =\n\"`{Self}` is not an iterator; try calling `.into_iter()` or `.iter()`\"),\non(Self = \"&[]\", label =\n\"`{Self}` is not an iterator; try calling `.iter()`\"),\non(Self = \"alloc::vec::Vec<T, A>\", label =\n\"`{Self}` is not an iterator; try calling `.into_iter()` or `.iter()`\"),\non(Self = \"&str\", label =\n\"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\non(Self = \"alloc::string::String\", label =\n\"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\non(Self = \"{integral}\", note =\n\"if you want to iterate between `start` until a value `end`, use the exclusive range \\\n              syntax `start..end` or the inclusive range syntax `start..=end`\"),\non(Self = \"{float}\", note =\n\"if you want to iterate between `start` until a value `end`, use the exclusive range \\\n              syntax `start..end` or the inclusive range syntax `start..=end`\"),\nlabel = \"`{Self}` is not an iterator\", message = \"`{Self}` is not an iterator\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"IntoIterator"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Self_Item"},{"index":2,"name":"Self_IntoIter"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[null]},"parent_clauses":[null,null,{"clause_id":2,"span":{"span":{"file_id":19,"beg":{"line":289,"col":19},"end":{"line":289,"col":46}},"generated_from_span":null},"origin":{"TraitItem":"IntoIter"},"trait_":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":2}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["into_iter",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":10,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":4,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[4,"into_iter"]}}]]},{"def_id":5,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["bit",0]},{"Ident":["Not",0]}],"span":{"span":{"file_id":20,"beg":{"line":34,"col":0},"end":{"line":34,"col":13}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" The unary logical negation operator `!`."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" An implementation of `Not` for `Answer`, which enables the use of `!` to"},{"DocComment":" invert its value."},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" use std::ops::Not;"},{"DocComment":""},{"DocComment":" #[derive(Debug, PartialEq)]"},{"DocComment":" enum Answer {"},{"DocComment":"     Yes,"},{"DocComment":"     No,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl Not for Answer {"},{"DocComment":"     type Output = Self;"},{"DocComment":""},{"DocComment":"     fn not(self) -> Self::Output {"},{"DocComment":"         match self {"},{"DocComment":"             Answer::Yes => Answer::No,"},{"DocComment":"             Answer::No => Answer::Yes"},{"DocComment":"         }"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" assert_eq!(!Answer::Yes, Answer::No);"},{"DocComment":" assert_eq!(!Answer::No, Answer::Yes);"},{"DocComment":" ```"},{"Unknown":{"path":"doc","args":"alias = \"!\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"not"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Self_Output"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[null],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["not",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":15,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[5,"not"]}}]]},{"def_id":6,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["Ord",0]}],"span":{"span":{"file_id":23,"beg":{"line":957,"col":0},"end":{"line":957,"col":36}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order)."},{"DocComment":""},{"DocComment":" Implementations must be consistent with the [`PartialOrd`] implementation, and ensure `max`,"},{"DocComment":" `min`, and `clamp` are consistent with `cmp`:"},{"DocComment":""},{"DocComment":" - `partial_cmp(a, b) == Some(cmp(a, b))`."},{"DocComment":" - `max(a, b) == max_by(a, b, cmp)` (ensured by the default implementation)."},{"DocComment":" - `min(a, b) == min_by(a, b, cmp)` (ensured by the default implementation)."},{"DocComment":" - For `a.clamp(min, max)`, see the [method docs](#method.clamp) (ensured by the default"},{"DocComment":"   implementation)."},{"DocComment":""},{"DocComment":" Violating these requirements is a logic error. The behavior resulting from a logic error is not"},{"DocComment":" specified, but users of the trait must ensure that such logic errors do *not* result in"},{"DocComment":" undefined behavior. This means that `unsafe` code **must not** rely on the correctness of these"},{"DocComment":" methods."},{"DocComment":""},{"DocComment":" ## Corollaries"},{"DocComment":""},{"DocComment":" From the above and the requirements of `PartialOrd`, it follows that for all `a`, `b` and `c`:"},{"DocComment":""},{"DocComment":" - exactly one of `a < b`, `a == b` or `a > b` is true; and"},{"DocComment":" - `<` is transitive: `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and"},{"DocComment":"   `>`."},{"DocComment":""},{"DocComment":" Mathematically speaking, the `<` operator defines a strict [weak order]. In cases where `==`"},{"DocComment":" conforms to mathematical equality, it also defines a strict [total order]."},{"DocComment":""},{"DocComment":" [weak order]: https://en.wikipedia.org/wiki/Weak_ordering"},{"DocComment":" [total order]: https://en.wikipedia.org/wiki/Total_order"},{"DocComment":""},{"DocComment":" ## Derivable"},{"DocComment":""},{"DocComment":" This trait can be used with `#[derive]`."},{"DocComment":""},{"DocComment":" When `derive`d on structs, it will produce a"},{"DocComment":" [lexicographic](https://en.wikipedia.org/wiki/Lexicographic_order) ordering based on the"},{"DocComment":" top-to-bottom declaration order of the struct's members."},{"DocComment":""},{"DocComment":" When `derive`d on enums, variants are ordered primarily by their discriminants. Secondarily,"},{"DocComment":" they are ordered by their fields. By default, the discriminant is smallest for variants at the"},{"DocComment":" top, and largest for variants at the bottom. Here's an example:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" #[derive(PartialEq, Eq, PartialOrd, Ord)]"},{"DocComment":" enum E {"},{"DocComment":"     Top,"},{"DocComment":"     Bottom,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" assert!(E::Top < E::Bottom);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" However, manually setting the discriminants can override this default behavior:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" #[derive(PartialEq, Eq, PartialOrd, Ord)]"},{"DocComment":" enum E {"},{"DocComment":"     Top = 2,"},{"DocComment":"     Bottom = 1,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" assert!(E::Bottom < E::Top);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" ## Lexicographical comparison"},{"DocComment":""},{"DocComment":" Lexicographical comparison is an operation with the following properties:"},{"DocComment":"  - Two sequences are compared element by element."},{"DocComment":"  - The first mismatching element defines which sequence is lexicographically less or greater"},{"DocComment":"    than the other."},{"DocComment":"  - If one sequence is a prefix of another, the shorter sequence is lexicographically less than"},{"DocComment":"    the other."},{"DocComment":"  - If two sequences have equivalent elements and are of the same length, then the sequences are"},{"DocComment":"    lexicographically equal."},{"DocComment":"  - An empty sequence is lexicographically less than any non-empty sequence."},{"DocComment":"  - Two empty sequences are lexicographically equal."},{"DocComment":""},{"DocComment":" ## How can I implement `Ord`?"},{"DocComment":""},{"DocComment":" `Ord` requires that the type also be [`PartialOrd`], [`PartialEq`], and [`Eq`]."},{"DocComment":""},{"DocComment":" Because `Ord` implies a stronger ordering relationship than [`PartialOrd`], and both `Ord` and"},{"DocComment":" [`PartialOrd`] must agree, you must choose how to implement `Ord` **first**. You can choose to"},{"DocComment":" derive it, or implement it manually. If you derive it, you should derive all four traits. If you"},{"DocComment":" implement it manually, you should manually implement all four traits, based on the"},{"DocComment":" implementation of `Ord`."},{"DocComment":""},{"DocComment":" Here's an example where you want to define the `Character` comparison by `health` and"},{"DocComment":" `experience` only, disregarding the field `mana`:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" use std::cmp::Ordering;"},{"DocComment":""},{"DocComment":" struct Character {"},{"DocComment":"     health: u32,"},{"DocComment":"     experience: u32,"},{"DocComment":"     mana: f32,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl Ord for Character {"},{"DocComment":"     fn cmp(&self, other: &Self) -> Ordering {"},{"DocComment":"         self.experience"},{"DocComment":"             .cmp(&other.experience)"},{"DocComment":"             .then(self.health.cmp(&other.health))"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl PartialOrd for Character {"},{"DocComment":"     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {"},{"DocComment":"         Some(self.cmp(other))"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl PartialEq for Character {"},{"DocComment":"     fn eq(&self, other: &Self) -> bool {"},{"DocComment":"         self.health == other.health && self.experience == other.experience"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl Eq for Character {}"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" If all you need is to `slice::sort` a type by a field value, it can be simpler to use"},{"DocComment":" `slice::sort_by_key`."},{"DocComment":""},{"DocComment":" ## Examples of incorrect `Ord` implementations"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" use std::cmp::Ordering;"},{"DocComment":""},{"DocComment":" #[derive(Debug)]"},{"DocComment":" struct Character {"},{"DocComment":"     health: f32,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl Ord for Character {"},{"DocComment":"     fn cmp(&self, other: &Self) -> std::cmp::Ordering {"},{"DocComment":"         if self.health < other.health {"},{"DocComment":"             Ordering::Less"},{"DocComment":"         } else if self.health > other.health {"},{"DocComment":"             Ordering::Greater"},{"DocComment":"         } else {"},{"DocComment":"             Ordering::Equal"},{"DocComment":"         }"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl PartialOrd for Character {"},{"DocComment":"     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {"},{"DocComment":"         Some(self.cmp(other))"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl PartialEq for Character {"},{"DocComment":"     fn eq(&self, other: &Self) -> bool {"},{"DocComment":"         self.health == other.health"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl Eq for Character {}"},{"DocComment":""},{"DocComment":" let a = Character { health: 4.5 };"},{"DocComment":" let b = Character { health: f32::NAN };"},{"DocComment":""},{"DocComment":" // Mistake: floating-point values do not form a total order and using the built-in comparison"},{"DocComment":" // operands to implement `Ord` irregardless of that reality does not change it. Use"},{"DocComment":" // `f32::total_cmp` if you need a total order for floating-point values."},{"DocComment":""},{"DocComment":" // Reflexivity requirement of `Ord` is not given."},{"DocComment":" assert!(a == a);"},{"DocComment":" assert!(b != b);"},{"DocComment":""},{"DocComment":" // Antisymmetry requirement of `Ord` is not given. Only one of a < c and c < a is allowed to be"},{"DocComment":" // true, not both or neither."},{"DocComment":" assert_eq!((a < b) as u8 + (b < a) as u8, 0);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" use std::cmp::Ordering;"},{"DocComment":""},{"DocComment":" #[derive(Debug)]"},{"DocComment":" struct Character {"},{"DocComment":"     health: u32,"},{"DocComment":"     experience: u32,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl PartialOrd for Character {"},{"DocComment":"     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {"},{"DocComment":"         Some(self.cmp(other))"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl Ord for Character {"},{"DocComment":"     fn cmp(&self, other: &Self) -> std::cmp::Ordering {"},{"DocComment":"         if self.health < 50 {"},{"DocComment":"             self.health.cmp(&other.health)"},{"DocComment":"         } else {"},{"DocComment":"             self.experience.cmp(&other.experience)"},{"DocComment":"         }"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" // For performance reasons implementing `PartialEq` this way is not the idiomatic way, but it"},{"DocComment":" // ensures consistent behavior between `PartialEq`, `PartialOrd` and `Ord` in this example."},{"DocComment":" impl PartialEq for Character {"},{"DocComment":"     fn eq(&self, other: &Self) -> bool {"},{"DocComment":"         self.cmp(other) == Ordering::Equal"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl Eq for Character {}"},{"DocComment":""},{"DocComment":" let a = Character {"},{"DocComment":"     health: 3,"},{"DocComment":"     experience: 5,"},{"DocComment":" };"},{"DocComment":" let b = Character {"},{"DocComment":"     health: 10,"},{"DocComment":"     experience: 77,"},{"DocComment":" };"},{"DocComment":" let c = Character {"},{"DocComment":"     health: 143,"},{"DocComment":"     experience: 2,"},{"DocComment":" };"},{"DocComment":""},{"DocComment":" // Mistake: The implementation of `Ord` compares different fields depending on the value of"},{"DocComment":" // `self.health`, the resulting order is not total."},{"DocComment":""},{"DocComment":" // Transitivity requirement of `Ord` is not given. If a is smaller than b and b is smaller than"},{"DocComment":" // c, by transitive property a must also be smaller than c."},{"DocComment":" assert!(a < b && b < c && c < a);"},{"DocComment":""},{"DocComment":" // Antisymmetry requirement of `Ord` is not given. Only one of a < c and c < a is allowed to be"},{"DocComment":" // true, not both or neither."},{"DocComment":" assert_eq!((a < c) as u8 + (c < a) as u8, 2);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" The documentation of [`PartialOrd`] contains further examples, for example it's wrong for"},{"DocComment":" [`PartialOrd`] and [`PartialEq`] to disagree."},{"DocComment":""},{"DocComment":" [`cmp`]: Ord::cmp"},{"Unknown":{"path":"doc","args":"alias = \"<\""}},{"Unknown":{"path":"doc","args":"alias = \">\""}},{"Unknown":{"path":"doc","args":"alias = \"<=\""}},{"Unknown":{"path":"doc","args":"alias = \">=\""}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"Ord\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"Ord"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[{"clause_id":0,"span":{"span":{"file_id":23,"beg":{"line":957,"col":15},"end":{"line":957,"col":17}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":10,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},{"clause_id":1,"span":{"span":{"file_id":23,"beg":{"line":957,"col":20},"end":{"line":957,"col":36}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":11,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["cmp",{"params":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":24,"generics":{"regions":[{"Var":{"Bound":[0,0]}},{"Var":{"Bound":[0,1]}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":6,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[6,"cmp"]}}],["max",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":17,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":6,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},null]}},"kind":{"TraitMethod":[6,"max"]}}]]},{"def_id":7,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Ident":["Step",0]}],"span":{"span":{"file_id":24,"beg":{"line":24,"col":0},"end":{"line":24,"col":42}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Objects that have a notion of *successor* and *predecessor* operations."},{"DocComment":""},{"DocComment":" The *successor* operation moves towards values that compare greater."},{"DocComment":" The *predecessor* operation moves towards values that compare lesser."}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[null,{"clause_id":1,"span":{"span":{"file_id":24,"beg":{"line":24,"col":16},"end":{"line":24,"col":21}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":13,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},{"clause_id":2,"span":{"span":{"file_id":24,"beg":{"line":24,"col":24},"end":{"line":24,"col":34}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":11,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["steps_between",{"params":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":55,"generics":{"regions":[{"Var":{"Bound":[0,0]}},{"Var":{"Bound":[0,1]}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[7,"steps_between"]}}],["forward_checked",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":56,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[7,"forward_checked"]}}],["backward_checked",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":59,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[7,"backward_checked"]}}]]},{"def_id":8,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]}],"span":{"span":{"file_id":25,"beg":{"line":172,"col":0},"end":{"line":172,"col":67}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" A helper trait used for indexing operations."},{"DocComment":""},{"DocComment":" Implementations of this trait have to promise that if the argument"},{"DocComment":" to `get_unchecked(_mut)` is a safe reference, then so is the result."},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"SliceIndex\""}},{"Unknown":{"path":"rustc_on_unimplemented","args":"on(T = \"str\", label = \"string indices are ranges of `usize`\",),\non(all(any(T = \"str\", T = \"&str\", T = \"alloc::string::String\"), Self =\n\"{integer}\"), note =\n\"you can use `.chars().nth()` or `.bytes().nth()`\\n\\\n                for more information, see chapter 8 in The Book: \\\n                <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\"),\nmessage = \"the type `{T}` cannot be indexed by `{Self}`\", label =\n\"slice indices are of type `usize` or ranges of `usize`\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"SliceIndex"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"T"},{"index":2,"name":"Self_Output"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[{"clause_id":0,"span":{"span":{"file_id":25,"beg":{"line":172,"col":40},"end":{"line":172,"col":67}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":28,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["get",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":162,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":8,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[8,"get"]}}],["get_mut",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":163,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":8,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[8,"get_mut"]}}],["get_unchecked",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":164,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":8,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[8,"get_unchecked"]}}],["get_unchecked_mut",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":165,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":8,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[8,"get_unchecked_mut"]}}],["index",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":166,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":8,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[8,"index"]}}],["index_mut",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":167,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":8,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[8,"index_mut"]}}]]},{"def_id":9,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["Copy",0]}],"span":{"span":{"file_id":6,"beg":{"line":421,"col":0},"end":{"line":421,"col":21}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Types whose values can be duplicated simply by copying bits."},{"DocComment":""},{"DocComment":" By default, variable bindings have 'move semantics.' In other"},{"DocComment":" words:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" #[derive(Debug)]"},{"DocComment":" struct Foo;"},{"DocComment":""},{"DocComment":" let x = Foo;"},{"DocComment":""},{"DocComment":" let y = x;"},{"DocComment":""},{"DocComment":" // `x` has moved into `y`, and so cannot be used"},{"DocComment":""},{"DocComment":" // println!(\"{x:?}\"); // error: use of moved value"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" However, if a type implements `Copy`, it instead has 'copy semantics':"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" // We can derive a `Copy` implementation. `Clone` is also required, as it's"},{"DocComment":" // a supertrait of `Copy`."},{"DocComment":" #[derive(Debug, Copy, Clone)]"},{"DocComment":" struct Foo;"},{"DocComment":""},{"DocComment":" let x = Foo;"},{"DocComment":""},{"DocComment":" let y = x;"},{"DocComment":""},{"DocComment":" // `y` is a copy of `x`"},{"DocComment":""},{"DocComment":" println!(\"{x:?}\"); // A-OK!"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" It's important to note that in these two examples, the only difference is whether you"},{"DocComment":" are allowed to access `x` after the assignment. Under the hood, both a copy and a move"},{"DocComment":" can result in bits being copied in memory, although this is sometimes optimized away."},{"DocComment":""},{"DocComment":" ## How can I implement `Copy`?"},{"DocComment":""},{"DocComment":" There are two ways to implement `Copy` on your type. The simplest is to use `derive`:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" #[derive(Copy, Clone)]"},{"DocComment":" struct MyStruct;"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" You can also implement `Copy` and `Clone` manually:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" struct MyStruct;"},{"DocComment":""},{"DocComment":" impl Copy for MyStruct { }"},{"DocComment":""},{"DocComment":" impl Clone for MyStruct {"},{"DocComment":"     fn clone(&self) -> MyStruct {"},{"DocComment":"         *self"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" There is a small difference between the two. The `derive` strategy will also place a `Copy`"},{"DocComment":" bound on type parameters:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" #[derive(Clone)]"},{"DocComment":" struct MyStruct<T>(T);"},{"DocComment":""},{"DocComment":" impl<T: Copy> Copy for MyStruct<T> { }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" This isn't always desired. For example, shared references (`&T`) can be copied regardless of"},{"DocComment":" whether `T` is `Copy`. Likewise, a generic struct containing markers such as [`PhantomData`]"},{"DocComment":" could potentially be duplicated with a bit-wise copy."},{"DocComment":""},{"DocComment":" ## What's the difference between `Copy` and `Clone`?"},{"DocComment":""},{"DocComment":" Copies happen implicitly, for example as part of an assignment `y = x`. The behavior of"},{"DocComment":" `Copy` is not overloadable; it is always a simple bit-wise copy."},{"DocComment":""},{"DocComment":" Cloning is an explicit action, `x.clone()`. The implementation of [`Clone`] can"},{"DocComment":" provide any type-specific behavior necessary to duplicate values safely. For example,"},{"DocComment":" the implementation of [`Clone`] for [`String`] needs to copy the pointed-to string"},{"DocComment":" buffer in the heap. A simple bitwise copy of [`String`] values would merely copy the"},{"DocComment":" pointer, leading to a double free down the line. For this reason, [`String`] is [`Clone`]"},{"DocComment":" but not `Copy`."},{"DocComment":""},{"DocComment":" [`Clone`] is a supertrait of `Copy`, so everything which is `Copy` must also implement"},{"DocComment":" [`Clone`]. If a type is `Copy` then its [`Clone`] implementation only needs to return `*self`"},{"DocComment":" (see the example above)."},{"DocComment":""},{"DocComment":" ## When can my type be `Copy`?"},{"DocComment":""},{"DocComment":" A type can implement `Copy` if all of its components implement `Copy`. For example, this"},{"DocComment":" struct can be `Copy`:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # #[allow(dead_code)]"},{"DocComment":" #[derive(Copy, Clone)]"},{"DocComment":" struct Point {"},{"DocComment":"    x: i32,"},{"DocComment":"    y: i32,"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" A struct can be `Copy`, and [`i32`] is `Copy`, therefore `Point` is eligible to be `Copy`."},{"DocComment":" By contrast, consider"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # #![allow(dead_code)]"},{"DocComment":" # struct Point;"},{"DocComment":" struct PointList {"},{"DocComment":"     points: Vec<Point>,"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" The struct `PointList` cannot implement `Copy`, because [`Vec<T>`] is not `Copy`. If we"},{"DocComment":" attempt to derive a `Copy` implementation, we'll get an error:"},{"DocComment":""},{"DocComment":" ```text"},{"DocComment":" the trait `Copy` cannot be implemented for this type; field `points` does not implement `Copy`"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" Shared references (`&T`) are also `Copy`, so a type can be `Copy`, even when it holds"},{"DocComment":" shared references of types `T` that are *not* `Copy`. Consider the following struct,"},{"DocComment":" which can implement `Copy`, because it only holds a *shared reference* to our non-`Copy`"},{"DocComment":" type `PointList` from above:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # #![allow(dead_code)]"},{"DocComment":" # struct PointList;"},{"DocComment":" #[derive(Copy, Clone)]"},{"DocComment":" struct PointListWrapper<'a> {"},{"DocComment":"     point_list_ref: &'a PointList,"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" ## When *can't* my type be `Copy`?"},{"DocComment":""},{"DocComment":" Some types can't be copied safely. For example, copying `&mut T` would create an aliased"},{"DocComment":" mutable reference. Copying [`String`] would duplicate responsibility for managing the"},{"DocComment":" [`String`]'s buffer, leading to a double free."},{"DocComment":""},{"DocComment":" Generalizing the latter case, any type implementing [`Drop`] can't be `Copy`, because it's"},{"DocComment":" managing some resource besides its own [`size_of::<T>`] bytes."},{"DocComment":""},{"DocComment":" If you try to implement `Copy` on a struct or enum containing non-`Copy` data, you will get"},{"DocComment":" the error [E0204]."},{"DocComment":""},{"DocComment":" [E0204]: ../../error_codes/E0204.html"},{"DocComment":""},{"DocComment":" ## When *should* my type be `Copy`?"},{"DocComment":""},{"DocComment":" Generally speaking, if your type _can_ implement `Copy`, it should. Keep in mind, though,"},{"DocComment":" that implementing `Copy` is part of the public API of your type. If the type might become"},{"DocComment":" non-`Copy` in the future, it could be prudent to omit the `Copy` implementation now, to"},{"DocComment":" avoid a breaking API change."},{"DocComment":""},{"DocComment":" ## Additional implementors"},{"DocComment":""},{"DocComment":" In addition to the [implementors listed below][impls],"},{"DocComment":" the following types also implement `Copy`:"},{"DocComment":""},{"DocComment":" * Function item types (i.e., the distinct types defined for each function)"},{"DocComment":" * Function pointer types (e.g., `fn() -> i32`)"},{"DocComment":" * Closure types, if they capture no value from the environment"},{"DocComment":"   or if all such captured values implement `Copy` themselves."},{"DocComment":"   Note that variables captured by shared reference always implement `Copy`"},{"DocComment":"   (even if the referent doesn't),"},{"DocComment":"   while variables captured by mutable reference never implement `Copy`."},{"DocComment":""},{"DocComment":" [`Vec<T>`]: ../../std/vec/struct.Vec.html"},{"DocComment":" [`String`]: ../../std/string/struct.String.html"},{"DocComment":" [`size_of::<T>`]: size_of"},{"DocComment":" [impls]: #implementors"},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"Copy\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"copy"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[{"clause_id":0,"span":{"span":{"file_id":6,"beg":{"line":421,"col":16},"end":{"line":421,"col":21}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":13,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[]},{"def_id":10,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["Eq",0]}],"span":{"span":{"file_id":23,"beg":{"line":335,"col":0},"end":{"line":335,"col":29}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Trait for comparisons corresponding to [equivalence relations]("},{"DocComment":" https://en.wikipedia.org/wiki/Equivalence_relation)."},{"DocComment":""},{"DocComment":" The primary difference to [`PartialEq`] is the additional requirement for reflexivity. A type"},{"DocComment":" that implements [`PartialEq`] guarantees that for all `a`, `b` and `c`:"},{"DocComment":""},{"DocComment":" - symmetric: `a == b` implies `b == a` and `a != b` implies `!(a == b)`"},{"DocComment":" - transitive: `a == b` and `b == c` implies `a == c`"},{"DocComment":""},{"DocComment":" `Eq`, which builds on top of [`PartialEq`] also implies:"},{"DocComment":""},{"DocComment":" - reflexive: `a == a`"},{"DocComment":""},{"DocComment":" This property cannot be checked by the compiler, and therefore `Eq` is a trait without methods."},{"DocComment":""},{"DocComment":" Violating this property is a logic error. The behavior resulting from a logic error is not"},{"DocComment":" specified, but users of the trait must ensure that such logic errors do *not* result in"},{"DocComment":" undefined behavior. This means that `unsafe` code **must not** rely on the correctness of these"},{"DocComment":" methods."},{"DocComment":""},{"DocComment":" Floating point types such as [`f32`] and [`f64`] implement only [`PartialEq`] but *not* `Eq`"},{"DocComment":" because `NaN` != `NaN`."},{"DocComment":""},{"DocComment":" ## Derivable"},{"DocComment":""},{"DocComment":" This trait can be used with `#[derive]`. When `derive`d, because `Eq` has no extra methods, it"},{"DocComment":" is only informing the compiler that this is an equivalence relation rather than a partial"},{"DocComment":" equivalence relation. Note that the `derive` strategy requires all fields are `Eq`, which isn't"},{"DocComment":" always desired."},{"DocComment":""},{"DocComment":" ## How can I implement `Eq`?"},{"DocComment":""},{"DocComment":" If you cannot use the `derive` strategy, specify that your type implements `Eq`, which has no"},{"DocComment":" extra methods:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" enum BookFormat {"},{"DocComment":"     Paperback,"},{"DocComment":"     Hardback,"},{"DocComment":"     Ebook,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" struct Book {"},{"DocComment":"     isbn: i32,"},{"DocComment":"     format: BookFormat,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl PartialEq for Book {"},{"DocComment":"     fn eq(&self, other: &Self) -> bool {"},{"DocComment":"         self.isbn == other.isbn"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl Eq for Book {}"},{"DocComment":" ```"},{"Unknown":{"path":"doc","args":"alias = \"==\""}},{"Unknown":{"path":"doc","args":"alias = \"!=\""}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"Eq\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"Eq"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[{"clause_id":0,"span":{"span":{"file_id":23,"beg":{"line":335,"col":14},"end":{"line":335,"col":29}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":12,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[]},{"def_id":11,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["PartialOrd",0]}],"span":{"span":{"file_id":23,"beg":{"line":1340,"col":0},"end":{"line":1340,"col":56}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Trait for types that form a [partial order](https://en.wikipedia.org/wiki/Partial_order)."},{"DocComment":""},{"DocComment":" The `lt`, `le`, `gt`, and `ge` methods of this trait can be called using the `<`, `<=`, `>`, and"},{"DocComment":" `>=` operators, respectively."},{"DocComment":""},{"DocComment":" This trait should **only** contain the comparison logic for a type **if one plans on only"},{"DocComment":" implementing `PartialOrd` but not [`Ord`]**. Otherwise the comparison logic should be in [`Ord`]"},{"DocComment":" and this trait implemented with `Some(self.cmp(other))`."},{"DocComment":""},{"DocComment":" The methods of this trait must be consistent with each other and with those of [`PartialEq`]."},{"DocComment":" The following conditions must hold:"},{"DocComment":""},{"DocComment":" 1. `a == b` if and only if `partial_cmp(a, b) == Some(Equal)`."},{"DocComment":" 2. `a < b` if and only if `partial_cmp(a, b) == Some(Less)`"},{"DocComment":" 3. `a > b` if and only if `partial_cmp(a, b) == Some(Greater)`"},{"DocComment":" 4. `a <= b` if and only if `a < b || a == b`"},{"DocComment":" 5. `a >= b` if and only if `a > b || a == b`"},{"DocComment":" 6. `a != b` if and only if `!(a == b)`."},{"DocComment":""},{"DocComment":" Conditions 2–5 above are ensured by the default implementation. Condition 6 is already ensured"},{"DocComment":" by [`PartialEq`]."},{"DocComment":""},{"DocComment":" If [`Ord`] is also implemented for `Self` and `Rhs`, it must also be consistent with"},{"DocComment":" `partial_cmp` (see the documentation of that trait for the exact requirements). It's easy to"},{"DocComment":" accidentally make them disagree by deriving some of the traits and manually implementing others."},{"DocComment":""},{"DocComment":" The comparison relations must satisfy the following conditions (for all `a`, `b`, `c` of type"},{"DocComment":" `A`, `B`, `C`):"},{"DocComment":""},{"DocComment":" - **Transitivity**: if `A: PartialOrd<B>` and `B: PartialOrd<C>` and `A: PartialOrd<C>`, then `a"},{"DocComment":"   < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`. This must also"},{"DocComment":"   work for longer chains, such as when `A: PartialOrd<B>`, `B: PartialOrd<C>`, `C:"},{"DocComment":"   PartialOrd<D>`, and `A: PartialOrd<D>` all exist."},{"DocComment":" - **Duality**: if `A: PartialOrd<B>` and `B: PartialOrd<A>`, then `a < b` if and only if `b >"},{"DocComment":"   a`."},{"DocComment":""},{"DocComment":" Note that the `B: PartialOrd<A>` (dual) and `A: PartialOrd<C>` (transitive) impls are not forced"},{"DocComment":" to exist, but these requirements apply whenever they do exist."},{"DocComment":""},{"DocComment":" Violating these requirements is a logic error. The behavior resulting from a logic error is not"},{"DocComment":" specified, but users of the trait must ensure that such logic errors do *not* result in"},{"DocComment":" undefined behavior. This means that `unsafe` code **must not** rely on the correctness of these"},{"DocComment":" methods."},{"DocComment":""},{"DocComment":" ## Cross-crate considerations"},{"DocComment":""},{"DocComment":" Upholding the requirements stated above can become tricky when one crate implements `PartialOrd`"},{"DocComment":" for a type of another crate (i.e., to allow comparing one of its own types with a type from the"},{"DocComment":" standard library). The recommendation is to never implement this trait for a foreign type. In"},{"DocComment":" other words, such a crate should do `impl PartialOrd<ForeignType> for LocalType`, but it should"},{"DocComment":" *not* do `impl PartialOrd<LocalType> for ForeignType`."},{"DocComment":""},{"DocComment":" This avoids the problem of transitive chains that criss-cross crate boundaries: for all local"},{"DocComment":" types `T`, you may assume that no other crate will add `impl`s that allow comparing `T < U`. In"},{"DocComment":" other words, if other crates add `impl`s that allow building longer transitive chains `U1 < ..."},{"DocComment":" < T < V1 < ...`, then all the types that appear to the right of `T` must be types that the crate"},{"DocComment":" defining `T` already knows about. This rules out transitive chains where downstream crates can"},{"DocComment":" add new `impl`s that \"stitch together\" comparisons of foreign types in ways that violate"},{"DocComment":" transitivity."},{"DocComment":""},{"DocComment":" Not having such foreign `impl`s also avoids forward compatibility issues where one crate adding"},{"DocComment":" more `PartialOrd` implementations can cause build failures in downstream crates."},{"DocComment":""},{"DocComment":" ## Corollaries"},{"DocComment":""},{"DocComment":" The following corollaries follow from the above requirements:"},{"DocComment":""},{"DocComment":" - irreflexivity of `<` and `>`: `!(a < a)`, `!(a > a)`"},{"DocComment":" - transitivity of `>`: if `a > b` and `b > c` then `a > c`"},{"DocComment":" - duality of `partial_cmp`: `partial_cmp(a, b) == partial_cmp(b, a).map(Ordering::reverse)`"},{"DocComment":""},{"DocComment":" ## Strict and non-strict partial orders"},{"DocComment":""},{"DocComment":" The `<` and `>` operators behave according to a *strict* partial order. However, `<=` and `>=`"},{"DocComment":" do **not** behave according to a *non-strict* partial order. That is because mathematically, a"},{"DocComment":" non-strict partial order would require reflexivity, i.e. `a <= a` would need to be true for"},{"DocComment":" every `a`. This isn't always the case for types that implement `PartialOrd`, for example:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let a = f64::sqrt(-1.0);"},{"DocComment":" assert_eq!(a <= a, false);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" ## Derivable"},{"DocComment":""},{"DocComment":" This trait can be used with `#[derive]`."},{"DocComment":""},{"DocComment":" When `derive`d on structs, it will produce a"},{"DocComment":" [lexicographic](https://en.wikipedia.org/wiki/Lexicographic_order) ordering based on the"},{"DocComment":" top-to-bottom declaration order of the struct's members."},{"DocComment":""},{"DocComment":" When `derive`d on enums, variants are primarily ordered by their discriminants. Secondarily,"},{"DocComment":" they are ordered by their fields. By default, the discriminant is smallest for variants at the"},{"DocComment":" top, and largest for variants at the bottom. Here's an example:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" #[derive(PartialEq, PartialOrd)]"},{"DocComment":" enum E {"},{"DocComment":"     Top,"},{"DocComment":"     Bottom,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" assert!(E::Top < E::Bottom);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" However, manually setting the discriminants can override this default behavior:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" #[derive(PartialEq, PartialOrd)]"},{"DocComment":" enum E {"},{"DocComment":"     Top = 2,"},{"DocComment":"     Bottom = 1,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" assert!(E::Bottom < E::Top);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" ## How can I implement `PartialOrd`?"},{"DocComment":""},{"DocComment":" `PartialOrd` only requires implementation of the [`partial_cmp`] method, with the others"},{"DocComment":" generated from default implementations."},{"DocComment":""},{"DocComment":" However it remains possible to implement the others separately for types which do not have a"},{"DocComment":" total order. For example, for floating point numbers, `NaN < 0 == false` and `NaN >= 0 == false`"},{"DocComment":" (cf. IEEE 754-2008 section 5.11)."},{"DocComment":""},{"DocComment":" `PartialOrd` requires your type to be [`PartialEq`]."},{"DocComment":""},{"DocComment":" If your type is [`Ord`], you can implement [`partial_cmp`] by using [`cmp`]:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" use std::cmp::Ordering;"},{"DocComment":""},{"DocComment":" struct Person {"},{"DocComment":"     id: u32,"},{"DocComment":"     name: String,"},{"DocComment":"     height: u32,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl PartialOrd for Person {"},{"DocComment":"     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {"},{"DocComment":"         Some(self.cmp(other))"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl Ord for Person {"},{"DocComment":"     fn cmp(&self, other: &Self) -> Ordering {"},{"DocComment":"         self.height.cmp(&other.height)"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl PartialEq for Person {"},{"DocComment":"     fn eq(&self, other: &Self) -> bool {"},{"DocComment":"         self.height == other.height"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl Eq for Person {}"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" You may also find it useful to use [`partial_cmp`] on your type's fields. Here is an example of"},{"DocComment":" `Person` types who have a floating-point `height` field that is the only field to be used for"},{"DocComment":" sorting:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" use std::cmp::Ordering;"},{"DocComment":""},{"DocComment":" struct Person {"},{"DocComment":"     id: u32,"},{"DocComment":"     name: String,"},{"DocComment":"     height: f64,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl PartialOrd for Person {"},{"DocComment":"     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {"},{"DocComment":"         self.height.partial_cmp(&other.height)"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl PartialEq for Person {"},{"DocComment":"     fn eq(&self, other: &Self) -> bool {"},{"DocComment":"         self.height == other.height"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" ## Examples of incorrect `PartialOrd` implementations"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" use std::cmp::Ordering;"},{"DocComment":""},{"DocComment":" #[derive(PartialEq, Debug)]"},{"DocComment":" struct Character {"},{"DocComment":"     health: u32,"},{"DocComment":"     experience: u32,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl PartialOrd for Character {"},{"DocComment":"     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {"},{"DocComment":"         Some(self.health.cmp(&other.health))"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" let a = Character {"},{"DocComment":"     health: 10,"},{"DocComment":"     experience: 5,"},{"DocComment":" };"},{"DocComment":" let b = Character {"},{"DocComment":"     health: 10,"},{"DocComment":"     experience: 77,"},{"DocComment":" };"},{"DocComment":""},{"DocComment":" // Mistake: `PartialEq` and `PartialOrd` disagree with each other."},{"DocComment":""},{"DocComment":" assert_eq!(a.partial_cmp(&b).unwrap(), Ordering::Equal); // a == b according to `PartialOrd`."},{"DocComment":" assert_ne!(a, b); // a != b according to `PartialEq`."},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let x: u32 = 0;"},{"DocComment":" let y: u32 = 1;"},{"DocComment":""},{"DocComment":" assert_eq!(x < y, true);"},{"DocComment":" assert_eq!(x.lt(&y), true);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" [`partial_cmp`]: PartialOrd::partial_cmp"},{"DocComment":" [`cmp`]: Ord::cmp"},{"Unknown":{"path":"doc","args":"alias = \">\""}},{"Unknown":{"path":"doc","args":"alias = \"<\""}},{"Unknown":{"path":"doc","args":"alias = \"<=\""}},{"Unknown":{"path":"doc","args":"alias = \">=\""}},{"Unknown":{"path":"rustc_on_unimplemented","args":"message = \"can't compare `{Self}` with `{Rhs}`\", label =\n\"no implementation for `{Self} < {Rhs}` and `{Self} > {Rhs}`\",\nappend_const_msg"}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"PartialOrd\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"partial_ord"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Rhs"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[{"clause_id":0,"span":{"span":{"file_id":23,"beg":{"line":1340,"col":42},"end":{"line":1340,"col":56}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":12,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["partial_cmp",{"params":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":30,"generics":{"regions":[{"Var":{"Bound":[0,0]}},{"Var":{"Bound":[0,1]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":11,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[11,"partial_cmp"]}}]]},{"def_id":12,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["PartialEq",0]}],"span":{"span":{"file_id":23,"beg":{"line":249,"col":0},"end":{"line":249,"col":39}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Trait for comparisons using the equality operator."},{"DocComment":""},{"DocComment":" Implementing this trait for types provides the `==` and `!=` operators for"},{"DocComment":" those types."},{"DocComment":""},{"DocComment":" `x.eq(y)` can also be written `x == y`, and `x.ne(y)` can be written `x != y`."},{"DocComment":" We use the easier-to-read infix notation in the remainder of this documentation."},{"DocComment":""},{"DocComment":" This trait allows for comparisons using the equality operator, for types"},{"DocComment":" that do not have a full equivalence relation. For example, in floating point"},{"DocComment":" numbers `NaN != NaN`, so floating point types implement `PartialEq` but not"},{"DocComment":" [`trait@Eq`]. Formally speaking, when `Rhs == Self`, this trait corresponds"},{"DocComment":" to a [partial equivalence relation]."},{"DocComment":""},{"DocComment":" [partial equivalence relation]: https://en.wikipedia.org/wiki/Partial_equivalence_relation"},{"DocComment":""},{"DocComment":" Implementations must ensure that `eq` and `ne` are consistent with each other:"},{"DocComment":""},{"DocComment":" - `a != b` if and only if `!(a == b)`."},{"DocComment":""},{"DocComment":" The default implementation of `ne` provides this consistency and is almost"},{"DocComment":" always sufficient. It should not be overridden without very good reason."},{"DocComment":""},{"DocComment":" If [`PartialOrd`] or [`Ord`] are also implemented for `Self` and `Rhs`, their methods must also"},{"DocComment":" be consistent with `PartialEq` (see the documentation of those traits for the exact"},{"DocComment":" requirements). It's easy to accidentally make them disagree by deriving some of the traits and"},{"DocComment":" manually implementing others."},{"DocComment":""},{"DocComment":" The equality relation `==` must satisfy the following conditions"},{"DocComment":" (for all `a`, `b`, `c` of type `A`, `B`, `C`):"},{"DocComment":""},{"DocComment":" - **Symmetry**: if `A: PartialEq<B>` and `B: PartialEq<A>`, then **`a == b`"},{"DocComment":"   implies `b == a`**; and"},{"DocComment":""},{"DocComment":" - **Transitivity**: if `A: PartialEq<B>` and `B: PartialEq<C>` and `A:"},{"DocComment":"   PartialEq<C>`, then **`a == b` and `b == c` implies `a == c`**."},{"DocComment":"   This must also work for longer chains, such as when `A: PartialEq<B>`, `B: PartialEq<C>`,"},{"DocComment":"   `C: PartialEq<D>`, and `A: PartialEq<D>` all exist."},{"DocComment":""},{"DocComment":" Note that the `B: PartialEq<A>` (symmetric) and `A: PartialEq<C>`"},{"DocComment":" (transitive) impls are not forced to exist, but these requirements apply"},{"DocComment":" whenever they do exist."},{"DocComment":""},{"DocComment":" Violating these requirements is a logic error. The behavior resulting from a logic error is not"},{"DocComment":" specified, but users of the trait must ensure that such logic errors do *not* result in"},{"DocComment":" undefined behavior. This means that `unsafe` code **must not** rely on the correctness of these"},{"DocComment":" methods."},{"DocComment":""},{"DocComment":" ## Cross-crate considerations"},{"DocComment":""},{"DocComment":" Upholding the requirements stated above can become tricky when one crate implements `PartialEq`"},{"DocComment":" for a type of another crate (i.e., to allow comparing one of its own types with a type from the"},{"DocComment":" standard library). The recommendation is to never implement this trait for a foreign type. In"},{"DocComment":" other words, such a crate should do `impl PartialEq<ForeignType> for LocalType`, but it should"},{"DocComment":" *not* do `impl PartialEq<LocalType> for ForeignType`."},{"DocComment":""},{"DocComment":" This avoids the problem of transitive chains that criss-cross crate boundaries: for all local"},{"DocComment":" types `T`, you may assume that no other crate will add `impl`s that allow comparing `T == U`. In"},{"DocComment":" other words, if other crates add `impl`s that allow building longer transitive chains `U1 == ..."},{"DocComment":" == T == V1 == ...`, then all the types that appear to the right of `T` must be types that the"},{"DocComment":" crate defining `T` already knows about. This rules out transitive chains where downstream crates"},{"DocComment":" can add new `impl`s that \"stitch together\" comparisons of foreign types in ways that violate"},{"DocComment":" transitivity."},{"DocComment":""},{"DocComment":" Not having such foreign `impl`s also avoids forward compatibility issues where one crate adding"},{"DocComment":" more `PartialEq` implementations can cause build failures in downstream crates."},{"DocComment":""},{"DocComment":" ## Derivable"},{"DocComment":""},{"DocComment":" This trait can be used with `#[derive]`. When `derive`d on structs, two"},{"DocComment":" instances are equal if all fields are equal, and not equal if any fields"},{"DocComment":" are not equal. When `derive`d on enums, two instances are equal if they"},{"DocComment":" are the same variant and all fields are equal."},{"DocComment":""},{"DocComment":" ## How can I implement `PartialEq`?"},{"DocComment":""},{"DocComment":" An example implementation for a domain in which two books are considered"},{"DocComment":" the same book if their ISBN matches, even if the formats differ:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" enum BookFormat {"},{"DocComment":"     Paperback,"},{"DocComment":"     Hardback,"},{"DocComment":"     Ebook,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" struct Book {"},{"DocComment":"     isbn: i32,"},{"DocComment":"     format: BookFormat,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl PartialEq for Book {"},{"DocComment":"     fn eq(&self, other: &Self) -> bool {"},{"DocComment":"         self.isbn == other.isbn"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" let b1 = Book { isbn: 3, format: BookFormat::Paperback };"},{"DocComment":" let b2 = Book { isbn: 3, format: BookFormat::Ebook };"},{"DocComment":" let b3 = Book { isbn: 10, format: BookFormat::Paperback };"},{"DocComment":""},{"DocComment":" assert!(b1 == b2);"},{"DocComment":" assert!(b1 != b3);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" ## How can I compare two different types?"},{"DocComment":""},{"DocComment":" The type you can compare with is controlled by `PartialEq`'s type parameter."},{"DocComment":" For example, let's tweak our previous code a bit:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" // The derive implements <BookFormat> == <BookFormat> comparisons"},{"DocComment":" #[derive(PartialEq)]"},{"DocComment":" enum BookFormat {"},{"DocComment":"     Paperback,"},{"DocComment":"     Hardback,"},{"DocComment":"     Ebook,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" struct Book {"},{"DocComment":"     isbn: i32,"},{"DocComment":"     format: BookFormat,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" // Implement <Book> == <BookFormat> comparisons"},{"DocComment":" impl PartialEq<BookFormat> for Book {"},{"DocComment":"     fn eq(&self, other: &BookFormat) -> bool {"},{"DocComment":"         self.format == *other"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" // Implement <BookFormat> == <Book> comparisons"},{"DocComment":" impl PartialEq<Book> for BookFormat {"},{"DocComment":"     fn eq(&self, other: &Book) -> bool {"},{"DocComment":"         *self == other.format"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" let b1 = Book { isbn: 3, format: BookFormat::Paperback };"},{"DocComment":""},{"DocComment":" assert!(b1 == BookFormat::Paperback);"},{"DocComment":" assert!(BookFormat::Ebook != b1);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" By changing `impl PartialEq for Book` to `impl PartialEq<BookFormat> for Book`,"},{"DocComment":" we allow `BookFormat`s to be compared with `Book`s."},{"DocComment":""},{"DocComment":" A comparison like the one above, which ignores some fields of the struct,"},{"DocComment":" can be dangerous. It can easily lead to an unintended violation of the"},{"DocComment":" requirements for a partial equivalence relation. For example, if we kept"},{"DocComment":" the above implementation of `PartialEq<Book>` for `BookFormat` and added an"},{"DocComment":" implementation of `PartialEq<Book>` for `Book` (either via a `#[derive]` or"},{"DocComment":" via the manual implementation from the first example) then the result would"},{"DocComment":" violate transitivity:"},{"DocComment":""},{"DocComment":" ```should_panic"},{"DocComment":" #[derive(PartialEq)]"},{"DocComment":" enum BookFormat {"},{"DocComment":"     Paperback,"},{"DocComment":"     Hardback,"},{"DocComment":"     Ebook,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" #[derive(PartialEq)]"},{"DocComment":" struct Book {"},{"DocComment":"     isbn: i32,"},{"DocComment":"     format: BookFormat,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl PartialEq<BookFormat> for Book {"},{"DocComment":"     fn eq(&self, other: &BookFormat) -> bool {"},{"DocComment":"         self.format == *other"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl PartialEq<Book> for BookFormat {"},{"DocComment":"     fn eq(&self, other: &Book) -> bool {"},{"DocComment":"         *self == other.format"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" fn main() {"},{"DocComment":"     let b1 = Book { isbn: 1, format: BookFormat::Paperback };"},{"DocComment":"     let b2 = Book { isbn: 2, format: BookFormat::Paperback };"},{"DocComment":""},{"DocComment":"     assert!(b1 == BookFormat::Paperback);"},{"DocComment":"     assert!(BookFormat::Paperback == b2);"},{"DocComment":""},{"DocComment":"     // The following should hold by transitivity but doesn't."},{"DocComment":"     assert!(b1 == b2); // <-- PANICS"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let x: u32 = 0;"},{"DocComment":" let y: u32 = 1;"},{"DocComment":""},{"DocComment":" assert_eq!(x == y, false);"},{"DocComment":" assert_eq!(x.eq(&y), false);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" [`eq`]: PartialEq::eq"},{"DocComment":" [`ne`]: PartialEq::ne"},{"Unknown":{"path":"doc","args":"alias = \"==\""}},{"Unknown":{"path":"doc","args":"alias = \"!=\""}},{"Unknown":{"path":"rustc_on_unimplemented","args":"message = \"can't compare `{Self}` with `{Rhs}`\", label =\n\"no implementation for `{Self} == {Rhs}`\", append_const_msg"}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"PartialEq\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"eq"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Rhs"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["eq",{"params":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":28,"generics":{"regions":[{"Var":{"Bound":[0,0]}},{"Var":{"Bound":[0,1]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":12,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[12,"eq"]}}]]},{"def_id":13,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["clone",0]},{"Ident":["Clone",0]}],"span":{"span":{"file_id":32,"beg":{"line":149,"col":0},"end":{"line":149,"col":22}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" A common trait for the ability to explicitly duplicate an object."},{"DocComment":""},{"DocComment":" Differs from [`Copy`] in that [`Copy`] is implicit and an inexpensive bit-wise copy, while"},{"DocComment":" `Clone` is always explicit and may or may not be expensive. In order to enforce"},{"DocComment":" these characteristics, Rust does not allow you to reimplement [`Copy`], but you"},{"DocComment":" may reimplement `Clone` and run arbitrary code."},{"DocComment":""},{"DocComment":" Since `Clone` is more general than [`Copy`], you can automatically make anything"},{"DocComment":" [`Copy`] be `Clone` as well."},{"DocComment":""},{"DocComment":" ## Derivable"},{"DocComment":""},{"DocComment":" This trait can be used with `#[derive]` if all fields are `Clone`. The `derive`d"},{"DocComment":" implementation of [`Clone`] calls [`clone`] on each field."},{"DocComment":""},{"DocComment":" [`clone`]: Clone::clone"},{"DocComment":""},{"DocComment":" For a generic struct, `#[derive]` implements `Clone` conditionally by adding bound `Clone` on"},{"DocComment":" generic parameters."},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" // `derive` implements Clone for Reading<T> when T is Clone."},{"DocComment":" #[derive(Clone)]"},{"DocComment":" struct Reading<T> {"},{"DocComment":"     frequency: T,"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" ## How can I implement `Clone`?"},{"DocComment":""},{"DocComment":" Types that are [`Copy`] should have a trivial implementation of `Clone`. More formally:"},{"DocComment":" if `T: Copy`, `x: T`, and `y: &T`, then `let x = y.clone();` is equivalent to `let x = *y;`."},{"DocComment":" Manual implementations should be careful to uphold this invariant; however, unsafe code"},{"DocComment":" must not rely on it to ensure memory safety."},{"DocComment":""},{"DocComment":" An example is a generic struct holding a function pointer. In this case, the"},{"DocComment":" implementation of `Clone` cannot be `derive`d, but can be implemented as:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" struct Generate<T>(fn() -> T);"},{"DocComment":""},{"DocComment":" impl<T> Copy for Generate<T> {}"},{"DocComment":""},{"DocComment":" impl<T> Clone for Generate<T> {"},{"DocComment":"     fn clone(&self) -> Self {"},{"DocComment":"         *self"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" If we `derive`:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" #[derive(Copy, Clone)]"},{"DocComment":" struct Generate<T>(fn() -> T);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" the auto-derived implementations will have unnecessary `T: Copy` and `T: Clone` bounds:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # struct Generate<T>(fn() -> T);"},{"DocComment":""},{"DocComment":" // Automatically derived"},{"DocComment":" impl<T: Copy> Copy for Generate<T> { }"},{"DocComment":""},{"DocComment":" // Automatically derived"},{"DocComment":" impl<T: Clone> Clone for Generate<T> {"},{"DocComment":"     fn clone(&self) -> Generate<T> {"},{"DocComment":"         Generate(Clone::clone(&self.0))"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" The bounds are unnecessary because clearly the function itself should be"},{"DocComment":" copy- and cloneable even if its return type is not:"},{"DocComment":""},{"DocComment":" ```compile_fail,E0599"},{"DocComment":" #[derive(Copy, Clone)]"},{"DocComment":" struct Generate<T>(fn() -> T);"},{"DocComment":""},{"DocComment":" struct NotCloneable;"},{"DocComment":""},{"DocComment":" fn generate_not_cloneable() -> NotCloneable {"},{"DocComment":"     NotCloneable"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" Generate(generate_not_cloneable).clone(); // error: trait bounds were not satisfied"},{"DocComment":" // Note: With the manual implementations the above line will compile."},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" ## Additional implementors"},{"DocComment":""},{"DocComment":" In addition to the [implementors listed below][impls],"},{"DocComment":" the following types also implement `Clone`:"},{"DocComment":""},{"DocComment":" * Function item types (i.e., the distinct types defined for each function)"},{"DocComment":" * Function pointer types (e.g., `fn() -> i32`)"},{"DocComment":" * Closure types, if they capture no value from the environment"},{"DocComment":"   or if all such captured values implement `Clone` themselves."},{"DocComment":"   Note that variables captured by shared reference always implement `Clone`"},{"DocComment":"   (even if the referent doesn't),"},{"DocComment":"   while variables captured by mutable reference never implement `Clone`."},{"DocComment":""},{"DocComment":" [impls]: #implementors"},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"Clone\""}},{"Unknown":{"path":"rustc_trivial_field_reads","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"clone"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[null],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["clone",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":39,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":13,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[13,"clone"]}}]]},{"def_id":14,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["FnMut",0]}],"span":{"span":{"file_id":33,"beg":{"line":163,"col":0},"end":{"line":163,"col":42}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" The version of the call operator that takes a mutable receiver."},{"DocComment":""},{"DocComment":" Instances of `FnMut` can be called repeatedly and may mutate state."},{"DocComment":""},{"DocComment":" `FnMut` is implemented automatically by closures which take mutable"},{"DocComment":" references to captured variables, as well as all types that implement"},{"DocComment":" [`Fn`], e.g., (safe) [function pointers] (since `FnMut` is a supertrait of"},{"DocComment":" [`Fn`]). Additionally, for any type `F` that implements `FnMut`, `&mut F`"},{"DocComment":" implements `FnMut`, too."},{"DocComment":""},{"DocComment":" Since [`FnOnce`] is a supertrait of `FnMut`, any instance of `FnMut` can be"},{"DocComment":" used where a [`FnOnce`] is expected, and since [`Fn`] is a subtrait of"},{"DocComment":" `FnMut`, any instance of [`Fn`] can be used where `FnMut` is expected."},{"DocComment":""},{"DocComment":" Use `FnMut` as a bound when you want to accept a parameter of function-like"},{"DocComment":" type and need to call it repeatedly, while allowing it to mutate state."},{"DocComment":" If you don't want the parameter to mutate state, use [`Fn`] as a"},{"DocComment":" bound; if you don't need to call it repeatedly, use [`FnOnce`]."},{"DocComment":""},{"DocComment":" See the [chapter on closures in *The Rust Programming Language*][book] for"},{"DocComment":" some more information on this topic."},{"DocComment":""},{"DocComment":" Also of note is the special syntax for `Fn` traits (e.g."},{"DocComment":" `Fn(usize, bool) -> usize`). Those interested in the technical details of"},{"DocComment":" this can refer to [the relevant section in the *Rustonomicon*][nomicon]."},{"DocComment":""},{"DocComment":" [book]: ../../book/ch13-01-closures.html"},{"DocComment":" [function pointers]: fn"},{"DocComment":" [nomicon]: ../../nomicon/hrtb.html"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ## Calling a mutably capturing closure"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let mut x = 5;"},{"DocComment":" {"},{"DocComment":"     let mut square_x = || x *= x;"},{"DocComment":"     square_x();"},{"DocComment":" }"},{"DocComment":" assert_eq!(x, 25);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" ## Using a `FnMut` parameter"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" fn do_twice<F>(mut func: F)"},{"DocComment":"     where F: FnMut()"},{"DocComment":" {"},{"DocComment":"     func();"},{"DocComment":"     func();"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" let mut x: usize = 1;"},{"DocComment":" {"},{"DocComment":"     let add_two_to_x = || x += 2;"},{"DocComment":"     do_twice(add_two_to_x);"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" assert_eq!(x, 5);"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_on_unimplemented","args":"on(Args = \"()\", note =\n\"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"),\non(Self = \"unsafe fn\", note =\n\"unsafe function cannot be called generically without an unsafe block\", label\n= \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"), message =\n\"expected a `{Trait}` closure, found `{Self}`\", label =\n\"expected an `{Trait}` closure, found `{Self}`\""}},{"Unknown":{"path":"fundamental","args":null}},{"Unknown":{"path":"must_use","args":"\"closures are lazy and do nothing unless called\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"fn_mut"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Args"},{"index":2,"name":"Self_Clause0_Output"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[{"clause_id":0,"span":{"span":{"file_id":33,"beg":{"line":163,"col":30},"end":{"line":163,"col":42}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":16,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}},null,null],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["call_mut",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":49,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":14,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[14,"call_mut"]}}]]},{"def_id":15,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["Try",0]}],"span":{"span":{"file_id":34,"beg":{"line":131,"col":0},"end":{"line":131,"col":27}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" The `?` operator and `try {}` blocks."},{"DocComment":""},{"DocComment":" `try_*` methods typically involve a type implementing this trait.  For"},{"DocComment":" example, the closures passed to [`Iterator::try_fold`] and"},{"DocComment":" [`Iterator::try_for_each`] must return such a type."},{"DocComment":""},{"DocComment":" `Try` types are typically those containing two or more categories of values,"},{"DocComment":" some subset of which are so commonly handled via early returns that it's"},{"DocComment":" worth providing a terse (but still visible) syntax to make that easy."},{"DocComment":""},{"DocComment":" This is most often seen for error handling with [`Result`] and [`Option`]."},{"DocComment":" The quintessential implementation of this trait is on [`ControlFlow`]."},{"DocComment":""},{"DocComment":" # Using `Try` in Generic Code"},{"DocComment":""},{"DocComment":" `Iterator::try_fold` was stabilized to call back in Rust 1.27, but"},{"DocComment":" this trait is much newer.  To illustrate the various associated types and"},{"DocComment":" methods, let's implement our own version."},{"DocComment":""},{"DocComment":" As a reminder, an infallible version of a fold looks something like this:"},{"DocComment":" ```"},{"DocComment":" fn simple_fold<A, T>("},{"DocComment":"     iter: impl Iterator<Item = T>,"},{"DocComment":"     mut accum: A,"},{"DocComment":"     mut f: impl FnMut(A, T) -> A,"},{"DocComment":" ) -> A {"},{"DocComment":"     for x in iter {"},{"DocComment":"         accum = f(accum, x);"},{"DocComment":"     }"},{"DocComment":"     accum"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" So instead of `f` returning just an `A`, we'll need it to return some other"},{"DocComment":" type that produces an `A` in the \"don't short circuit\" path.  Conveniently,"},{"DocComment":" that's also the type we need to return from the function."},{"DocComment":""},{"DocComment":" Let's add a new generic parameter `R` for that type, and bound it to the"},{"DocComment":" output type that we want:"},{"DocComment":" ```"},{"DocComment":" # #![feature(try_trait_v2)]"},{"DocComment":" # use std::ops::Try;"},{"DocComment":" fn simple_try_fold_1<A, T, R: Try<Output = A>>("},{"DocComment":"     iter: impl Iterator<Item = T>,"},{"DocComment":"     mut accum: A,"},{"DocComment":"     mut f: impl FnMut(A, T) -> R,"},{"DocComment":" ) -> R {"},{"DocComment":"     todo!()"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" If we get through the entire iterator, we need to wrap up the accumulator"},{"DocComment":" into the return type using [`Try::from_output`]:"},{"DocComment":" ```"},{"DocComment":" # #![feature(try_trait_v2)]"},{"DocComment":" # use std::ops::{ControlFlow, Try};"},{"DocComment":" fn simple_try_fold_2<A, T, R: Try<Output = A>>("},{"DocComment":"     iter: impl Iterator<Item = T>,"},{"DocComment":"     mut accum: A,"},{"DocComment":"     mut f: impl FnMut(A, T) -> R,"},{"DocComment":" ) -> R {"},{"DocComment":"     for x in iter {"},{"DocComment":"         let cf = f(accum, x).branch();"},{"DocComment":"         match cf {"},{"DocComment":"             ControlFlow::Continue(a) => accum = a,"},{"DocComment":"             ControlFlow::Break(_) => todo!(),"},{"DocComment":"         }"},{"DocComment":"     }"},{"DocComment":"     R::from_output(accum)"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" We'll also need [`FromResidual::from_residual`] to turn the residual back"},{"DocComment":" into the original type.  But because it's a supertrait of `Try`, we don't"},{"DocComment":" need to mention it in the bounds.  All types which implement `Try` can be"},{"DocComment":" recreated from their corresponding residual, so we'll just call it:"},{"DocComment":" ```"},{"DocComment":" # #![feature(try_trait_v2)]"},{"DocComment":" # use std::ops::{ControlFlow, Try};"},{"DocComment":" pub fn simple_try_fold_3<A, T, R: Try<Output = A>>("},{"DocComment":"     iter: impl Iterator<Item = T>,"},{"DocComment":"     mut accum: A,"},{"DocComment":"     mut f: impl FnMut(A, T) -> R,"},{"DocComment":" ) -> R {"},{"DocComment":"     for x in iter {"},{"DocComment":"         let cf = f(accum, x).branch();"},{"DocComment":"         match cf {"},{"DocComment":"             ControlFlow::Continue(a) => accum = a,"},{"DocComment":"             ControlFlow::Break(r) => return R::from_residual(r),"},{"DocComment":"         }"},{"DocComment":"     }"},{"DocComment":"     R::from_output(accum)"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" But this \"call `branch`, then `match` on it, and `return` if it was a"},{"DocComment":" `Break`\" is exactly what happens inside the `?` operator.  So rather than"},{"DocComment":" do all this manually, we can just use `?` instead:"},{"DocComment":" ```"},{"DocComment":" # #![feature(try_trait_v2)]"},{"DocComment":" # use std::ops::Try;"},{"DocComment":" fn simple_try_fold<A, T, R: Try<Output = A>>("},{"DocComment":"     iter: impl Iterator<Item = T>,"},{"DocComment":"     mut accum: A,"},{"DocComment":"     mut f: impl FnMut(A, T) -> R,"},{"DocComment":" ) -> R {"},{"DocComment":"     for x in iter {"},{"DocComment":"         accum = f(accum, x)?;"},{"DocComment":"     }"},{"DocComment":"     R::from_output(accum)"},{"DocComment":" }"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_on_unimplemented","args":"on(all(from_desugaring = \"TryBlock\"), message =\n\"a `try` block must return `Result` or `Option` \\\n                    (or another type that implements `{This}`)\",\nlabel =\n\"could not wrap the final value of the block as `{Self}` doesn't implement `Try`\",),\non(all(from_desugaring = \"QuestionMark\"), message =\n\"the `?` operator can only be applied to values that implement `{This}`\",\nlabel = \"the `?` operator cannot be applied to type `{Self}`\")"}},{"Unknown":{"path":"doc","args":"alias = \"?\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"Try"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Self_Output"},{"index":2,"name":"Self_Residual"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[{"clause_id":0,"span":{"span":{"file_id":34,"beg":{"line":131,"col":15},"end":{"line":131,"col":27}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":19,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}},null,null],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["from_output",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":51,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":15,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[15,"from_output"]}}],["branch",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":52,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":15,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[15,"branch"]}}]]},{"def_id":16,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["FnOnce",0]}],"span":{"span":{"file_id":33,"beg":{"line":242,"col":0},"end":{"line":242,"col":29}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" The version of the call operator that takes a by-value receiver."},{"DocComment":""},{"DocComment":" Instances of `FnOnce` can be called, but might not be callable multiple"},{"DocComment":" times. Because of this, if the only thing known about a type is that it"},{"DocComment":" implements `FnOnce`, it can only be called once."},{"DocComment":""},{"DocComment":" `FnOnce` is implemented automatically by closures that might consume captured"},{"DocComment":" variables, as well as all types that implement [`FnMut`], e.g., (safe)"},{"DocComment":" [function pointers] (since `FnOnce` is a supertrait of [`FnMut`])."},{"DocComment":""},{"DocComment":" Since both [`Fn`] and [`FnMut`] are subtraits of `FnOnce`, any instance of"},{"DocComment":" [`Fn`] or [`FnMut`] can be used where a `FnOnce` is expected."},{"DocComment":""},{"DocComment":" Use `FnOnce` as a bound when you want to accept a parameter of function-like"},{"DocComment":" type and only need to call it once. If you need to call the parameter"},{"DocComment":" repeatedly, use [`FnMut`] as a bound; if you also need it to not mutate"},{"DocComment":" state, use [`Fn`]."},{"DocComment":""},{"DocComment":" See the [chapter on closures in *The Rust Programming Language*][book] for"},{"DocComment":" some more information on this topic."},{"DocComment":""},{"DocComment":" Also of note is the special syntax for `Fn` traits (e.g."},{"DocComment":" `Fn(usize, bool) -> usize`). Those interested in the technical details of"},{"DocComment":" this can refer to [the relevant section in the *Rustonomicon*][nomicon]."},{"DocComment":""},{"DocComment":" [book]: ../../book/ch13-01-closures.html"},{"DocComment":" [function pointers]: fn"},{"DocComment":" [nomicon]: ../../nomicon/hrtb.html"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ## Using a `FnOnce` parameter"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" fn consume_with_relish<F>(func: F)"},{"DocComment":"     where F: FnOnce() -> String"},{"DocComment":" {"},{"DocComment":"     // `func` consumes its captured variables, so it cannot be run more"},{"DocComment":"     // than once."},{"DocComment":"     println!(\"Consumed: {}\", func());"},{"DocComment":""},{"DocComment":"     println!(\"Delicious!\");"},{"DocComment":""},{"DocComment":"     // Attempting to invoke `func()` again will throw a `use of moved"},{"DocComment":"     // value` error for `func`."},{"DocComment":" }"},{"DocComment":""},{"DocComment":" let x = String::from(\"x\");"},{"DocComment":" let consume_and_return_x = move || x;"},{"DocComment":" consume_with_relish(consume_and_return_x);"},{"DocComment":""},{"DocComment":" // `consume_and_return_x` can no longer be invoked at this point"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_on_unimplemented","args":"on(Args = \"()\", note =\n\"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"),\non(Self = \"unsafe fn\", note =\n\"unsafe function cannot be called generically without an unsafe block\", label\n= \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"), message =\n\"expected a `{Trait}` closure, found `{Self}`\", label =\n\"expected an `{Trait}` closure, found `{Self}`\""}},{"Unknown":{"path":"fundamental","args":null}},{"Unknown":{"path":"must_use","args":"\"closures are lazy and do nothing unless called\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"fn_once"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Args"},{"index":2,"name":"Self_Output"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[null,null,null],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["call_once",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":50,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":16,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[16,"call_once"]}}]]},{"def_id":17,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["adapters",0]},{"Ident":["zip",0]},{"Ident":["TrustedRandomAccessNoCoerce",0]}],"span":{"span":{"file_id":35,"beg":{"line":593,"col":0},"end":{"line":593,"col":51}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Like [`TrustedRandomAccess`] but without any of the requirements / guarantees around"},{"DocComment":" coercions to supertypes after `__iterator_get_unchecked` (they aren’t allowed here!), and"},{"DocComment":" without the requirement that subtypes / supertypes implement `TrustedRandomAccessNoCoerce`."},{"DocComment":""},{"DocComment":" This trait was created in PR #85874 to fix soundness issue #85873 without performance regressions."},{"DocComment":" It is subject to change as we might want to build a more generally useful (for performance"},{"DocComment":" optimizations) and more sophisticated trait or trait hierarchy that replaces or extends"},{"DocComment":" [`TrustedRandomAccess`] and `TrustedRandomAccessNoCoerce`."},{"Unknown":{"path":"doc","args":"hidden"}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[null],"consts":[["MAY_HAVE_SIDE_EFFECT",{"Literal":"Bool"}]],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[]},null,{"def_id":19,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["FromResidual",0]}],"span":{"span":{"file_id":34,"beg":{"line":307,"col":0},"end":{"line":307,"col":51}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Used to specify which residuals can be converted into which [`crate::ops::Try`] types."},{"DocComment":""},{"DocComment":" Every `Try` type needs to be recreatable from its own associated"},{"DocComment":" `Residual` type, but can also have additional `FromResidual` implementations"},{"DocComment":" to support interconversion with other `Try` types."},{"Unknown":{"path":"rustc_on_unimplemented","args":"on(all(from_desugaring = \"QuestionMark\", Self = \"core::result::Result<T, E>\",\nR = \"core::option::Option<core::convert::Infallible>\",), message =\n\"the `?` operator can only be used on `Result`s, not `Option`s, \\\n            in {ItemContext} that returns `Result`\",\nlabel = \"use `.ok_or(...)?` to provide an error compatible with `{Self}`\",\nparent_label = \"this function returns a `Result`\"),\non(all(from_desugaring = \"QuestionMark\", Self =\n\"core::result::Result<T, E>\",), message =\n\"the `?` operator can only be used on `Result`s \\\n            in {ItemContext} that returns `Result`\",\nlabel = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\nparent_label = \"this function returns a `Result`\"),\non(all(from_desugaring = \"QuestionMark\", Self = \"core::option::Option<T>\", R =\n\"core::result::Result<T, E>\",), message =\n\"the `?` operator can only be used on `Option`s, not `Result`s, \\\n            in {ItemContext} that returns `Option`\",\nlabel = \"use `.ok()?` if you want to discard the `{R}` error information\",\nparent_label = \"this function returns an `Option`\"),\non(all(from_desugaring = \"QuestionMark\", Self = \"core::option::Option<T>\",),\nmessage =\n\"the `?` operator can only be used on `Option`s \\\n            in {ItemContext} that returns `Option`\",\nlabel = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\nparent_label = \"this function returns an `Option`\"),\non(all(from_desugaring = \"QuestionMark\", Self =\n\"core::ops::control_flow::ControlFlow<B, C>\", R =\n\"core::ops::control_flow::ControlFlow<B, C>\",), message =\n\"the `?` operator in {ItemContext} that returns `ControlFlow<B, _>` \\\n            can only be used on other `ControlFlow<B, _>`s (with the same Break type)\",\nlabel = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\nparent_label = \"this function returns a `ControlFlow`\", note =\n\"unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\"),\non(all(from_desugaring = \"QuestionMark\", Self =\n\"core::ops::control_flow::ControlFlow<B, C>\",), message =\n\"the `?` operator can only be used on `ControlFlow`s \\\n            in {ItemContext} that returns `ControlFlow`\",\nlabel = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\nparent_label = \"this function returns a `ControlFlow`\",),\non(all(from_desugaring = \"QuestionMark\"), message =\n\"the `?` operator can only be used in {ItemContext} \\\n                    that returns `Result` or `Option` \\\n                    (or another type that implements `{This}`)\",\nlabel = \"cannot use the `?` operator in {ItemContext} that returns `{Self}`\",\nparent_label =\n\"this function should return `Result` or `Option` to accept `?`\"),"}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"FromResidual\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"FromResidual"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"R"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[null],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["from_residual",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":53,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":19,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[19,"from_residual"]}}]]},{"def_id":20,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["collect",0]},{"Ident":["FromIterator",0]}],"span":{"span":{"file_id":19,"beg":{"line":134,"col":0},"end":{"line":134,"col":32}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Conversion from an [`Iterator`]."},{"DocComment":""},{"DocComment":" By implementing `FromIterator` for a type, you define how it will be"},{"DocComment":" created from an iterator. This is common for types which describe a"},{"DocComment":" collection of some kind."},{"DocComment":""},{"DocComment":" If you want to create a collection from the contents of an iterator, the"},{"DocComment":" [`Iterator::collect()`] method is preferred. However, when you need to"},{"DocComment":" specify the container type, [`FromIterator::from_iter()`] can be more"},{"DocComment":" readable than using a turbofish (e.g. `::<Vec<_>>()`). See the"},{"DocComment":" [`Iterator::collect()`] documentation for more examples of its use."},{"DocComment":""},{"DocComment":" See also: [`IntoIterator`]."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" Basic usage:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let five_fives = std::iter::repeat(5).take(5);"},{"DocComment":""},{"DocComment":" let v = Vec::from_iter(five_fives);"},{"DocComment":""},{"DocComment":" assert_eq!(v, vec![5, 5, 5, 5, 5]);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" Using [`Iterator::collect()`] to implicitly use `FromIterator`:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let five_fives = std::iter::repeat(5).take(5);"},{"DocComment":""},{"DocComment":" let v: Vec<i32> = five_fives.collect();"},{"DocComment":""},{"DocComment":" assert_eq!(v, vec![5, 5, 5, 5, 5]);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" Using [`FromIterator::from_iter()`] as a more readable alternative to"},{"DocComment":" [`Iterator::collect()`]:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" use std::collections::VecDeque;"},{"DocComment":" let first = (0..10).collect::<VecDeque<i32>>();"},{"DocComment":" let second = VecDeque::from_iter(0..10);"},{"DocComment":""},{"DocComment":" assert_eq!(first, second);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" Implementing `FromIterator` for your type:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" // A sample collection, that's just a wrapper over Vec<T>"},{"DocComment":" #[derive(Debug)]"},{"DocComment":" struct MyCollection(Vec<i32>);"},{"DocComment":""},{"DocComment":" // Let's give it some methods so we can create one and add things"},{"DocComment":" // to it."},{"DocComment":" impl MyCollection {"},{"DocComment":"     fn new() -> MyCollection {"},{"DocComment":"         MyCollection(Vec::new())"},{"DocComment":"     }"},{"DocComment":""},{"DocComment":"     fn add(&mut self, elem: i32) {"},{"DocComment":"         self.0.push(elem);"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" // and we'll implement FromIterator"},{"DocComment":" impl FromIterator<i32> for MyCollection {"},{"DocComment":"     fn from_iter<I: IntoIterator<Item=i32>>(iter: I) -> Self {"},{"DocComment":"         let mut c = MyCollection::new();"},{"DocComment":""},{"DocComment":"         for i in iter {"},{"DocComment":"             c.add(i);"},{"DocComment":"         }"},{"DocComment":""},{"DocComment":"         c"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" // Now we can make a new iterator..."},{"DocComment":" let iter = (0..5).into_iter();"},{"DocComment":""},{"DocComment":" // ... and make a MyCollection out of it"},{"DocComment":" let c = MyCollection::from_iter(iter);"},{"DocComment":""},{"DocComment":" assert_eq!(c.0, vec![0, 1, 2, 3, 4]);"},{"DocComment":""},{"DocComment":" // collect works too!"},{"DocComment":""},{"DocComment":" let iter = (0..5).into_iter();"},{"DocComment":" let c: MyCollection = iter.collect();"},{"DocComment":""},{"DocComment":" assert_eq!(c.0, vec![0, 1, 2, 3, 4]);"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_on_unimplemented","args":"on(Self = \"&[{A}]\", message =\n\"a slice of type `{Self}` cannot be built since we need to store the elements somewhere\",\nlabel = \"try explicitly collecting into a `Vec<{A}>`\",),\non(all(A = \"{integer}\", any(Self = \"&[{integral}]\",)), message =\n\"a slice of type `{Self}` cannot be built since we need to store the elements somewhere\",\nlabel = \"try explicitly collecting into a `Vec<{A}>`\",),\non(Self = \"[{A}]\", message =\n\"a slice of type `{Self}` cannot be built since `{Self}` has no definite size\",\nlabel = \"try explicitly collecting into a `Vec<{A}>`\",),\non(all(A = \"{integer}\", any(Self = \"[{integral}]\",)), message =\n\"a slice of type `{Self}` cannot be built since `{Self}` has no definite size\",\nlabel = \"try explicitly collecting into a `Vec<{A}>`\",),\non(Self = \"[{A}; _]\", message =\n\"an array of type `{Self}` cannot be built directly from an iterator\", label =\n\"try collecting into a `Vec<{A}>`, then using `.try_into()`\",),\non(all(A = \"{integer}\", any(Self = \"[{integral}; _]\",)), message =\n\"an array of type `{Self}` cannot be built directly from an iterator\", label =\n\"try collecting into a `Vec<{A}>`, then using `.try_into()`\",), message =\n\"a value of type `{Self}` cannot be built from an iterator \\\n               over elements of type `{A}`\",\nlabel =\n\"value of type `{Self}` cannot be built from `std::iter::Iterator<Item={A}>`\""}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"FromIterator\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"FromIterator"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"A"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[null,null],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["from_iter",{"params":{"regions":[],"types":[{"index":0,"name":"T"},{"index":1,"name":"Clause1_IntoIter"}],"const_generics":[],"trait_clauses":[null,{"clause_id":1,"span":{"span":{"file_id":19,"beg":{"line":152,"col":20},"end":{"line":152,"col":42}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":4,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"TypeVar":{"Free":1}},{"TypeVar":{"Bound":[1,1]}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[null]},"skip_binder":{"id":149,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Bound":[0,0]}},{"TypeVar":{"Bound":[0,1]}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":20,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},null,{"kind":{"Clause":{"Bound":[0,1]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":4,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"TypeVar":{"Free":1}},{"TypeVar":{"Bound":[1,1]}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[20,"from_iter"]}}]]},{"def_id":21,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["try_trait",0]},{"Ident":["Residual",0]}],"span":{"span":{"file_id":34,"beg":{"line":360,"col":0},"end":{"line":360,"col":21}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Allows retrieving the canonical type implementing [`Try`] that has this type"},{"DocComment":" as its residual and allows it to hold an `O` as its output."},{"DocComment":""},{"DocComment":" If you think of the `Try` trait as splitting a type into its [`Try::Output`]"},{"DocComment":" and [`Try::Residual`] components, this allows putting them back together."},{"DocComment":""},{"DocComment":" For example,"},{"DocComment":" `Result<T, E>: Try<Output = T, Residual = Result<Infallible, E>>`,"},{"DocComment":" and in the other direction,"},{"DocComment":" `<Result<Infallible, E> as Residual<T>>::TryType = Result<T, E>`."}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"O"},{"index":2,"name":"Self_TryType"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[null,null]},"parent_clauses":[null,null,{"clause_id":2,"span":{"span":{"file_id":34,"beg":{"line":363,"col":18},"end":{"line":363,"col":50}},"generated_from_span":null},"origin":{"TraitItem":"TryType"},"trait_":{"regions":[],"skip_binder":{"id":15,"generics":{"regions":[],"types":[{"TypeVar":{"Free":2}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[]},{"def_id":22,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["collect",0]},{"Ident":["Extend",0]}],"span":{"span":{"file_id":19,"beg":{"line":394,"col":0},"end":{"line":394,"col":19}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Extend a collection with the contents of an iterator."},{"DocComment":""},{"DocComment":" Iterators produce a series of values, and collections can also be thought"},{"DocComment":" of as a series of values. The `Extend` trait bridges this gap, allowing you"},{"DocComment":" to extend a collection by including the contents of that iterator. When"},{"DocComment":" extending a collection with an already existing key, that entry is updated"},{"DocComment":" or, in the case of collections that permit multiple entries with equal"},{"DocComment":" keys, that entry is inserted."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" Basic usage:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" // You can extend a String with some chars:"},{"DocComment":" let mut message = String::from(\"The first three letters are: \");"},{"DocComment":""},{"DocComment":" message.extend(&['a', 'b', 'c']);"},{"DocComment":""},{"DocComment":" assert_eq!(\"abc\", &message[29..32]);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" Implementing `Extend`:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" // A sample collection, that's just a wrapper over Vec<T>"},{"DocComment":" #[derive(Debug)]"},{"DocComment":" struct MyCollection(Vec<i32>);"},{"DocComment":""},{"DocComment":" // Let's give it some methods so we can create one and add things"},{"DocComment":" // to it."},{"DocComment":" impl MyCollection {"},{"DocComment":"     fn new() -> MyCollection {"},{"DocComment":"         MyCollection(Vec::new())"},{"DocComment":"     }"},{"DocComment":""},{"DocComment":"     fn add(&mut self, elem: i32) {"},{"DocComment":"         self.0.push(elem);"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" // since MyCollection has a list of i32s, we implement Extend for i32"},{"DocComment":" impl Extend<i32> for MyCollection {"},{"DocComment":""},{"DocComment":"     // This is a bit simpler with the concrete type signature: we can call"},{"DocComment":"     // extend on anything which can be turned into an Iterator which gives"},{"DocComment":"     // us i32s. Because we need i32s to put into MyCollection."},{"DocComment":"     fn extend<T: IntoIterator<Item=i32>>(&mut self, iter: T) {"},{"DocComment":""},{"DocComment":"         // The implementation is very straightforward: loop through the"},{"DocComment":"         // iterator, and add() each element to ourselves."},{"DocComment":"         for elem in iter {"},{"DocComment":"             self.add(elem);"},{"DocComment":"         }"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" let mut c = MyCollection::new();"},{"DocComment":""},{"DocComment":" c.add(5);"},{"DocComment":" c.add(6);"},{"DocComment":" c.add(7);"},{"DocComment":""},{"DocComment":" // let's extend our collection with three more numbers"},{"DocComment":" c.extend(vec![1, 2, 3]);"},{"DocComment":""},{"DocComment":" // we've added these elements onto the end"},{"DocComment":" assert_eq!(\"MyCollection([5, 6, 7, 1, 2, 3])\", format!(\"{c:?}\"));"},{"DocComment":" ```"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"A"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[null],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["extend",{"params":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"},{"index":1,"name":"Clause1_IntoIter"}],"const_generics":[],"trait_clauses":[null,{"clause_id":1,"span":{"span":{"file_id":19,"beg":{"line":413,"col":17},"end":{"line":413,"col":39}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":4,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"TypeVar":{"Free":1}},{"TypeVar":{"Bound":[1,1]}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[null]},"skip_binder":{"id":150,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Bound":[0,0]}},{"TypeVar":{"Bound":[0,1]}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":22,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},null,{"kind":{"Clause":{"Bound":[0,1]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":4,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"TypeVar":{"Free":1}},{"TypeVar":{"Bound":[1,1]}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[22,"extend"]}}]]},{"def_id":23,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["default",0]},{"Ident":["Default",0]}],"span":{"span":{"file_id":37,"beg":{"line":107,"col":0},"end":{"line":107,"col":24}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" A trait for giving a type a useful default value."},{"DocComment":""},{"DocComment":" Sometimes, you want to fall back to some kind of default value, and"},{"DocComment":" don't particularly care what it is. This comes up often with `struct`s"},{"DocComment":" that define a set of options:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # #[allow(dead_code)]"},{"DocComment":" struct SomeOptions {"},{"DocComment":"     foo: i32,"},{"DocComment":"     bar: f32,"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" How can we define some default values? You can use `Default`:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # #[allow(dead_code)]"},{"DocComment":" #[derive(Default)]"},{"DocComment":" struct SomeOptions {"},{"DocComment":"     foo: i32,"},{"DocComment":"     bar: f32,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" fn main() {"},{"DocComment":"     let options: SomeOptions = Default::default();"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" Now, you get all of the default values. Rust implements `Default` for various primitives types."},{"DocComment":""},{"DocComment":" If you want to override a particular option, but still retain the other defaults:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # #[allow(dead_code)]"},{"DocComment":" # #[derive(Default)]"},{"DocComment":" # struct SomeOptions {"},{"DocComment":" #     foo: i32,"},{"DocComment":" #     bar: f32,"},{"DocComment":" # }"},{"DocComment":" fn main() {"},{"DocComment":"     let options = SomeOptions { foo: 42, ..Default::default() };"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" ## Derivable"},{"DocComment":""},{"DocComment":" This trait can be used with `#[derive]` if all of the type's fields implement"},{"DocComment":" `Default`. When `derive`d, it will use the default value for each field's type."},{"DocComment":""},{"DocComment":" ### `enum`s"},{"DocComment":""},{"DocComment":" When using `#[derive(Default)]` on an `enum`, you need to choose which unit variant will be"},{"DocComment":" default. You do this by placing the `#[default]` attribute on the variant."},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" #[derive(Default)]"},{"DocComment":" enum Kind {"},{"DocComment":"     #[default]"},{"DocComment":"     A,"},{"DocComment":"     B,"},{"DocComment":"     C,"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" You cannot use the `#[default]` attribute on non-unit or non-exhaustive variants."},{"DocComment":""},{"DocComment":" The `#[default]` attribute was stabilized in Rust 1.62.0."},{"DocComment":""},{"DocComment":" ## How can I implement `Default`?"},{"DocComment":""},{"DocComment":" Provide an implementation for the `default()` method that returns the value of"},{"DocComment":" your type that should be the default:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # #![allow(dead_code)]"},{"DocComment":" enum Kind {"},{"DocComment":"     A,"},{"DocComment":"     B,"},{"DocComment":"     C,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl Default for Kind {"},{"DocComment":"     fn default() -> Self { Kind::A }"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # #[allow(dead_code)]"},{"DocComment":" #[derive(Default)]"},{"DocComment":" struct SomeOptions {"},{"DocComment":"     foo: i32,"},{"DocComment":"     bar: f32,"},{"DocComment":" }"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"Default\""}},{"Unknown":{"path":"rustc_trivial_field_reads","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"Default"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[null],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["default",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":148,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":23,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[23,"default"]}}]]},{"def_id":24,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["double_ended",0]},{"Ident":["DoubleEndedIterator",0]}],"span":{"span":{"file_id":38,"beg":{"line":41,"col":0},"end":{"line":41,"col":39}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" An iterator able to yield elements from both ends."},{"DocComment":""},{"DocComment":" Something that implements `DoubleEndedIterator` has one extra capability"},{"DocComment":" over something that implements [`Iterator`]: the ability to also take"},{"DocComment":" `Item`s from the back, as well as the front."},{"DocComment":""},{"DocComment":" It is important to note that both back and forth work on the same range,"},{"DocComment":" and do not cross: iteration is over when they meet in the middle."},{"DocComment":""},{"DocComment":" In a similar fashion to the [`Iterator`] protocol, once a"},{"DocComment":" `DoubleEndedIterator` returns [`None`] from a [`next_back()`], calling it"},{"DocComment":" again may or may not ever return [`Some`] again. [`next()`] and"},{"DocComment":" [`next_back()`] are interchangeable for this purpose."},{"DocComment":""},{"DocComment":" [`next_back()`]: DoubleEndedIterator::next_back"},{"DocComment":" [`next()`]: Iterator::next"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" Basic usage:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let numbers = vec![1, 2, 3, 4, 5, 6];"},{"DocComment":""},{"DocComment":" let mut iter = numbers.iter();"},{"DocComment":""},{"DocComment":" assert_eq!(Some(&1), iter.next());"},{"DocComment":" assert_eq!(Some(&6), iter.next_back());"},{"DocComment":" assert_eq!(Some(&5), iter.next_back());"},{"DocComment":" assert_eq!(Some(&2), iter.next());"},{"DocComment":" assert_eq!(Some(&3), iter.next());"},{"DocComment":" assert_eq!(Some(&4), iter.next());"},{"DocComment":" assert_eq!(None, iter.next());"},{"DocComment":" assert_eq!(None, iter.next_back());"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"DoubleEndedIterator\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"DoubleEndedIterator"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Self_Clause0_Item"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[{"clause_id":0,"span":{"span":{"file_id":38,"beg":{"line":41,"col":31},"end":{"line":41,"col":39}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["next_back",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":154,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":24,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[24,"next_back"]}}]]},{"def_id":25,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["exact_size",0]},{"Ident":["ExactSizeIterator",0]}],"span":{"span":{"file_id":39,"beg":{"line":86,"col":0},"end":{"line":86,"col":37}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" An iterator that knows its exact length."},{"DocComment":""},{"DocComment":" Many [`Iterator`]s don't know how many times they will iterate, but some do."},{"DocComment":" If an iterator knows how many times it can iterate, providing access to"},{"DocComment":" that information can be useful. For example, if you want to iterate"},{"DocComment":" backwards, a good start is to know where the end is."},{"DocComment":""},{"DocComment":" When implementing an `ExactSizeIterator`, you must also implement"},{"DocComment":" [`Iterator`]. When doing so, the implementation of [`Iterator::size_hint`]"},{"DocComment":" *must* return the exact size of the iterator."},{"DocComment":""},{"DocComment":" The [`len`] method has a default implementation, so you usually shouldn't"},{"DocComment":" implement it. However, you may be able to provide a more performant"},{"DocComment":" implementation than the default, so overriding it in this case makes sense."},{"DocComment":""},{"DocComment":" Note that this trait is a safe trait and as such does *not* and *cannot*"},{"DocComment":" guarantee that the returned length is correct. This means that `unsafe`"},{"DocComment":" code **must not** rely on the correctness of [`Iterator::size_hint`]. The"},{"DocComment":" unstable and unsafe [`TrustedLen`](super::marker::TrustedLen) trait gives"},{"DocComment":" this additional guarantee."},{"DocComment":""},{"DocComment":" [`len`]: ExactSizeIterator::len"},{"DocComment":""},{"DocComment":" # When *shouldn't* an adapter be `ExactSizeIterator`?"},{"DocComment":""},{"DocComment":" If an adapter makes an iterator *longer*, then it's usually incorrect for"},{"DocComment":" that adapter to implement `ExactSizeIterator`.  The inner exact-sized"},{"DocComment":" iterator might already be `usize::MAX`-long, and thus the length of the"},{"DocComment":" longer adapted iterator would no longer be exactly representable in `usize`."},{"DocComment":""},{"DocComment":" This is why [`Chain<A, B>`](crate::iter::Chain) isn't `ExactSizeIterator`,"},{"DocComment":" even when `A` and `B` are both `ExactSizeIterator`."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" Basic usage:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" // a finite range knows exactly how many times it will iterate"},{"DocComment":" let five = 0..5;"},{"DocComment":""},{"DocComment":" assert_eq!(5, five.len());"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" In the [module-level docs], we implemented an [`Iterator`], `Counter`."},{"DocComment":" Let's implement `ExactSizeIterator` for it as well:"},{"DocComment":""},{"DocComment":" [module-level docs]: crate::iter"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # struct Counter {"},{"DocComment":" #     count: usize,"},{"DocComment":" # }"},{"DocComment":" # impl Counter {"},{"DocComment":" #     fn new() -> Counter {"},{"DocComment":" #         Counter { count: 0 }"},{"DocComment":" #     }"},{"DocComment":" # }"},{"DocComment":" # impl Iterator for Counter {"},{"DocComment":" #     type Item = usize;"},{"DocComment":" #     fn next(&mut self) -> Option<Self::Item> {"},{"DocComment":" #         self.count += 1;"},{"DocComment":" #         if self.count < 6 {"},{"DocComment":" #             Some(self.count)"},{"DocComment":" #         } else {"},{"DocComment":" #             None"},{"DocComment":" #         }"},{"DocComment":" #     }"},{"DocComment":" # }"},{"DocComment":" impl ExactSizeIterator for Counter {"},{"DocComment":"     // We can easily calculate the remaining number of iterations."},{"DocComment":"     fn len(&self) -> usize {"},{"DocComment":"         5 - self.count"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" // And now we can use it!"},{"DocComment":""},{"DocComment":" let mut counter = Counter::new();"},{"DocComment":""},{"DocComment":" assert_eq!(5, counter.len());"},{"DocComment":" let _ = counter.next();"},{"DocComment":" assert_eq!(4, counter.len());"},{"DocComment":" ```"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Self_Clause0_Item"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[{"clause_id":0,"span":{"span":{"file_id":39,"beg":{"line":86,"col":29},"end":{"line":86,"col":37}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[]},{"def_id":26,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["accum",0]},{"Ident":["Sum",0]}],"span":{"span":{"file_id":40,"beg":{"line":17,"col":0},"end":{"line":17,"col":30}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Trait to represent types that can be created by summing up an iterator."},{"DocComment":""},{"DocComment":" This trait is used to implement [`Iterator::sum()`]. Types which implement"},{"DocComment":" this trait can be generated by using the [`sum()`] method on an iterator."},{"DocComment":" Like [`FromIterator`], this trait should rarely be called directly."},{"DocComment":""},{"DocComment":" [`sum()`]: Iterator::sum"},{"DocComment":" [`FromIterator`]: iter::FromIterator"},{"Unknown":{"path":"diagnostic::on_unimplemented","args":"message =\n\"a value of type `{Self}` cannot be made by summing an iterator over elements of type `{A}`\",\nlabel =\n\"value of type `{Self}` cannot be made by summing a `std::iter::Iterator<Item={A}>`\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"A"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[null,null],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["sum",{"params":{"regions":[],"types":[{"index":0,"name":"I"}],"const_generics":[],"trait_clauses":[null,{"clause_id":1,"span":{"span":{"file_id":40,"beg":{"line":21,"col":14},"end":{"line":21,"col":32}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[null]},"skip_binder":{"id":197,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Bound":[0,0]}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":26,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},null,{"kind":{"Clause":{"Bound":[0,1]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[26,"sum"]}}]]},{"def_id":27,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["accum",0]},{"Ident":["Product",0]}],"span":{"span":{"file_id":40,"beg":{"line":38,"col":0},"end":{"line":38,"col":34}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Trait to represent types that can be created by multiplying elements of an"},{"DocComment":" iterator."},{"DocComment":""},{"DocComment":" This trait is used to implement [`Iterator::product()`]. Types which implement"},{"DocComment":" this trait can be generated by using the [`product()`] method on an iterator."},{"DocComment":" Like [`FromIterator`], this trait should rarely be called directly."},{"DocComment":""},{"DocComment":" [`product()`]: Iterator::product"},{"DocComment":" [`FromIterator`]: iter::FromIterator"},{"Unknown":{"path":"diagnostic::on_unimplemented","args":"message =\n\"a value of type `{Self}` cannot be made by multiplying all elements of type `{A}` from an iterator\",\nlabel =\n\"value of type `{Self}` cannot be made by multiplying all elements from a `std::iter::Iterator<Item={A}>`\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"A"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[null,null],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["product",{"params":{"regions":[],"types":[{"index":0,"name":"I"}],"const_generics":[],"trait_clauses":[null,{"clause_id":1,"span":{"span":{"file_id":40,"beg":{"line":42,"col":18},"end":{"line":42,"col":36}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[null]},"skip_binder":{"id":198,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Bound":[0,0]}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":27,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},null,{"kind":{"Clause":{"Bound":[0,1]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[27,"product"]}}]]},{"def_id":28,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["private_slice_index",0]},{"Ident":["Sealed",0]}],"span":{"span":{"file_id":25,"beg":{"line":126,"col":4},"end":{"line":126,"col":20}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[]}],"trait_impls":[null,{"def_id":1,"item_meta":{"name":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Trait":1}}],"span":{"span":{"file_id":2,"beg":{"line":3294,"col":0},"end":{"line":3294,"col":46}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":2,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[null,null,null]}}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[],"types":[{"index":0,"name":"T"},{"index":1,"name":"A"}],"const_generics":[],"trait_clauses":[null,null,null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[],"consts":[],"types":[],"type_clauses":[],"methods":[["deref",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":221,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[null,null,null]}},"kind":{"TraitMethod":[2,"deref"]}}]]},{"def_id":2,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["iter",0]},{"Impl":{"Trait":2}}],"span":{"span":{"file_id":18,"beg":{"line":152,"col":8},"end":{"line":152,"col":45}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":4},"generics":{"regions":[{"Var":{"Free":0}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}},{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[{"index":0,"name":"'a"}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[null],"consts":[],"types":[],"type_clauses":[],"methods":[["next",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":199,"generics":{"regions":[{"Var":{"Free":0}},{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"kind":{"TraitMethod":[3,"next"]}}],["enumerate",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":222,"generics":{"regions":[{"Var":{"Free":0}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null,null]}},"kind":{"TraitMethod":[3,"enumerate"]}}]]},{"def_id":3,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["traits",0]},{"Ident":["collect",0]},{"Impl":{"Trait":3}}],"span":{"span":{"file_id":19,"beg":{"line":314,"col":0},"end":{"line":314,"col":36}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":4,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[],"types":[{"index":0,"name":"I"},{"index":1,"name":"Clause1_Item"}],"const_generics":[],"trait_clauses":[null,{"clause_id":1,"span":{"span":{"file_id":19,"beg":{"line":314,"col":8},"end":{"line":314,"col":16}},"generated_from_span":null},"origin":"WhereClauseOnImpl","trait_":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[null,null,{"kind":{"Clause":{"Free":1}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"types":[],"type_clauses":[],"methods":[["into_iter",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":72,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[null,{"kind":{"Clause":{"Free":1}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[4,"into_iter"]}}]]},{"def_id":4,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["adapters",0]},{"Ident":["enumerate",0]},{"Impl":{"Trait":4}}],"span":{"span":{"file_id":8,"beg":{"line":62,"col":0},"end":{"line":64,"col":16}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[],"types":[{"index":0,"name":"I"},{"index":1,"name":"Clause1_Item"}],"const_generics":[],"trait_clauses":[null,{"clause_id":1,"span":{"span":{"file_id":8,"beg":{"line":64,"col":7},"end":{"line":64,"col":15}},"generated_from_span":null},"origin":"WhereClauseOnImpl","trait_":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[null],"consts":[],"types":[],"type_clauses":[],"methods":[["next",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":41,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[null,{"kind":{"Clause":{"Free":1}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[3,"next"]}}],["enumerate",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":223,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[null,{"kind":{"Clause":{"Free":1}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},null]}},"kind":{"TraitMethod":[3,"enumerate"]}}]]},{"def_id":5,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["bit",0]},{"Impl":{"Trait":5}}],"span":{"span":{"file_id":21,"beg":{"line":10,"col":8},"end":{"line":10,"col":25}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":5,"generics":{"regions":[],"types":[{"Ref":[{"Var":{"Free":0}},{"Literal":"Bool"},"Shared"]},{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[null],"consts":[],"types":[],"type_clauses":[],"methods":[["not",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":187,"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}},"kind":{"TraitMethod":[5,"not"]}}]]},{"def_id":6,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":6}}],"span":{"span":{"file_id":23,"beg":{"line":1936,"col":12},"end":{"line":1936,"col":27}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":6,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[{"kind":{"TraitImpl":{"id":12,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":10,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}}}},{"kind":{"TraitImpl":{"id":13,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":11,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"types":[],"type_clauses":[],"methods":[["cmp",{"params":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":174,"generics":{"regions":[{"Var":{"Bound":[0,0]}},{"Var":{"Bound":[0,1]}}],"types":[],"const_generics":[],"trait_refs":[]}},"kind":{"TraitMethod":[6,"cmp"]}}],["max",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":224,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[null]}},"kind":{"TraitMethod":[6,"max"]}}]]},{"def_id":7,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":7}}],"span":{"span":{"file_id":24,"beg":{"line":844,"col":0},"end":{"line":844,"col":40}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[],"types":[{"index":0,"name":"A"}],"const_generics":[],"trait_clauses":[null,{"clause_id":1,"span":{"span":{"file_id":24,"beg":{"line":844,"col":8},"end":{"line":844,"col":12}},"generated_from_span":null},"origin":"WhereClauseOnImpl","trait_":{"regions":[],"skip_binder":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[null],"consts":[],"types":[],"type_clauses":[],"methods":[["next",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":62,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null,{"kind":{"Clause":{"Free":1}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[3,"next"]}}],["enumerate",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":225,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null,{"kind":{"Clause":{"Free":1}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},null]}},"kind":{"TraitMethod":[3,"enumerate"]}}]]},{"def_id":8,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["iter",0]},{"Ident":["range",0]},{"Impl":{"Trait":8}}],"span":{"span":{"file_id":24,"beg":{"line":257,"col":12},"end":{"line":257,"col":37}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":7,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[null,{"kind":{"TraitImpl":{"id":17,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":13,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}}}},{"kind":{"TraitImpl":{"id":13,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":11,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"types":[],"type_clauses":[],"methods":[["steps_between",{"params":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":189,"generics":{"regions":[{"Var":{"Bound":[0,0]}},{"Var":{"Bound":[0,1]}}],"types":[],"const_generics":[],"trait_refs":[]}},"kind":{"TraitMethod":[7,"steps_between"]}}],["forward_checked",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":190,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},"kind":{"TraitMethod":[7,"forward_checked"]}}],["backward_checked",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":193,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},"kind":{"TraitMethod":[7,"backward_checked"]}}]]},{"def_id":9,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":9}}],"span":{"span":{"file_id":25,"beg":{"line":222,"col":0},"end":{"line":222,"col":40}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" The methods `index` and `index_mut` panic if the index is out of bounds."}],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":8,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[{"kind":{"TraitImpl":{"id":11,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":28,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"types":[],"type_clauses":[],"methods":[["get",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":168,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"kind":{"TraitMethod":[8,"get"]}}],["get_mut",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":169,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"kind":{"TraitMethod":[8,"get_mut"]}}],["get_unchecked",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":170,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"kind":{"TraitMethod":[8,"get_unchecked"]}}],["get_unchecked_mut",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":171,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"kind":{"TraitMethod":[8,"get_unchecked_mut"]}}],["index",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":172,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"kind":{"TraitMethod":[8,"index"]}}],["index_mut",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":173,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"kind":{"TraitMethod":[8,"index_mut"]}}]]},{"def_id":10,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Impl":{"Trait":10}}],"span":{"span":{"file_id":6,"beg":{"line":56,"col":25},"end":{"line":56,"col":62}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":9,"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[{"kind":{"TraitImpl":{"id":15,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":13,"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"types":[],"type_clauses":[],"methods":[]},{"def_id":11,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["private_slice_index",0]},{"Impl":{"Trait":11}}],"span":{"span":{"file_id":25,"beg":{"line":129,"col":4},"end":{"line":129,"col":25}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":28,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[],"consts":[],"types":[],"type_clauses":[],"methods":[]},{"def_id":12,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":12}}],"span":{"span":{"file_id":23,"beg":{"line":1839,"col":12},"end":{"line":1839,"col":26}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":10,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[{"kind":{"TraitImpl":{"id":14,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":12,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"types":[],"type_clauses":[],"methods":[]},{"def_id":13,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":13}}],"span":{"span":{"file_id":23,"beg":{"line":1926,"col":12},"end":{"line":1926,"col":34}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":11,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[{"kind":{"TraitImpl":{"id":14,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":12,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"types":[],"type_clauses":[],"methods":[["partial_cmp",{"params":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":177,"generics":{"regions":[{"Var":{"Bound":[0,0]}},{"Var":{"Bound":[0,1]}}],"types":[],"const_generics":[],"trait_refs":[]}},"kind":{"TraitMethod":[11,"partial_cmp"]}}]]},{"def_id":14,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["cmp",0]},{"Ident":["impls",0]},{"Impl":{"Trait":14}}],"span":{"span":{"file_id":23,"beg":{"line":1811,"col":12},"end":{"line":1811,"col":33}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":12,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}},{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[],"consts":[],"types":[],"type_clauses":[],"methods":[["eq",{"params":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":175,"generics":{"regions":[{"Var":{"Bound":[0,0]}},{"Var":{"Bound":[0,1]}}],"types":[],"const_generics":[],"trait_refs":[]}},"kind":{"TraitMethod":[12,"eq"]}}]]},{"def_id":15,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["clone",0]},{"Ident":["impls",0]},{"Impl":{"Trait":15}}],"span":{"span":{"file_id":32,"beg":{"line":502,"col":16},"end":{"line":502,"col":33}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":13,"generics":{"regions":[],"types":[{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[null],"consts":[],"types":[],"type_clauses":[],"methods":[["clone",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":186,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[],"const_generics":[],"trait_refs":[]}},"kind":{"TraitMethod":[13,"clone"]}}]]},{"def_id":16,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["bit",0]},{"Impl":{"Trait":16}}],"span":{"span":{"file_id":20,"beg":{"line":57,"col":8},"end":{"line":57,"col":23}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":5,"generics":{"regions":[],"types":[{"Literal":"Bool"},{"Literal":"Bool"}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[null],"consts":[],"types":[],"type_clauses":[],"methods":[["not",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":188,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},"kind":{"TraitMethod":[5,"not"]}}]]},{"def_id":17,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["clone",0]},{"Ident":["impls",0]},{"Impl":{"Trait":17}}],"span":{"span":{"file_id":32,"beg":{"line":502,"col":16},"end":{"line":502,"col":33}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":13,"generics":{"regions":[],"types":[{"Literal":{"Integer":"Usize"}}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[null],"consts":[],"types":[],"type_clauses":[],"methods":[["clone",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":196,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[],"const_generics":[],"trait_refs":[]}},"kind":{"TraitMethod":[13,"clone"]}}]]}],"ordered_decls":[{"TraitDecl":{"NonRec":13}},{"Fun":{"NonRec":39}},{"Fun":{"NonRec":186}},{"TraitImpl":{"NonRec":15}},{"Fun":{"NonRec":196}},{"TraitImpl":{"NonRec":17}},{"TraitDecl":{"NonRec":12}},{"Fun":{"NonRec":28}},{"TraitDecl":{"NonRec":10}},{"Type":{"NonRec":8}},{"Type":{"NonRec":5}},{"TraitDecl":{"NonRec":11}},{"TraitDecl":{"NonRec":6}},{"Fun":{"NonRec":24}},{"Fun":{"NonRec":17}},{"Fun":{"NonRec":30}},{"Fun":{"NonRec":175}},{"TraitImpl":{"NonRec":14}},{"TraitImpl":{"NonRec":12}},{"Fun":{"NonRec":177}},{"TraitImpl":{"NonRec":13}},{"Fun":{"NonRec":174}},{"Fun":{"NonRec":224}},{"TraitImpl":{"NonRec":6}},{"TraitDecl":{"NonRec":23}},{"Fun":{"NonRec":148}},{"Type":{"NonRec":7}},{"Fun":{"NonRec":22}},{"TraitDecl":{"NonRec":5}},{"Fun":{"NonRec":187}},{"TraitImpl":{"NonRec":5}},{"Type":{"NonRec":3}},{"TraitDecl":{"NonRec":3}},{"Fun":{"NonRec":41}},{"Fun":{"NonRec":223}},{"TraitImpl":{"NonRec":4}},{"TraitDecl":{"NonRec":17}},{"TraitDecl":{"NonRec":7}},{"Fun":{"NonRec":55}},{"Fun":{"NonRec":56}},{"Fun":{"NonRec":59}},{"Fun":{"NonRec":189}},{"Fun":{"NonRec":190}},{"Fun":{"NonRec":193}},{"TraitImpl":{"NonRec":8}},{"Type":{"NonRec":6}},{"Fun":{"NonRec":62}},{"Fun":{"NonRec":225}},{"TraitImpl":{"NonRec":7}},{"TraitDecl":{"NonRec":26}},{"Fun":{"NonRec":197}},{"TraitDecl":{"NonRec":27}},{"Fun":{"NonRec":198}},{"TraitDecl":{"NonRec":4}},{"TraitDecl":{"NonRec":20}},{"Fun":{"NonRec":149}},{"Fun":{"NonRec":10}},{"Fun":{"NonRec":72}},{"TraitImpl":{"NonRec":3}},{"TraitDecl":{"NonRec":22}},{"Fun":{"NonRec":150}},{"TraitDecl":{"NonRec":24}},{"Fun":{"NonRec":154}},{"TraitDecl":{"NonRec":25}},{"Fun":{"NonRec":11}},{"Fun":{"NonRec":9}},{"TraitDecl":{"NonRec":9}},{"TraitImpl":{"NonRec":10}},{"Fun":{"NonRec":15}},{"Fun":{"NonRec":188}},{"TraitImpl":{"NonRec":16}},{"Type":{"NonRec":9}},{"TraitDecl":{"NonRec":2}},{"Fun":{"NonRec":7}},{"TraitDecl":{"NonRec":16}},{"TraitDecl":{"NonRec":14}},{"Fun":{"NonRec":49}},{"Fun":{"NonRec":50}},{"TraitDecl":{"NonRec":19}},{"TraitDecl":{"NonRec":15}},{"Fun":{"NonRec":51}},{"Fun":{"NonRec":52}},{"Fun":{"NonRec":53}},{"TraitDecl":{"NonRec":21}},{"Fun":{"NonRec":14}},{"Fun":{"NonRec":21}},{"Fun":{"NonRec":20}},{"TraitDecl":{"NonRec":28}},{"TraitImpl":{"NonRec":11}},{"TraitDecl":{"NonRec":8}},{"Fun":{"NonRec":162}},{"Fun":{"NonRec":163}},{"Fun":{"NonRec":164}},{"Fun":{"NonRec":165}},{"Fun":{"NonRec":166}},{"Fun":{"NonRec":167}},{"Fun":{"NonRec":168}},{"Fun":{"NonRec":169}},{"Fun":{"NonRec":170}},{"Fun":{"NonRec":171}},{"Fun":{"NonRec":172}},{"Fun":{"NonRec":173}},{"TraitImpl":{"NonRec":9}},{"Type":{"NonRec":4}},{"Fun":{"NonRec":199}},{"Fun":{"NonRec":222}},{"TraitImpl":{"NonRec":2}},{"Fun":{"NonRec":13}},{"Fun":{"NonRec":19}},{"Fun":{"NonRec":8}},{"Fun":{"NonRec":23}},{"Type":{"NonRec":2}},{"Type":{"NonRec":1}},{"Fun":{"NonRec":5}},{"Fun":{"NonRec":18}},{"Fun":{"NonRec":6}},{"Fun":{"NonRec":16}},{"Fun":{"NonRec":12}},{"Fun":{"NonRec":221}},{"TraitImpl":{"NonRec":1}},{"Type":{"NonRec":0}},{"Fun":{"NonRec":0}},{"Fun":{"NonRec":1}},{"Fun":{"NonRec":2}},{"Fun":{"NonRec":3}},{"Fun":{"NonRec":4}}]}}